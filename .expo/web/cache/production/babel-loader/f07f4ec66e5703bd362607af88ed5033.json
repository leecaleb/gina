{"ast":null,"code":"import _toConsumableArray from\"@babel/runtime/helpers/toConsumableArray\";import _defineProperty from\"@babel/runtime/helpers/defineProperty\";function ownKeys(object,enumerableOnly){var keys=Object.keys(object);if(Object.getOwnPropertySymbols){var symbols=Object.getOwnPropertySymbols(object);if(enumerableOnly)symbols=symbols.filter(function(sym){return Object.getOwnPropertyDescriptor(object,sym).enumerable;});keys.push.apply(keys,symbols);}return keys;}function _objectSpread(target){for(var i=1;i<arguments.length;i++){var source=arguments[i]!=null?arguments[i]:{};if(i%2){ownKeys(Object(source),true).forEach(function(key){_defineProperty(target,key,source[key]);});}else if(Object.getOwnPropertyDescriptors){Object.defineProperties(target,Object.getOwnPropertyDescriptors(source));}else{ownKeys(Object(source)).forEach(function(key){Object.defineProperty(target,key,Object.getOwnPropertyDescriptor(source,key));});}}return target;}var initial_state={loaded:false,by_student_id:{},records:{by_id:{},all_id:new Set()},newDataForCreate:new Set(),oldDataForEdit:new Set(),dataForRemoval:new Set(),errMessage:''};export default function milk(){var state=arguments.length>0&&arguments[0]!==undefined?arguments[0]:initial_state;var action=arguments.length>1?arguments[1]:undefined;switch(action.type){case'INITIALIZE_CLASS':{var by_student_id={};action.students.forEach(function(student){var id=student.id;by_student_id[id]=[];});return _objectSpread(_objectSpread({},state),{},{by_student_id:by_student_id});}case'FETCH_CLASS_MILK_DATA':{var _action$milkData=action.milkData,_by_student_id=_action$milkData.by_student_id,records=_action$milkData.records;return _objectSpread(_objectSpread({},state),{},{by_student_id:_objectSpread(_objectSpread({},state.by_student_id),_by_student_id),records:{by_id:_objectSpread(_objectSpread({},state.records.by_id),records.by_id),all_id:new Set([].concat(_toConsumableArray(state.records.all_id),_toConsumableArray(records.all_id)))}});}case'FETCH_CLASS_MILK_DATA_SUCCESS':{}case'ADD_MILK_RECORD':{var newState=_objectSpread({},state);var student_id=action.student_id;var record_id=state.newDataForCreate.size;newState.records.by_id[record_id]={student_id:student_id,time:new Date(),amount:'',teacher_id:''};newState.by_student_id[student_id].push(record_id);newState.newDataForCreate.add(record_id);return newState;}case'EDIT_MILK_AMOUNT':{var _newState=_objectSpread({},state);var _record_id=action.record_id,milk_amount=action.milk_amount,teacher_id=action.teacher_id;_newState.records.by_id[_record_id].amount=milk_amount;_newState.records.by_id[_record_id].teacher_id=teacher_id;if(!_newState.newDataForCreate.has(_record_id)){_newState.oldDataForEdit.add(_record_id);}return _newState;}case'EDIT_MILK_TIME':{var _newState2=_objectSpread({},state);var _record_id2=action.record_id,date_time=action.date_time,_teacher_id=action.teacher_id;_newState2.records.by_id[_record_id2].time=date_time;_newState2.records.by_id[_record_id2].teacher_id=_teacher_id;if(!_newState2.newDataForCreate.has(_record_id2)){_newState2.oldDataForEdit.add(_record_id2);}return _newState2;}case'CREATE_DATA_SUCCESS':{return _objectSpread(_objectSpread({},state),{},{newDataForCreate:new Set()});}case'CREATE_DATA_FAIL':{return _objectSpread(_objectSpread({},state),{},{errMessage:action.errMessage});}case'EDIT_DATA_SUCCESS':{return _objectSpread(_objectSpread({},state),{},{oldDataForEdit:new Set()});}case'EDIT_DATA_FAIL':{return _objectSpread(_objectSpread({},state),{},{errMessage:action.errMessage});}case'REMOVE_RECORD':{var _student_id=action.student_id,_record_id3=action.record_id;var _newState3=_objectSpread({},state);var record_id_index=state.by_student_id[_student_id].indexOf(_record_id3);if(record_id_index>-1){_newState3.by_student_id[_student_id].splice(record_id_index,1);}if(_newState3.oldDataForEdit.has(_record_id3)){_newState3.oldDataForEdit.delete(_record_id3);}if(_newState3.newDataForCreate.has(_record_id3)){_newState3.newDataForCreate.delete(_record_id3);}else{_newState3.dataForRemoval.add(_record_id3);}return _newState3;}case'REMOVE_MILK_RECORD_SUCCESS':return _objectSpread(_objectSpread({},state),{},{dataForRemoval:new Set()});case'REMOVE_MILK_RECORD_FAIL':return _objectSpread(_objectSpread({},state),{},{errMessage:'Error occured while removing milk record, please try again'});case'CLEAR_STATE':return{loaded:false,by_student_id:{},records:{by_id:{},all_id:new Set()},newDataForCreate:new Set(),oldDataForEdit:new Set(),dataForRemoval:new Set(),errMessage:''};default:return state;}}","map":{"version":3,"sources":["/home/caleb_lee/gina_web_app/redux/school/reducers/milk.js"],"names":["initial_state","loaded","by_student_id","records","by_id","all_id","Set","newDataForCreate","oldDataForEdit","dataForRemoval","errMessage","milk","state","action","type","students","forEach","student","id","milkData","newState","student_id","record_id","size","time","Date","amount","teacher_id","push","add","milk_amount","has","date_time","record_id_index","indexOf","splice","delete"],"mappings":"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","sourcesContent":["var initial_state = {\n    /* TODO: flatten the structure like sleep record for better separation of post and put (?)\n            -why separate post and put instead of upsert in lambda?\n            -possible conflict: if using student_id/date/time as uniqueness delimeter,\n                                edited records with a new time set gets INSERTed into database\n            -solution: fetched data doesn't get added into newDataForCreate set\n            -problem#2: how do we treat initial rendering of page; will each student gets a placeholding, empty record\n    */\n    loaded: false,\n    by_student_id: {\n        // {student_id}: [{record_id}, {...}]\n    },\n    records: {\n        by_id: {\n            /*{ record_id }: {\n                student_id,\n                time,\n                amount,\n                teacher_id\n            }*/\n        },\n        all_id: new Set()\n    },\n    // pendingUpdates: new Set(),\n    newDataForCreate: new Set(),\n    oldDataForEdit: new Set(),\n    dataForRemoval: new Set(),\n    errMessage: ''\n}\n\nexport default function milk(state = initial_state, action) {\n    switch (action.type) {\n        case 'INITIALIZE_CLASS': {\n            var by_student_id = {}\n            action.students.forEach(student => {\n                const { id } = student\n                by_student_id[id] = []\n            })\n            // initial_state = {\n            //     ...state,\n            //     by_student_id\n            // }\n            return {\n                ...state,\n                by_student_id\n            }\n        }\n        \n        case 'FETCH_CLASS_MILK_DATA': {\n            const { by_student_id, records } = action.milkData\n            \n            return {\n                ...state,\n                by_student_id: {\n                    ...state.by_student_id,\n                    ...by_student_id\n                },\n                records: {\n                    by_id: {\n                        ...state.records.by_id,\n                        ...records.by_id\n                    },\n                    all_id: new Set([\n                        ...state.records.all_id,\n                        ...records.all_id\n                    ])\n                }\n            }\n        }\n\n        case 'FETCH_CLASS_MILK_DATA_SUCCESS': {\n\n        } \n\n        case 'ADD_MILK_RECORD': {\n            const newState = { ...state }\n            const { student_id } = action\n            const record_id = state.newDataForCreate.size\n            newState.records.by_id[record_id] = {\n                student_id,\n                time: new Date,\n                amount: '',\n                teacher_id: ''\n            }\n            newState.by_student_id[student_id].push(record_id)\n            newState.newDataForCreate.add(record_id)\n            return newState\n        }\n\n        case 'EDIT_MILK_AMOUNT': {\n            const newState = { ...state }\n            const { record_id, milk_amount, teacher_id } = action\n            newState.records.by_id[record_id].amount = milk_amount\n            newState.records.by_id[record_id].teacher_id = teacher_id\n            if (!newState.newDataForCreate.has(record_id)) {\n                newState.oldDataForEdit.add(record_id)\n            }\n            return newState\n        }\n\n        case 'EDIT_MILK_TIME': {\n            const newState = { ...state }\n            const { record_id, date_time, teacher_id } = action\n            newState.records.by_id[record_id].time = date_time\n            newState.records.by_id[record_id].teacher_id = teacher_id\n            if (!newState.newDataForCreate.has(record_id)) {\n                newState.oldDataForEdit.add(record_id)\n            }\n            return newState\n        }\n            \n        case 'CREATE_DATA_SUCCESS': {\n            return {\n                ...state,\n                newDataForCreate: new Set()\n            }\n        }\n            \n        case 'CREATE_DATA_FAIL': {\n            return {\n                ...state,\n                errMessage: action.errMessage\n            }\n        }\n            \n        case 'EDIT_DATA_SUCCESS': {\n            return {\n                ...state,\n                oldDataForEdit: new Set()\n            }\n        }\n            \n        case 'EDIT_DATA_FAIL': {\n            return {\n                ...state,\n                errMessage: action.errMessage\n            }\n        }\n\n        case 'REMOVE_RECORD': {\n            const { student_id, record_id } = action\n            const newState = { ...state }\n            let record_id_index = state.by_student_id[student_id].indexOf(record_id)\n            if (record_id_index > -1) {\n                newState.by_student_id[student_id].splice(record_id_index, 1)\n            }\n\n            if (newState.oldDataForEdit.has(record_id)) {\n                newState.oldDataForEdit.delete(record_id)\n            }\n\n            if (newState.newDataForCreate.has(record_id)) {\n                newState.newDataForCreate.delete(record_id)\n            } else {\n                newState.dataForRemoval.add(record_id)\n            }\n\n            return newState\n        }\n            \n        case 'REMOVE_MILK_RECORD_SUCCESS':\n            return {\n                ...state,\n                dataForRemoval: new Set()\n            }\n        \n        case 'REMOVE_MILK_RECORD_FAIL':\n            return {\n                ...state,\n                errMessage: 'Error occured while removing milk record, please try again'\n            }\n        \n        case 'CLEAR_STATE':\n            return {\n                loaded: false,\n                by_student_id: {},\n                records: {\n                    by_id: {},\n                    all_id: new Set()\n                },\n                newDataForCreate: new Set(),\n                oldDataForEdit: new Set(),\n                dataForRemoval: new Set(),\n                errMessage: ''\n            }\n\n        default:\n            return state\n    }\n}"]},"metadata":{},"sourceType":"module"}