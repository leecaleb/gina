{"ast":null,"code":"import _toConsumableArray from\"@babel/runtime/helpers/toConsumableArray\";import _defineProperty from\"@babel/runtime/helpers/defineProperty\";function ownKeys(object,enumerableOnly){var keys=Object.keys(object);if(Object.getOwnPropertySymbols){var symbols=Object.getOwnPropertySymbols(object);if(enumerableOnly)symbols=symbols.filter(function(sym){return Object.getOwnPropertyDescriptor(object,sym).enumerable;});keys.push.apply(keys,symbols);}return keys;}function _objectSpread(target){for(var i=1;i<arguments.length;i++){var source=arguments[i]!=null?arguments[i]:{};if(i%2){ownKeys(Object(source),true).forEach(function(key){_defineProperty(target,key,source[key]);});}else if(Object.getOwnPropertyDescriptors){Object.defineProperties(target,Object.getOwnPropertyDescriptors(source));}else{ownKeys(Object(source)).forEach(function(key){Object.defineProperty(target,key,Object.getOwnPropertyDescriptor(source,key));});}}return target;}var initial_state={by_student_id:{},records:{},record_id_for_update:new Set(),errMessage:'',records_with_error:new Set()};export default function healthstatus(){var state=arguments.length>0&&arguments[0]!==undefined?arguments[0]:initial_state;var action=arguments.length>1?arguments[1]:undefined;switch(action.type){case'INITIALIZE_STUDENT_WELLNESS':{var by_student_id={};var records={};var len=0;action.students.forEach(function(student_id){by_student_id[student_id]=[len,len+1];records[len]={temperature:'',status:'健康寶寶',time:null,teacher_id:''};records[len+1]={temperature:'',status:'健康寶寶',time:null,teacher_id:''};len+=2;});return _objectSpread(_objectSpread({},state),{},{by_student_id:by_student_id,records:records});}case'FETCH_CLASS_WELLNESS_DATA':{var _action$wellnessData=action.wellnessData,_by_student_id=_action$wellnessData.by_student_id,_records=_action$wellnessData.records;var student_id_list=Object.keys(_by_student_id);for(var i=0;i<student_id_list.length;i++){var student_id=student_id_list[i];var record_id_list=_by_student_id[student_id];if(record_id_list.length===1){record_id_list.push(state.by_student_id[student_id][1]);_by_student_id[student_id]=record_id_list;}}return _objectSpread(_objectSpread({},state),{},{by_student_id:_objectSpread(_objectSpread({},state.by_student_id),_by_student_id),records:_objectSpread(_objectSpread({},state.records),_records)});}case'ADD_RECORD':{var _by_student_id2=state.by_student_id,_records2=state.records;var _student_id=action.student_id;var new_id=Object.keys(state.records).length;return _objectSpread(_objectSpread({},state),{},{by_student_id:_objectSpread(_objectSpread({},_by_student_id2),{},_defineProperty({},_student_id,[].concat(_toConsumableArray(_by_student_id2[_student_id]),[new_id]))),records:_objectSpread(_objectSpread({},_records2),{},_defineProperty({},new_id,{temperature:'',status:'健康寶寶',time:null,teacher_id:''}))});}case'ADD_HEALTH_STATUS':{var _student_id2=action.student_id,record_id=action.record_id,status=action.status,teacher_id=action.teacher_id;var record_id_for_update=new Set([].concat(_toConsumableArray(state.record_id_for_update),[record_id]));var _records3=_objectSpread(_objectSpread({},state.records),{},_defineProperty({},record_id,_objectSpread(_objectSpread({},state.records[record_id]),{},{student_id:_student_id2,status:status,time:new Date(),teacher_id:teacher_id})));return _objectSpread(_objectSpread({},state),{},{records:_records3,record_id_for_update:record_id_for_update});}case'ADD_TEMPERATURE':{var _student_id3=action.student_id,_record_id=action.record_id,temperature=action.temperature,_teacher_id=action.teacher_id;var _record_id_for_update=new Set([].concat(_toConsumableArray(state.record_id_for_update),[_record_id]));var _records4=_objectSpread(_objectSpread({},state.records),{},_defineProperty({},_record_id,_objectSpread(_objectSpread({},state.records[_record_id]),{},{student_id:_student_id3,temperature:temperature,time:new Date(),teacher_id:_teacher_id})));return _objectSpread(_objectSpread({},state),{},{records:_records4,record_id_for_update:_record_id_for_update});}case'INVALIDATE_WELLNESS_DATA':{var _record_id2=action.record_id,errMessage=action.errMessage;return _objectSpread(_objectSpread({},state),{},{records_with_error:new Set([].concat(_toConsumableArray(state.records_with_error),[_record_id2]))});}case'SEND_WELLNESS_DATA_SUCCESS':{return _objectSpread(_objectSpread({},state),{},{record_id_for_update:new Set()});}case'SEND_DATA_FAIL':{return _objectSpread(_objectSpread({},state),{},{errMessage:action.errMessage});}case'CLEAR_STATE':{return{by_student_id:{},records:{},record_id_for_update:new Set(),errMessage:'',records_with_error:new Set()};}default:return state;}}","map":{"version":3,"sources":["/home/caleb_lee/gina_web_app/redux/school/reducers/healthstatus.js"],"names":["initial_state","by_student_id","records","record_id_for_update","Set","errMessage","records_with_error","healthstatus","state","action","type","len","students","forEach","student_id","temperature","status","time","teacher_id","wellnessData","student_id_list","Object","keys","i","length","record_id_list","push","new_id","record_id","Date"],"mappings":"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","sourcesContent":["var initial_state = {\n    // loaded: false,\n    by_student_id: {\n        /*\n        {student_id}: [{record_id}, {record_id}...]\n        */\n    },\n    records: {\n        // { record_id }: {\n        //     student_id\n        //     temperature: {INT_TYPE},\n        //     status: '',\n        //     time: '',\n        //     teacher_id: ''\n        // }, {...}\n    },\n    record_id_for_update: new Set(),\n    // record_id_for_edit: new Set()\n    errMessage: '',\n    records_with_error: new Set()\n}\n\nexport default function healthstatus(state = initial_state, action) {\n    switch (action.type) {\n        case 'INITIALIZE_STUDENT_WELLNESS': {\n            var by_student_id = {}\n            var records = {}\n            var len = 0\n            action.students.forEach(student_id => {\n                // const { id } = student\n                by_student_id[student_id] = [len, len+1]\n\n                records[len] = {\n                    temperature: '',\n                    status: '健康寶寶',\n                    time: null,\n                    teacher_id: ''\n                }\n\n                records[len+1] = {\n                    temperature: '',\n                    status: '健康寶寶',\n                    time: null,\n                    teacher_id: ''\n                }\n\n                len+=2\n            })\n\n            return {\n                ...state,\n                by_student_id,\n                records\n            }\n        }\n\n        case 'FETCH_CLASS_WELLNESS_DATA': {\n            const { by_student_id, records } = action.wellnessData\n            const student_id_list = Object.keys(by_student_id)\n            for (var i = 0; i < student_id_list.length; i++){\n                const student_id = student_id_list[i]\n                let record_id_list = by_student_id[student_id]\n                if (record_id_list.length === 1) {\n                    record_id_list.push(state.by_student_id[student_id][1])\n                    by_student_id[student_id] = record_id_list\n                }\n            }\n            return {\n                ...state,\n                by_student_id: {\n                    ...state.by_student_id,\n                    ...by_student_id\n                },\n                records: {\n                    ...state.records,\n                    ...records\n                },\n                // record_id_for_update: new Set()\n            }\n        }\n\n        case 'ADD_RECORD': {\n            const {by_student_id, records} = state\n            const { student_id } = action\n            const new_id = Object.keys(state.records).length\n            return {\n                ...state,\n                by_student_id: {\n                    ...by_student_id,\n                    [student_id]: [...by_student_id[student_id], new_id]\n                },\n                records: {\n                    ...records,\n                    [new_id]: {\n                        temperature: '',\n                        status: '健康寶寶',\n                        time: null,\n                        teacher_id: ''\n                    }\n                }\n            }\n        }\n\n        case 'ADD_HEALTH_STATUS': {\n            const { student_id, record_id, status, teacher_id } = action\n            const record_id_for_update = new Set([...state.record_id_for_update, record_id])\n            const records = {\n                ...state.records,\n                [record_id]: {\n                    ...state.records[record_id],\n                    student_id,\n                    status,\n                    time: new Date(),\n                    teacher_id\n                }\n            }\n            return {\n                ...state,\n                records,\n                record_id_for_update\n            }\n        }\n        case 'ADD_TEMPERATURE': {\n            const { student_id, record_id, temperature, teacher_id } = action\n            const record_id_for_update = new Set([...state.record_id_for_update, record_id])\n            const records = {\n                ...state.records,\n                [record_id]: {\n                    ...state.records[record_id],\n                    student_id,\n                    temperature,\n                    time: new Date(),\n                    teacher_id\n                }\n            }\n            return {\n                ...state,\n                records,\n                record_id_for_update\n            }\n        }\n            \n        case 'INVALIDATE_WELLNESS_DATA': {\n            const { record_id, errMessage } = action\n            return {\n                ...state,\n                //TODO how do we efficiently match each errmessage to the wellness_form that contains the error\n                records_with_error: new Set([...state.records_with_error, record_id])\n            }\n        }\n            \n        case 'SEND_WELLNESS_DATA_SUCCESS': {\n            return {\n                ...state,\n                record_id_for_update: new Set()\n            }\n        }\n            \n        case 'SEND_DATA_FAIL': {\n            return {\n                ...state,\n                errMessage: action.errMessage\n            }\n        }\n\n        case 'CLEAR_STATE': {\n            return {\n                by_student_id: {},\n                records: {},\n                record_id_for_update: new Set(),\n                errMessage: '',\n                records_with_error: new Set()\n            }\n        }\n        \n        default:\n            return state\n    }\n}"]},"metadata":{},"sourceType":"module"}