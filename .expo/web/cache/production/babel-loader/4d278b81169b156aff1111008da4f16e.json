{"ast":null,"code":"import _defineProperty from\"@babel/runtime/helpers/defineProperty\";function ownKeys(object,enumerableOnly){var keys=Object.keys(object);if(Object.getOwnPropertySymbols){var symbols=Object.getOwnPropertySymbols(object);if(enumerableOnly)symbols=symbols.filter(function(sym){return Object.getOwnPropertyDescriptor(object,sym).enumerable;});keys.push.apply(keys,symbols);}return keys;}function _objectSpread(target){for(var i=1;i<arguments.length;i++){var source=arguments[i]!=null?arguments[i]:{};if(i%2){ownKeys(Object(source),true).forEach(function(key){_defineProperty(target,key,source[key]);});}else if(Object.getOwnPropertyDescriptors){Object.defineProperties(target,Object.getOwnPropertyDescriptors(source));}else{ownKeys(Object(source)).forEach(function(key){Object.defineProperty(target,key,Object.getOwnPropertyDescriptor(source,key));});}}return target;}export default function inbox(){var state=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{conversations:[],current_conversation_id:'',unread_conversation_list:[],conversations_by_id:{}};var action=arguments.length>1?arguments[1]:undefined;switch(action.type){case'GET_CONVERSATIONS':var conversations=action.conversations,unread_conversation_list=action.unread_conversation_list;return _objectSpread(_objectSpread({},state),{},{conversations:conversations,unread_conversation_list:unread_conversation_list});case'SET_MESSAGE_DATA':var newState=_objectSpread({},state);var messages=action.messages,most_recently_read_message_id=action.most_recently_read_message_id,conversation_id=action.conversation_id,student_id=action.student_id;newState.conversations_by_id[conversation_id]={student_id:student_id,messages:messages,most_recently_read_message_id:most_recently_read_message_id};newState.current_conversation_id=conversation_id;newState.unread_conversation_list=newState.unread_conversation_list.filter(function(id){return id!==conversation_id;});return newState;case'SET_CURRENT_CONVERSATION_ID':return _objectSpread(_objectSpread({},state),{},{current_conversation_id:action.conversation_id});case'CLEAR_CURRENT_CONVERSATION_ID':return _objectSpread(_objectSpread({},state),{},{current_conversation_id:''});default:return state;}}","map":{"version":3,"sources":["/home/caleb_lee/gina_web_app/redux/school/reducers/inbox.js"],"names":["inbox","state","conversations","current_conversation_id","unread_conversation_list","conversations_by_id","action","type","newState","messages","most_recently_read_message_id","conversation_id","student_id","filter","id"],"mappings":"+1BAAA,cAAe,SAASA,CAAAA,KAAT,EAmBJ,IAnBmBC,CAAAA,KAmBnB,2DAnB2B,CACpCC,aAAa,CAAE,EADqB,CAEpCC,uBAAuB,CAAE,EAFW,CAGpCC,wBAAwB,CAAE,EAHU,CAIpCC,mBAAmB,CAAE,EAJe,CAmB3B,IAARC,CAAAA,MAAQ,2CACT,OAAQA,MAAM,CAACC,IAAf,EACE,IAAK,mBAAL,IACUL,CAAAA,aADV,CACsDI,MADtD,CACUJ,aADV,CACyBE,wBADzB,CACsDE,MADtD,CACyBF,wBADzB,CAEE,sCACKH,KADL,MAEEC,aAAa,CAAbA,aAFF,CAGEE,wBAAwB,CAAxBA,wBAHF,GAKF,IAAK,kBAAL,CACE,GAAMI,CAAAA,QAAQ,kBAAQP,KAAR,CAAd,CADF,GAEUQ,CAAAA,QAFV,CAEmFH,MAFnF,CAEUG,QAFV,CAEoBC,6BAFpB,CAEmFJ,MAFnF,CAEoBI,6BAFpB,CAEmDC,eAFnD,CAEmFL,MAFnF,CAEmDK,eAFnD,CAEoEC,UAFpE,CAEmFN,MAFnF,CAEoEM,UAFpE,CAGEJ,QAAQ,CAACH,mBAAT,CAA6BM,eAA7B,EAAgD,CAC9CC,UAAU,CAAVA,UAD8C,CAE9CH,QAAQ,CAARA,QAF8C,CAG9CC,6BAA6B,CAA7BA,6BAH8C,CAAhD,CAKAF,QAAQ,CAACL,uBAAT,CAAmCQ,eAAnC,CACAH,QAAQ,CAACJ,wBAAT,CAAoCI,QAAQ,CAACJ,wBAAT,CAAkCS,MAAlC,CAAyC,SAAAC,EAAE,QAAIA,CAAAA,EAAE,GAAKH,eAAX,EAA3C,CAApC,CACA,MAAOH,CAAAA,QAAP,CACF,IAAK,6BAAL,CACE,sCACKP,KADL,MAEEE,uBAAuB,CAAEG,MAAM,CAACK,eAFlC,GAIF,IAAK,+BAAL,CACE,sCACKV,KADL,MAEEE,uBAAuB,CAAE,EAF3B,GAIF,QACE,MAAOF,CAAAA,KAAP,CA9BJ,CAgCD","sourcesContent":["export default function inbox(state = {\n  conversations: [],\n  current_conversation_id: '',\n  unread_conversation_list: [],\n  conversations_by_id: {\n    // { conversation_id }: {\n    //   most_recently_read_message_id: 'MESSAGE_ID',\n    //   student_id: '',\n    //   messages: [\n    //     {\n    //       message_id,\n    //       message_text,\n    //       created_at,\n    //       read_at,\n    //       sender_id\n    //     }, {...}\n    //   ]\n    // }\n  }\n}, action) {\n  switch (action.type) {\n    case 'GET_CONVERSATIONS':\n      const { conversations, unread_conversation_list } = action\n      return {\n        ...state,\n        conversations,\n        unread_conversation_list\n      }\n    case 'SET_MESSAGE_DATA':\n      const newState = { ...state }\n      const { messages, most_recently_read_message_id, conversation_id, student_id } = action\n      newState.conversations_by_id[conversation_id] = {\n        student_id,\n        messages,\n        most_recently_read_message_id\n      }\n      newState.current_conversation_id = conversation_id\n      newState.unread_conversation_list = newState.unread_conversation_list.filter(id => id !== conversation_id)\n      return newState\n    case 'SET_CURRENT_CONVERSATION_ID':\n      return {\n        ...state,\n        current_conversation_id: action.conversation_id\n      }\n    case 'CLEAR_CURRENT_CONVERSATION_ID':\n      return {\n        ...state,\n        current_conversation_id: ''\n      }\n    default:\n      return state\n  }\n}"]},"metadata":{},"sourceType":"module"}