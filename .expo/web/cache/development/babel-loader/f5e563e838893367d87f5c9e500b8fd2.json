{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nvar initial_state = {\n  by_student_id: {},\n  records: {\n    by_id: {},\n    all_id: new Set()\n  },\n  errorMessage: '',\n  newDataForCreate: new Set(),\n  oldDataForEdit: new Set(),\n  records_with_error: new Set()\n};\nexport default function sleep() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initial_state;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case 'INITIALIZE_CLASS':\n      by_student_id = {};\n      action.students.forEach(function (student) {\n        var id = student.id;\n        by_student_id[id] = [];\n      });\n      return _objectSpread(_objectSpread({}, state), {}, {\n        by_student_id: by_student_id\n      });\n\n    case 'FETCH_CLASS_SLEEP_DATA':\n      {\n        var _action$sleepData = action.sleepData,\n            _by_student_id = _action$sleepData.by_student_id,\n            records = _action$sleepData.records;\n        return _objectSpread(_objectSpread({}, state), {}, {\n          by_student_id: _objectSpread(_objectSpread({}, state.by_student_id), _by_student_id),\n          records: {\n            by_id: _objectSpread(_objectSpread({}, state.records.by_id), records.by_id),\n            all_id: new Set([].concat(_toConsumableArray(state.records.all_id), _toConsumableArray(records.all_id)))\n          }\n        });\n      }\n\n    case 'SET_SLEEP_TIME':\n      {\n        var newState = _objectSpread({}, state);\n\n        var student_id = action.student_id,\n            index = action.index,\n            sleep_time = action.sleep_time,\n            teacher_id = action.teacher_id;\n        var record_id_array = newState.by_student_id[student_id];\n        var record_id = record_id_array[index];\n        var _records = newState.records.by_id;\n        sleep_time.setSeconds(0, 0);\n\n        if (index !== null) {\n          if (index > 0 && sleep_time <= _records[record_id_array[index - 1]].sleep_time) {\n            var _record_id_array = newState.by_student_id[student_id];\n\n            var removed = _record_id_array.splice(index, 1);\n\n            var found = 0;\n\n            for (var i = 0; i < _record_id_array.length - 1; i++) {\n              if (_records[_record_id_array[i]].sleep_time > sleep_time) {\n                found = i;\n                break;\n              }\n            }\n\n            _record_id_array.splice(found, 0, removed[0]);\n\n            newState.by_student_id[student_id] = _record_id_array;\n          }\n\n          newState.records.by_id[record_id].sleep_time = sleep_time;\n          newState.records.by_id[record_id].teacher_id = teacher_id;\n\n          if (!newState.newDataForCreate.has(record_id)) {\n            newState.oldDataForEdit.add(record_id);\n          }\n        } else {\n          var new_record_id = newState.records.all_id.size;\n          newState.by_student_id[student_id].push(new_record_id);\n          newState.records.by_id[new_record_id] = {\n            student_id: student_id,\n            sleep_time: sleep_time,\n            wake_time: null,\n            teacher_id: teacher_id\n          };\n          newState.records.all_id.add(new_record_id);\n          newState.errorMessage = '';\n          newState.newDataForCreate.add(new_record_id);\n        }\n\n        return newState;\n      }\n\n    case 'SET_WAKE_TIME':\n      {\n        var _newState = _objectSpread({}, state);\n\n        var _student_id = action.student_id,\n            _index = action.index,\n            wake_time = action.wake_time,\n            _teacher_id = action.teacher_id;\n        var _record_id = _newState.by_student_id[_student_id][_index];\n        wake_time.setSeconds(0, 0);\n        _newState.records.by_id[_record_id].wake_time = wake_time;\n        _newState.records.by_id[_record_id].teacher_id = _teacher_id;\n        _newState.errorMessage = '';\n\n        if (!_newState.newDataForCreate.has(_record_id)) {\n          _newState.oldDataForEdit.add(_record_id);\n        }\n\n        return _newState;\n      }\n\n    case 'REMOVE_WAKE_TIME':\n      {\n        var _record_id2 = action.record_id,\n            _teacher_id2 = action.teacher_id;\n\n        var _newState2 = _objectSpread({}, state);\n\n        var records_with_error = new Set(_toConsumableArray(state.records_with_error));\n        records_with_error.delete(_record_id2);\n        _newState2.records_with_error = records_with_error;\n        _newState2.records.by_id[_record_id2].wake_time = null;\n        _newState2.records.by_id[_record_id2].teacher_id = _teacher_id2;\n\n        if (!_newState2.newDataForCreate.has(_record_id2)) {\n          _newState2.oldDataForEdit.add(_record_id2);\n        }\n\n        return _newState2;\n      }\n\n    case 'CREATE_SLEEP_RECORD_SUCCESS':\n      {\n        return _objectSpread(_objectSpread({}, state), {}, {\n          newDataForCreate: new Set()\n        });\n      }\n\n    case 'CREATE_SLEEP_RECORD_FAIL':\n      {\n        return _objectSpread(_objectSpread({}, state), {}, {\n          errorMessage: action.errMessage\n        });\n      }\n\n    case 'EDIT_SLEEP_RECORD_SUCCESS':\n      {\n        return _objectSpread(_objectSpread({}, state), {}, {\n          oldDataForEdit: new Set()\n        });\n      }\n\n    case 'EDIT_SLEEP_RECORD_FAIL':\n      {\n        return _objectSpread(_objectSpread({}, state), {}, {\n          errorMessage: action.errMessage\n        });\n      }\n\n    case 'REMOVE_RECORD_SUCCESS':\n      {\n        var _record_id3 = action.record_id,\n            _student_id2 = action.student_id;\n        var student_record_ids = state.by_student_id[_student_id2];\n        var removing_index = student_record_ids.findIndex(function (element) {\n          return element === _record_id3;\n        });\n        var newDataForCreate = new Set(_toConsumableArray(state.newDataForCreate));\n        newDataForCreate.delete(_record_id3);\n        var oldDataForEdit = new Set(_toConsumableArray(state.oldDataForEdit));\n        oldDataForEdit.delete(_record_id3);\n        return _objectSpread(_objectSpread({}, state), {}, {\n          by_student_id: _objectSpread(_objectSpread({}, state.by_student_id), {}, _defineProperty({}, _student_id2, [].concat(_toConsumableArray(student_record_ids.slice(0, removing_index)), _toConsumableArray(student_record_ids.slice(removing_index + 1))))),\n          newDataForCreate: newDataForCreate,\n          oldDataForEdit: oldDataForEdit\n        });\n      }\n\n    case 'REMOVE_RECORD_FAIL':\n      {\n        return _objectSpread(_objectSpread({}, state), {}, {\n          errorMessage: action.errorMessage\n        });\n      }\n\n    case 'MARK_RECORD_ERROR':\n      {\n        var _record_id_array2 = action.record_id_array;\n        return _objectSpread(_objectSpread({}, state), {}, {\n          records_with_error: new Set([].concat(_toConsumableArray(state.records_with_error), _toConsumableArray(_record_id_array2)))\n        });\n      }\n\n    case 'MARK_RECORD_CORRECT':\n      {\n        var _record_id4 = action.record_id;\n\n        var _records_with_error = new Set(_toConsumableArray(state.records_with_error));\n\n        _records_with_error.delete(_record_id4);\n\n        return _objectSpread(_objectSpread({}, state), {}, {\n          records_with_error: _records_with_error\n        });\n      }\n\n    case 'ALERT_SLEEPLOG_ERROR_MESSAGE':\n      {\n        var err_message = action.err_message;\n        return _objectSpread(_objectSpread({}, state), {}, {\n          errorMessage: err_message\n        });\n      }\n\n    case 'CLEAR_SLEEPLOG_ERROR_MESSAGE':\n      {\n        return _objectSpread(_objectSpread({}, state), {}, {\n          errorMessage: ''\n        });\n      }\n\n    case 'CLEAR_STATE':\n      return {\n        by_student_id: {},\n        records: {\n          by_id: {},\n          all_id: new Set()\n        },\n        errorMessage: '',\n        newDataForCreate: new Set(),\n        oldDataForEdit: new Set(),\n        records_with_error: new Set()\n      };\n\n    default:\n      return state;\n  }\n}","map":{"version":3,"sources":["/home/caleb_lee/gina_web_app/redux/school/reducers/sleep.js"],"names":["initial_state","by_student_id","records","by_id","all_id","Set","errorMessage","newDataForCreate","oldDataForEdit","records_with_error","sleep","state","action","type","students","forEach","student","id","sleepData","newState","student_id","index","sleep_time","teacher_id","record_id_array","record_id","setSeconds","removed","splice","found","i","length","has","add","new_record_id","size","push","wake_time","delete","errMessage","student_record_ids","removing_index","findIndex","element","slice","err_message"],"mappings":"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","sourcesContent":["var initial_state = {\n    by_student_id: {\n        /*\n        {student_id}: [{record_id}, {...}]\n        */\n    },\n    records: {\n        by_id: {\n            // { record_id }: {\n            //     student_id: '',\n            //     sleep_time: '',\n            //     wake_time: '',\n            //     teacher_id: ''\n            // }\n        },\n        all_id: new Set()\n    },\n    errorMessage: '',\n    newDataForCreate: new Set(),\n    oldDataForEdit: new Set(),\n    records_with_error: new Set()\n}\n\nexport default function sleep(state = initial_state, action) {\n    switch (action.type) {\n        case 'INITIALIZE_CLASS':\n            by_student_id = {}\n            action.students.forEach(student => {\n                const { id } = student\n                by_student_id[id] = []\n            })\n            return {\n                ...state,\n                by_student_id\n            }\n\n        case 'FETCH_CLASS_SLEEP_DATA': {\n            const { by_student_id, records } = action.sleepData\n            return {\n                ...state,\n                by_student_id: {\n                    ...state.by_student_id,\n                    ...by_student_id\n                },\n                records: {\n                    by_id: {\n                        ...state.records.by_id,\n                        ...records.by_id\n                    },\n                    all_id: new Set([\n                        ...state.records.all_id,\n                        ...records.all_id\n                    ])\n                }\n            }\n        }\n\n        case 'SET_SLEEP_TIME': {\n            const newState = { ...state }\n            const { student_id, index, sleep_time, teacher_id } = action\n            const record_id_array = newState.by_student_id[student_id]\n            const record_id = record_id_array[index]\n            const records = newState.records.by_id\n            sleep_time.setSeconds(0, 0)\n            if (index !== null) { // if index is specified, we change data\n                if (index > 0 && sleep_time <= records[record_id_array[index - 1]].sleep_time) {\n                    const record_id_array = newState.by_student_id[student_id]\n                    const removed = record_id_array.splice(index, 1)\n                    let found = 0\n                    for(var i = 0; i < record_id_array.length-1; i++) {\n                        if (records[record_id_array[i]].sleep_time > sleep_time) {\n                            found = i // index of record\n                            break\n                        }\n                    }\n                    record_id_array.splice(found, 0, removed[0])\n                    newState.by_student_id[student_id] = record_id_array\n                }\n\n                newState.records.by_id[record_id].sleep_time = sleep_time\n                newState.records.by_id[record_id].teacher_id = teacher_id\n                \n                if (!newState.newDataForCreate.has(record_id)) {\n                    newState.oldDataForEdit.add(record_id)\n                }\n            } else { // if index not specified, we push new data\n                // const record_length = record_id_array.length\n                const new_record_id = newState.records.all_id.size\n\n                // if (record_length > 0 && sleep_time <= records[record_id_array[record_length - 1]].wake_time) {\n                //     //if sleep_time <= wake time of last record\n                //     // WARNING!!!!\n                //     newState.records_with_error = new Set([...state.records_with_error, new_record_id, record_length - 1])\n                // } \n                    newState.by_student_id[student_id].push(new_record_id)\n                    newState.records.by_id[new_record_id] = {\n                        student_id,\n                        sleep_time,\n                        wake_time: null,\n                        teacher_id\n                    }\n                    newState.records.all_id.add(new_record_id)\n                    newState.errorMessage = ''\n                    newState.newDataForCreate.add(new_record_id)\n                // }\n\n            }\n            return newState\n        }\n\n        case 'SET_WAKE_TIME': {\n            const newState = { ...state }\n            const { student_id, index, wake_time, teacher_id } = action\n            const record_id = newState.by_student_id[student_id][index]\n            // const next_record_id = index + 1 < newState.by_student_id[student_id].length ?\n            //     newState.by_student_id[student_id][index + 1]\n            //     : -1\n            // const records = newState.records.by_id\n            wake_time.setSeconds(0,0)\n\n            newState.records.by_id[record_id].wake_time = wake_time\n            newState.records.by_id[record_id].teacher_id = teacher_id\n            newState.errorMessage = ''\n            if (!newState.newDataForCreate.has(record_id)) {\n                newState.oldDataForEdit.add(record_id)\n            }\n\n            return newState\n        }\n            \n        case 'REMOVE_WAKE_TIME': {\n            const { record_id, teacher_id } = action\n            const newState = { ...state }\n            const records_with_error = new Set([...state.records_with_error])\n            records_with_error.delete(record_id)\n            newState.records_with_error = records_with_error\n            newState.records.by_id[record_id].wake_time = null\n            newState.records.by_id[record_id].teacher_id = teacher_id\n            if (!newState.newDataForCreate.has(record_id)) {\n                newState.oldDataForEdit.add(record_id)\n            }\n            return newState\n        }\n        \n        case 'CREATE_SLEEP_RECORD_SUCCESS': {\n            return {\n                ...state,\n                newDataForCreate: new Set()\n            }\n        }\n\n        case 'CREATE_SLEEP_RECORD_FAIL': {\n            return {\n                ...state,\n                errorMessage: action.errMessage\n            }\n        }\n\n        case 'EDIT_SLEEP_RECORD_SUCCESS': {\n            return {\n                ...state,\n                oldDataForEdit: new Set()\n            }\n        }\n\n        case 'EDIT_SLEEP_RECORD_FAIL': {\n            return {\n                ...state,\n                errorMessage: action.errMessage\n            }\n        }\n\n        case 'REMOVE_RECORD_SUCCESS': {\n            const { record_id, student_id } = action\n            const student_record_ids = state.by_student_id[student_id]\n            const removing_index = student_record_ids.findIndex(element => element === record_id)\n\n            const newDataForCreate = new Set([...state.newDataForCreate])\n            newDataForCreate.delete(record_id)\n\n            const oldDataForEdit = new Set([...state.oldDataForEdit])\n            oldDataForEdit.delete(record_id)\n            return {\n                ...state,\n                by_student_id: {\n                    ...state.by_student_id,\n                    [student_id]: [\n                        ...student_record_ids.slice(0, removing_index),\n                        ...student_record_ids.slice(removing_index+1)\n                    ]\n                },\n                newDataForCreate,\n                oldDataForEdit\n            }\n        }\n\n        case 'REMOVE_RECORD_FAIL': {\n            return {\n                ...state,\n                errorMessage: action.errorMessage\n            }\n        }\n\n        case 'MARK_RECORD_ERROR': {\n            const { record_id_array } = action\n            return {\n                ...state,\n                records_with_error: new Set([...state.records_with_error, ...record_id_array])\n\n            }\n        }\n\n        case 'MARK_RECORD_CORRECT': {\n            const { record_id } = action\n            let records_with_error = new Set([...state.records_with_error])\n            records_with_error.delete(record_id)\n            return {\n                ...state,\n                records_with_error\n            }\n        }\n            \n        case 'ALERT_SLEEPLOG_ERROR_MESSAGE': {\n            const {err_message} = action\n            return {\n                ...state,\n                errorMessage: err_message\n            }\n        }\n            \n        case 'CLEAR_SLEEPLOG_ERROR_MESSAGE': {\n            return {\n                ...state,\n                errorMessage: ''\n            }\n        }\n\n        case 'CLEAR_STATE':\n            return {\n                by_student_id: {},\n                records: {\n                    by_id: {},\n                    all_id: new Set()\n                },\n                errorMessage: '',\n                newDataForCreate: new Set(),\n                oldDataForEdit: new Set(),\n                records_with_error: new Set()\n            }\n        \n        default:\n            return state \n    }\n}"]},"metadata":{},"sourceType":"module"}