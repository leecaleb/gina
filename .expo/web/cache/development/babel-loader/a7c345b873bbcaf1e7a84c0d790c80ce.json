{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nvar _jsxFileName = \"/home/caleb_lee/gina_web_app/components/teacher/logs/medicinelog.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function () { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport RefreshControl from \"react-native-web/dist/exports/RefreshControl\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport TouchableHighlight from \"react-native-web/dist/exports/TouchableHighlight\";\nimport ScrollView from \"react-native-web/dist/exports/ScrollView\";\nimport Alert from \"react-native-web/dist/exports/Alert\";\nimport { Card, Toast } from 'native-base';\nimport { connect } from 'react-redux';\nimport MedRequestModal from \"./medrequestmodal\";\nimport { bindActionCreators } from 'redux';\nimport { initializeRequests, fillMedRequest } from \"../../../redux/school/actions/index\";\nimport Reloading from \"../../reloading\";\nimport { formatHourMinute } from \"../../util\";\nimport LoginNumberPad from \"../loginnumberpad\";\n\nvar TeacherMedicineLog = function (_React$Component) {\n  _inherits(TeacherMedicineLog, _React$Component);\n\n  var _super = _createSuper(TeacherMedicineLog);\n\n  function TeacherMedicineLog(props) {\n    var _this;\n\n    _classCallCheck(this, TeacherMedicineLog);\n\n    _this = _super.call(this, props);\n    _this.state = {\n      isLoading: true,\n      refreshing: false,\n      selected_request_id: '',\n      showLoginNumberPad: false\n    };\n    _this.handleShowRequest = _this.handleShowRequest.bind(_assertThisInitialized(_this));\n    _this.handleFulfillRequest = _this.handleFulfillRequest.bind(_assertThisInitialized(_this));\n    return _this;\n  }\n\n  _createClass(TeacherMedicineLog, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var request_id = this.props.route.params.request_id;\n\n      if (request_id === null) {\n        this.setState({\n          isLoading: false\n        });\n        return;\n      }\n\n      this.handleShowRequest(request_id);\n    }\n  }, {\n    key: \"handleShowRequest\",\n    value: function handleShowRequest(request_id) {\n      this.setState({\n        selected_request_id: request_id,\n        isLoading: false\n      });\n    }\n  }, {\n    key: \"handleEnterPasscode\",\n    value: function handleEnterPasscode(passcode) {\n      var teacher_id = this.props.class.passcodeTeacherId[passcode];\n\n      if (teacher_id === undefined) {\n        Alert.alert('Wrong password', 'Please try again', [{\n          text: 'OK'\n        }]);\n      } else {\n        this.setState({\n          showLoginNumberPad: false\n        });\n        this.handleFulfillRequest(teacher_id);\n      }\n    }\n  }, {\n    key: \"hideLoginPad\",\n    value: function hideLoginPad() {\n      this.setState({\n        showLoginNumberPad: false\n      });\n    }\n  }, {\n    key: \"handleFulfillRequest\",\n    value: function handleFulfillRequest(teacher_id) {\n      var _this2 = this;\n\n      var selected_request_id = this.state.selected_request_id;\n      var student_id = this.props.requests.requests[selected_request_id].student_id;\n      var isConnected = this.props.class.isConnected;\n\n      if (!isConnected) {\n        Toast.show({\n          text: '拍謝 網路連不到! 等一下再試試看',\n          buttonText: 'Okay',\n          position: \"top\",\n          type: \"warning\",\n          duration: 2000\n        });\n        return;\n      }\n\n      fetch('https://iejnoswtqj.execute-api.us-east-1.amazonaws.com/dev/medicationrequest', {\n        method: 'PUT',\n        headers: {\n          Accept: 'application/json',\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          request_id: selected_request_id,\n          teacher_id: teacher_id,\n          student_id: student_id\n        })\n      }).then(function (res) {\n        return res.json();\n      }).then(function (resJson) {\n        var statusCode = resJson.statusCode,\n            message = resJson.message,\n            data = resJson.data;\n\n        if (statusCode > 200 || message === 'Internal server error') {\n          Alert.alert('Error, please try again', message, [{\n            text: 'OK'\n          }]);\n          return;\n        }\n\n        _this2.props.fillMedRequest(selected_request_id);\n\n        _this2.props.navigation.goBack();\n      }).catch(function (err) {\n        Alert.alert('Error, please try again', err.message, [{\n          text: 'OK'\n        }]);\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this3 = this;\n\n      var _this$state = this.state,\n          selected_request_id = _this$state.selected_request_id,\n          isLoading = _this$state.isLoading,\n          showLoginNumberPad = _this$state.showLoginNumberPad;\n\n      if (isLoading) {\n        return React.createElement(Reloading, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 118,\n            columnNumber: 17\n          }\n        });\n      }\n\n      var requests = this.props.requests.requests;\n      var students = this.props.class.students;\n      var current_request = requests[selected_request_id];\n      return React.createElement(View, {\n        style: {\n          flex: 1\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 127,\n          columnNumber: 13\n        }\n      }, showLoginNumberPad ? React.createElement(LoginNumberPad, {\n        handleEnterPasscode: function handleEnterPasscode(passcode) {\n          return _this3.handleEnterPasscode(passcode);\n        },\n        hideLoginPad: this.hideLoginPad,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 129,\n          columnNumber: 21\n        }\n      }) : null, React.createElement(ScrollView, {\n        contentContainerStyle: {\n          flex: 1,\n          padding: 10\n        },\n        refreshControl: React.createElement(RefreshControl, {\n          style: {\n            backgroundColor: '#E0FFFF'\n          },\n          refreshing: this.state.refreshing,\n          onRefresh: this.fetchFromDB,\n          tintColor: \"#ff0000\",\n          title: \"Loading...\",\n          titleColor: \"#00ff00\",\n          colors: ['#ff0000', '#00ff00', '#0000ff'],\n          progressBackgroundColor: \"#ffff00\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 137,\n            columnNumber: 25\n          }\n        }),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 134,\n          columnNumber: 17\n        }\n      }, React.createElement(View, {\n        style: {\n          flex: 3\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 149,\n          columnNumber: 21\n        }\n      }, selected_request_id === '' ? null : React.createElement(MedRequestModal, {\n        thumbnail: students[current_request.student_id].profile_picture,\n        student_name: students[current_request.student_id].name,\n        request: current_request,\n        showLoginNumberPad: function showLoginNumberPad() {\n          return _this3.setState({\n            showLoginNumberPad: true\n          });\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 153,\n          columnNumber: 29\n        }\n      })), React.createElement(View, {\n        style: {\n          flex: 1\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 161,\n          columnNumber: 21\n        }\n      }, React.createElement(ScrollView, {\n        horizontal: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 162,\n          columnNumber: 25\n        }\n      }, Object.keys(requests).map(function (request_id) {\n        var student_id = requests[request_id].student_id;\n        var _requests$request_id = requests[request_id],\n            timestamp = _requests$request_id.timestamp,\n            administered = _requests$request_id.administered;\n        var time = formatHourMinute(new Date(timestamp));\n        return React.createElement(TouchableHighlight, {\n          key: request_id,\n          style: styles.cardContainer,\n          underlayColor: \"transparent\",\n          onPress: function onPress() {\n            return _this3.handleShowRequest(request_id);\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 168,\n            columnNumber: 37\n          }\n        }, React.createElement(Card, {\n          style: {\n            flex: 1,\n            backgroundColor: administered ? '#dcf3d0' : '#ffe1d0'\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 174,\n            columnNumber: 41\n          }\n        }, React.createElement(View, {\n          style: {\n            flex: 1,\n            justifyContent: 'center'\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 180,\n            columnNumber: 45\n          }\n        }, React.createElement(Text, {\n          style: {\n            fontSize: 25,\n            textAlign: 'center'\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 183,\n            columnNumber: 49\n          }\n        }, time)), React.createElement(View, {\n          style: {\n            flex: 2,\n            justifyContent: 'center',\n            alignItems: 'center'\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 185,\n            columnNumber: 45\n          }\n        }, React.createElement(Image, {\n          source: _this3.props.class.students[student_id].profile_picture === '' ? require(\"../../../assets/icon-thumbnail.png\") : {\n            uri: students[student_id].profile_picture\n          },\n          style: styles.thumbnailImage,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 186,\n            columnNumber: 49\n          }\n        })), React.createElement(View, {\n          style: {\n            flex: 1,\n            justifyContent: 'center'\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 194,\n            columnNumber: 45\n          }\n        }, React.createElement(Text, {\n          style: {\n            fontSize: 25,\n            textAlign: 'center'\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 197,\n            columnNumber: 49\n          }\n        }, students[student_id].name))));\n      })))));\n    }\n  }]);\n\n  return TeacherMedicineLog;\n}(React.Component);\n\nvar styles = StyleSheet.create({\n  cardContainer: {\n    width: 170,\n    paddingRight: 5\n  },\n  thumbnailImage: {\n    height: 110,\n    width: 110,\n    borderRadius: 55\n  }\n});\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return {\n    class: state.classInfo,\n    requests: state.medicationrequests\n  };\n};\n\nvar mapDispatchToProps = function mapDispatchToProps(dispatch) {\n  return _objectSpread({}, bindActionCreators({\n    initializeRequests: initializeRequests,\n    fillMedRequest: fillMedRequest\n  }, dispatch));\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(TeacherMedicineLog);","map":{"version":3,"sources":["/home/caleb_lee/gina_web_app/components/teacher/logs/medicinelog.js"],"names":["React","Card","Toast","connect","MedRequestModal","bindActionCreators","initializeRequests","fillMedRequest","Reloading","formatHourMinute","LoginNumberPad","TeacherMedicineLog","props","state","isLoading","refreshing","selected_request_id","showLoginNumberPad","handleShowRequest","bind","handleFulfillRequest","request_id","route","params","setState","passcode","teacher_id","class","passcodeTeacherId","undefined","Alert","alert","text","student_id","requests","isConnected","show","buttonText","position","type","duration","fetch","method","headers","Accept","body","JSON","stringify","then","res","json","resJson","statusCode","message","data","navigation","goBack","catch","err","students","current_request","flex","handleEnterPasscode","hideLoginPad","padding","backgroundColor","fetchFromDB","profile_picture","name","Object","keys","map","timestamp","administered","time","Date","styles","cardContainer","justifyContent","fontSize","textAlign","alignItems","require","uri","thumbnailImage","Component","StyleSheet","create","width","paddingRight","height","borderRadius","mapStateToProps","classInfo","medicationrequests","mapDispatchToProps","dispatch"],"mappings":"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","sourcesContent":["import React from 'react'\nimport { View, Text, RefreshControl, StyleSheet, Image, TouchableHighlight, ScrollView, Alert } from 'react-native'\nimport { Card, Toast } from 'native-base'\nimport { connect } from 'react-redux'\nimport MedRequestModal from './medrequestmodal'\nimport { bindActionCreators } from 'redux';\nimport { initializeRequests, fillMedRequest } from '../../../redux/school/actions/index' \nimport Reloading from '../../reloading'\nimport { formatHourMinute } from '../../util'\nimport LoginNumberPad from '../loginnumberpad'\n\nclass TeacherMedicineLog extends React.Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            isLoading: true,\n            refreshing: false,\n            selected_request_id: '',\n            showLoginNumberPad: false\n        }\n        this.handleShowRequest = this.handleShowRequest.bind(this)\n        this.handleFulfillRequest = this.handleFulfillRequest.bind(this)\n    }\n\n    componentDidMount() {\n        // if not loaded, we fetch else do nothing(teacher can fetch new requests by refreshing page)\n        const { request_id } = this.props.route.params\n        if (request_id === null) {\n            this.setState({\n                isLoading: false\n            })\n            return\n        }\n        this.handleShowRequest(request_id)\n    }\n\n    handleShowRequest(request_id) {\n        this.setState({\n            selected_request_id: request_id,\n            isLoading: false\n        })\n    }\n\n    handleEnterPasscode(passcode) {\n        const teacher_id = this.props.class.passcodeTeacherId[passcode]\n        if (teacher_id === undefined) {\n            Alert.alert(\n                'Wrong password',\n                'Please try again',\n                [{text: 'OK'}]\n            )\n        } else {\n            this.setState({ showLoginNumberPad: false })\n            this.handleFulfillRequest(teacher_id)\n        }\n    }\n    \n    hideLoginPad() {\n        this.setState({\n            showLoginNumberPad: false\n        })\n    }\n\n    handleFulfillRequest(teacher_id) {\n        const { selected_request_id } = this.state\n        // console.log(this.props.requests)\n        const { student_id } = this.props.requests.requests[selected_request_id]\n        const { isConnected } = this.props.class\n        if (!isConnected) {\n            Toast.show({\n                text: '拍謝 網路連不到! 等一下再試試看',\n                buttonText: 'Okay',\n                position: \"top\",\n                type: \"warning\",\n                duration: 2000\n            })\n            return\n        }\n        fetch('https://iejnoswtqj.execute-api.us-east-1.amazonaws.com/dev/medicationrequest', {\n            method: 'PUT',\n            headers: {\n                Accept: 'application/json',\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify({\n                request_id: selected_request_id,\n                teacher_id,\n                student_id\n            })\n        })\n            .then(res => res.json())\n            .then(resJson => {\n                const { statusCode, message, data } = resJson\n                if (statusCode > 200 || message === 'Internal server error') {\n                    Alert.alert(\n                        'Error, please try again',\n                        message,\n                        [{text: 'OK'}]\n                    )\n                    return\n                }\n                this.props.fillMedRequest(selected_request_id)\n                this.props.navigation.goBack()\n            })\n            .catch(err => {\n                Alert.alert(\n                    'Error, please try again',\n                    err.message,\n                    [{text: 'OK'}]\n                )\n            })\n    }\n\n    render() {\n        const { selected_request_id, isLoading, showLoginNumberPad } = this.state\n        if (isLoading) {\n            return (\n                <Reloading />\n            )\n        }\n        const { requests } = this.props.requests\n        const { students } = this.props.class\n        const current_request = requests[selected_request_id]\n        // console.log('current_request: ', current_request)\n        // const { administered, fever_entry, medication, note, student_id, teacher_id, timestamp } = current_request\n        return (\n            <View style={{ flex: 1 }}>\n                {showLoginNumberPad ? \n                    <LoginNumberPad\n                        handleEnterPasscode={(passcode) => this.handleEnterPasscode(passcode)}\n                        hideLoginPad={this.hideLoginPad}\n                    /> : null\n                }\n                <ScrollView\n                    contentContainerStyle={{ flex: 1, padding: 10 }}\n                    refreshControl={\n                        <RefreshControl\n                            style={{backgroundColor: '#E0FFFF'}}\n                            refreshing={this.state.refreshing}\n                            onRefresh={this.fetchFromDB}\n                            tintColor=\"#ff0000\"\n                            title=\"Loading...\"\n                            titleColor=\"#00ff00\"\n                            colors={['#ff0000', '#00ff00', '#0000ff']}\n                            progressBackgroundColor=\"#ffff00\"\n                        />\n                    }\n                >\n                    <View style={{ flex: 3 }}>\n                        {selected_request_id === '' ?\n                            null\n                        :   \n                            <MedRequestModal\n                                thumbnail={students[current_request.student_id].profile_picture}\n                                student_name={students[current_request.student_id].name}\n                                request={current_request}\n                                showLoginNumberPad={() => this.setState({ showLoginNumberPad: true })}\n                            />\n                        }\n                    </View>\n                    <View style={{ flex: 1 }}>\n                        <ScrollView horizontal={true}>\n                            {Object.keys(requests).map((request_id) => {\n                                const { student_id } = requests[request_id]\n                                const { timestamp, administered } = requests[request_id]\n                                const time = formatHourMinute(new Date(timestamp))\n                                return (\n                                    <TouchableHighlight\n                                        key={request_id}\n                                        style={styles.cardContainer}\n                                        underlayColor='transparent'\n                                        onPress={() => this.handleShowRequest(request_id)}\n                                    >\n                                        <Card \n                                            style={{ \n                                                flex: 1,\n                                                backgroundColor: administered ? '#dcf3d0' : '#ffe1d0'\n                                            }}\n                                        >\n                                            <View\n                                                style={{ flex: 1, justifyContent: 'center' }}\n                                            >\n                                                <Text style={{ fontSize: 25, textAlign: 'center' }}>{time}</Text>\n                                            </View>\n                                            <View style={{ flex: 2, justifyContent: 'center', alignItems: 'center' }}>\n                                                <Image\n                                                    source={\n                                                        this.props.class.students[student_id].profile_picture === '' ?\n                                                            require('../../../assets/icon-thumbnail.png')\n                                                        : { uri: students[student_id].profile_picture }}\n                                                    style={styles.thumbnailImage}\n                                                />\n                                            </View>\n                                            <View\n                                                style={{ flex: 1, justifyContent: 'center' }}\n                                            >\n                                                <Text style={{ fontSize: 25, textAlign: 'center' }}>{students[student_id].name}</Text>\n                                            </View>\n                                        </Card>\n                                    </TouchableHighlight>\n                                )\n                            })}\n                        </ScrollView>\n                    </View>\n                </ScrollView>\n            </View>\n        )\n    }\n}\n\nconst styles = StyleSheet.create({\n    cardContainer: {\n        width: 170,\n        // backgroundColor: 'transparent',\n        paddingRight: 5\n    },\n    thumbnailImage: {\n        height: 110,\n        width: 110,\n        borderRadius: 55\n    }\n})\n\nconst mapStateToProps = (state) => {\n    return {\n        class: state.classInfo,\n        requests: state.medicationrequests\n    }\n}\n\nconst mapDispatchToProps = (dispatch) => {\n    return {\n        ...bindActionCreators({ initializeRequests, fillMedRequest }, dispatch)\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps) (TeacherMedicineLog)"]},"metadata":{},"sourceType":"module"}