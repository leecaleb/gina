{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _readOnlyError from \"@babel/runtime/helpers/readOnlyError\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport ENV from \"../variables\";\nexport var formatDate = function formatDate(date) {\n  return date.getFullYear() + '-' + ('0' + (date.getMonth() + 1)).slice(-2) + '-' + ('0' + date.getDate()).slice(-2);\n};\nexport var beautifyDate = function beautifyDate(date) {\n  return date.getFullYear() + '/' + ('0' + (date.getMonth() + 1)).slice(-2) + '/' + ('0' + date.getDate()).slice(-2);\n};\nexport var beautifyMonthDate = function beautifyMonthDate(date) {\n  return ('0' + (date.getMonth() + 1)).slice(-2) + '/' + ('0' + date.getDate()).slice(-2);\n};\nexport var formatTime = function formatTime(date) {\n  return date.getHours() + ':' + date.getMinutes() + ':' + date.getSeconds();\n};\nexport var beautifyTime = function beautifyTime(date) {\n  return date.getHours() + ':' + ('0' + date.getMinutes()).slice(-2);\n};\nexport var formatHourMinute = function formatHourMinute(date) {\n  return date.getHours() + ':' + date.getMinutes();\n};\nexport var get = function get(endpoint) {\n  var success, result;\n  return _regeneratorRuntime.async(function get$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          success = true;\n          _context.next = 3;\n          return _regeneratorRuntime.awrap(fetch(\"https://iejnoswtqj.execute-api.us-east-1.amazonaws.com/\" + ENV + endpoint, {\n            method: 'GET',\n            headers: {\n              Accept: 'application/json',\n              'Content-Type': 'application/json'\n            }\n          }).then(function (res) {\n            return res.json();\n          }).then(function (resJson) {\n            var statusCode = resJson.statusCode,\n                message = resJson.message,\n                data = resJson.data;\n\n            if (statusCode > 200) {\n              success = false;\n            } else if (statusCode === undefined) {\n              return {\n                success: false,\n                statusCode: 500,\n                message: message,\n                data: {}\n              };\n            }\n\n            return {\n              success: success,\n              statusCode: statusCode,\n              message: message,\n              data: data\n            };\n          }).catch(function (err) {\n            return {\n              success: false,\n              statusCode: 500,\n              message: err.message,\n              data: {}\n            };\n          }));\n\n        case 3:\n          result = _context.sent;\n          return _context.abrupt(\"return\", result);\n\n        case 5:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, null, Promise);\n};\nexport var post = function post(endpoint, body) {\n  var success, result;\n  return _regeneratorRuntime.async(function post$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          success = true;\n          _context2.next = 3;\n          return _regeneratorRuntime.awrap(fetch(\"https://iejnoswtqj.execute-api.us-east-1.amazonaws.com/\" + ENV + endpoint, {\n            method: 'POST',\n            headers: {\n              Accept: 'application/json',\n              'Content-Type': 'application/json'\n            },\n            body: JSON.stringify(body)\n          }).then(function (res) {\n            return res.json();\n          }).then(function (resJson) {\n            var statusCode = resJson.statusCode,\n                message = resJson.message,\n                data = resJson.data;\n\n            if (statusCode > 200) {\n              success = false;\n            } else if (statusCode === undefined) {\n              return {\n                success: false,\n                statusCode: 500,\n                message: message,\n                data: {}\n              };\n            }\n\n            return {\n              success: success,\n              statusCode: statusCode,\n              message: message,\n              data: data\n            };\n          }).catch(function (err) {\n            return {\n              success: false,\n              statusCode: 500,\n              message: err.message,\n              data: {}\n            };\n          }));\n\n        case 3:\n          result = _context2.sent;\n          return _context2.abrupt(\"return\", result);\n\n        case 5:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, null, null, null, Promise);\n};\nexport var put = function put(endpoint, body) {\n  var success, result;\n  return _regeneratorRuntime.async(function put$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          success = true;\n          _context3.next = 3;\n          return _regeneratorRuntime.awrap(fetch(\"https://iejnoswtqj.execute-api.us-east-1.amazonaws.com/\" + ENV + endpoint, {\n            method: 'PUT',\n            headers: {\n              Accept: 'application/json',\n              'Content-Type': 'application/json'\n            },\n            body: JSON.stringify(body)\n          }).then(function (res) {\n            return res.json();\n          }).then(function (resJson) {\n            var statusCode = resJson.statusCode,\n                message = resJson.message,\n                data = resJson.data;\n\n            if (statusCode > 200) {\n              success = false;\n            } else if (statusCode === undefined) {\n              return {\n                success: false,\n                statusCode: 500,\n                message: message,\n                data: {}\n              };\n            }\n\n            return {\n              success: success,\n              statusCode: statusCode,\n              message: message,\n              data: data\n            };\n          }).catch(function (err) {\n            return {\n              success: false,\n              statusCode: 500,\n              message: err.message,\n              data: {}\n            };\n          }));\n\n        case 3:\n          result = _context3.sent;\n          return _context3.abrupt(\"return\", result);\n\n        case 5:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, null, null, null, Promise);\n};\nexport var delete_by_id = function delete_by_id(endpoint) {\n  var success, result;\n  return _regeneratorRuntime.async(function delete_by_id$(_context4) {\n    while (1) {\n      switch (_context4.prev = _context4.next) {\n        case 0:\n          success = true;\n          _context4.next = 3;\n          return _regeneratorRuntime.awrap(fetch(\"https://iejnoswtqj.execute-api.us-east-1.amazonaws.com/\" + ENV + endpoint, {\n            method: 'DELETE',\n            headers: {\n              Accept: 'application/json',\n              'Content-Type': 'application/json'\n            }\n          }).then(function (res) {\n            return res.json();\n          }).then(function (resJson) {\n            var statusCode = resJson.statusCode,\n                message = resJson.message,\n                data = resJson.data;\n\n            if (statusCode > 200) {\n              success = false;\n            } else if (statusCode === undefined) {\n              return {\n                success: false,\n                statusCode: 500,\n                message: message,\n                data: {}\n              };\n            }\n\n            return {\n              success: success,\n              statusCode: statusCode,\n              message: message,\n              data: data\n            };\n          }).catch(function (err) {\n            return {\n              success: false,\n              statusCode: 500,\n              message: err.message,\n              data: {}\n            };\n          }));\n\n        case 3:\n          result = _context4.sent;\n          return _context4.abrupt(\"return\", result);\n\n        case 5:\n        case \"end\":\n          return _context4.stop();\n      }\n    }\n  }, null, null, null, Promise);\n};\nexport var fetchData = function fetchData(type, child_id, start_date, end_date) {\n  var query, fetchedData;\n  return _regeneratorRuntime.async(function fetchData$(_context5) {\n    while (1) {\n      switch (_context5.prev = _context5.next) {\n        case 0:\n          query = \"https://iejnoswtqj.execute-api.us-east-1.amazonaws.com/\" + ENV + \"/\" + type + \"/\" + child_id + \"?start_date=\" + start_date + \"&end_date=\" + end_date;\n          _context5.next = 3;\n          return _regeneratorRuntime.awrap(fetch(query, {\n            method: 'GET',\n            headers: {\n              Accept: 'application/json',\n              'Content-Type': 'application/json'\n            }\n          }).then(function (res) {\n            return res.json();\n          }).then(function (resJson) {\n            return resJson;\n          }).catch(function (err) {\n            console.log(err);\n          }));\n\n        case 3:\n          fetchedData = _context5.sent;\n          return _context5.abrupt(\"return\", fetchedData);\n\n        case 5:\n        case \"end\":\n          return _context5.stop();\n      }\n    }\n  }, null, null, null, Promise);\n};\nexport var fetchClassData = function fetchClassData(type, class_id, start_date, end_date) {\n  var query, fetchedData;\n  return _regeneratorRuntime.async(function fetchClassData$(_context6) {\n    while (1) {\n      switch (_context6.prev = _context6.next) {\n        case 0:\n          query = \"https://iejnoswtqj.execute-api.us-east-1.amazonaws.com/\" + ENV + \"/\" + type + \"/class/\" + class_id + \"?start_date=\" + start_date + \"&end_date=\" + end_date;\n          _context6.next = 3;\n          return _regeneratorRuntime.awrap(fetch(query, {\n            method: 'GET',\n            headers: {\n              Accept: 'application/json',\n              'Content-Type': 'application/json'\n            }\n          }).then(function (res) {\n            return res.json();\n          }).then(function (resJson) {\n            return resJson;\n          }).catch(function (err) {\n            console.log(err);\n          }));\n\n        case 3:\n          fetchedData = _context6.sent;\n          return _context6.abrupt(\"return\", fetchedData);\n\n        case 5:\n        case \"end\":\n          return _context6.stop();\n      }\n    }\n  }, null, null, null, Promise);\n};\nexport var fetchMessagesByConversationId = function fetchMessagesByConversationId(conversation_id, sender_id, recipient_id) {\n  var query, messageData;\n  return _regeneratorRuntime.async(function fetchMessagesByConversationId$(_context7) {\n    while (1) {\n      switch (_context7.prev = _context7.next) {\n        case 0:\n          console.log('fetchMessageByConvId/recipient_id', recipient_id);\n          query = \"https://iejnoswtqj.execute-api.us-east-1.amazonaws.com/\" + ENV + \"/message?conversation_id=\" + conversation_id + \"&sender_id=\" + sender_id;\n          _context7.next = 4;\n          return _regeneratorRuntime.awrap(fetch(query, {\n            method: 'GET',\n            headers: {\n              Accept: 'application/json',\n              'Content-Type': 'application/json'\n            }\n          }).then(function (res) {\n            return res.json();\n          }).then(function (resJson) {\n            console.log('fetchMessagesByConversationId/resJson: ', resJson);\n            var _resJson$data = resJson.data,\n                messages = _resJson$data.messages,\n                most_recently_read_message_id = _resJson$data.most_recently_read_message_id;\n\n            if (resJson.statusCode === 200) {\n              markRead(messages, sender_id, recipient_id);\n              return {\n                success: true,\n                data: resJson.data\n              };\n            } else {\n              return {\n                sucess: false,\n                data: resJson\n              };\n            }\n          }).catch(function (err) {\n            console.log('err: ', err);\n            return {\n              success: false,\n              data: err\n            };\n          }));\n\n        case 4:\n          messageData = _context7.sent;\n          return _context7.abrupt(\"return\", messageData);\n\n        case 6:\n        case \"end\":\n          return _context7.stop();\n      }\n    }\n  }, null, null, null, Promise);\n};\n\nvar markRead = function markRead(message_array, sender_id, recipient_id) {\n  var query = \"https://iejnoswtqj.execute-api.us-east-1.amazonaws.com/\" + ENV + \"/message\";\n  var most_recent_message = message_array[0] ? message_array[0] : null;\n\n  if (most_recent_message === null || most_recent_message.sender_id === sender_id || most_recent_message.read_at !== null) {\n    return;\n  }\n\n  fetch(query, {\n    method: 'PUT',\n    headers: {\n      Accept: 'application/json',\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({\n      most_recent_message_id: most_recent_message.message_id,\n      recipient_id: recipient_id\n    })\n  }).then(function (res) {\n    return res.json();\n  }).then(function (resJson) {\n    console.log('markRead/resJson: ', resJson);\n  }).catch(function (err) {\n    return console.log('err: ', err);\n  });\n};\n\nexport var fetchReadReceipt = function fetchReadReceipt(conversation_id, sender_id) {\n  var query, success, message_id;\n  return _regeneratorRuntime.async(function fetchReadReceipt$(_context8) {\n    while (1) {\n      switch (_context8.prev = _context8.next) {\n        case 0:\n          query = \"https://iejnoswtqj.execute-api.us-east-1.amazonaws.com/\" + ENV + \"/message/read-receipt?conversation_id=\" + conversation_id + \"&sender_id=\" + sender_id;\n          success = true;\n          _context8.next = 4;\n          return _regeneratorRuntime.awrap(fetch(query, {\n            method: 'GET',\n            headers: {\n              Accept: 'application/json',\n              'Content-Type': 'application/json'\n            }\n          }).then(function (res) {\n            return res.json();\n          }).then(function (resJson) {\n            console.log('parent/inboxcard/fetchReadReceipt/resJson: ', resJson);\n            return resJson.data;\n          }).catch(function (err) {\n            console.log('err: ', err);\n            success = (_readOnlyError(\"success\"), false);\n            return \"err: \" + err;\n          }));\n\n        case 4:\n          message_id = _context8.sent;\n          return _context8.abrupt(\"return\", {\n            success: success,\n            data: message_id\n          });\n\n        case 6:\n        case \"end\":\n          return _context8.stop();\n      }\n    }\n  }, null, null, null, Promise);\n};\nexport var sendWellnessData = function sendWellnessData(wellness_data, class_id, date) {\n  var record_id_for_update, data_objs, request_body, query, fetchResult;\n  return _regeneratorRuntime.async(function sendWellnessData$(_context9) {\n    while (1) {\n      switch (_context9.prev = _context9.next) {\n        case 0:\n          record_id_for_update = wellness_data.record_id_for_update;\n          data_objs = [];\n\n          if (!(record_id_for_update.size === 0)) {\n            _context9.next = 4;\n            break;\n          }\n\n          return _context9.abrupt(\"return\", {\n            success: true,\n            data: []\n          });\n\n        case 4:\n          record_id_for_update.forEach(function (record_id) {\n            data_objs.push(_objectSpread({\n              record_id: record_id\n            }, wellness_data.records[record_id]));\n          });\n          normalize(data_objs);\n          request_body = {\n            date: date,\n            class_id: class_id,\n            data_objs: data_objs\n          };\n          query = \"https://iejnoswtqj.execute-api.us-east-1.amazonaws.com/\" + ENV + \"/wellness/\";\n          _context9.next = 10;\n          return _regeneratorRuntime.awrap(fetch(query, {\n            method: 'POST',\n            headers: {\n              Accept: 'application/json',\n              'Content-Type': 'application/json'\n            },\n            body: JSON.stringify(request_body)\n          }).then(function (res) {\n            return res.json();\n          }).then(function (resJson) {\n            var statusCode = resJson.statusCode,\n                message = resJson.message,\n                data = resJson.data;\n\n            if (statusCode > 200 || statusCode === undefined) {\n              return {\n                success: false,\n                statusCode: statusCode,\n                message: message\n              };\n            }\n\n            return {\n              success: true,\n              statusCode: statusCode,\n              message: message,\n              data: data\n            };\n          }).catch(function (err) {\n            return {\n              success: false,\n              message: err\n            };\n          }));\n\n        case 10:\n          fetchResult = _context9.sent;\n          return _context9.abrupt(\"return\", fetchResult);\n\n        case 12:\n        case \"end\":\n          return _context9.stop();\n      }\n    }\n  }, null, null, null, Promise);\n};\n\nfunction normalize(data_objs) {\n  for (var i = 0; i < data_objs.length; i++) {\n    data_objs[i].time = formatTime(data_objs[i].time);\n  }\n}","map":{"version":3,"sources":["/home/caleb_lee/gina_web_app/components/util.js"],"names":["ENV","formatDate","date","getFullYear","getMonth","slice","getDate","beautifyDate","beautifyMonthDate","formatTime","getHours","getMinutes","getSeconds","beautifyTime","formatHourMinute","get","endpoint","success","fetch","method","headers","Accept","then","res","json","resJson","statusCode","message","data","undefined","catch","err","result","post","body","JSON","stringify","put","delete_by_id","fetchData","type","child_id","start_date","end_date","query","console","log","fetchedData","fetchClassData","class_id","fetchMessagesByConversationId","conversation_id","sender_id","recipient_id","messages","most_recently_read_message_id","markRead","sucess","messageData","message_array","most_recent_message","read_at","most_recent_message_id","message_id","fetchReadReceipt","sendWellnessData","wellness_data","record_id_for_update","data_objs","size","forEach","record_id","push","records","normalize","request_body","fetchResult","i","length","time"],"mappings":"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","sourcesContent":["// import { connect } from \"react-redux\"\nimport ENV from '../variables'\n\nexport const formatDate = (date) => {\n    return date.getFullYear() + '-' + ('0' + (date.getMonth()+ 1)).slice(-2) + '-' + ('0' + date.getDate()).slice(-2)\n}\n\nexport const beautifyDate = (date) => {\n    return date.getFullYear() + '/' + ('0' + (date.getMonth()+ 1)).slice(-2) + '/' + ('0' + date.getDate()).slice(-2)\n}\n\nexport const beautifyMonthDate = (date) => {\n    return ('0' + (date.getMonth()+ 1)).slice(-2) + '/' + ('0' + date.getDate()).slice(-2)\n}\n\nexport const formatTime = (date) => {\n    return date.getHours() + ':' + date.getMinutes() + ':' + date.getSeconds()\n}\n\nexport const beautifyTime = (date) => {\n    return date.getHours() + ':' + ('0' + date.getMinutes()).slice(-2)\n}\n\nexport const formatHourMinute = (date) => {\n    return date.getHours() + ':' + date.getMinutes()\n}\n\nexport const get = async (endpoint) => {\n    var success = true\n    const result = await fetch(`https://iejnoswtqj.execute-api.us-east-1.amazonaws.com/${ENV}${endpoint}`, {\n            method: 'GET',\n            headers: {\n                Accept: 'application/json',\n                'Content-Type': 'application/json'\n            },\n        })\n            .then(res => res.json())\n            .then(resJson => {\n                // console.log(resJson)\n                const { statusCode, message, data } = resJson\n                if (statusCode > 200) {\n                    success = false\n                } else if (statusCode === undefined) {\n                    return {\n                        success: false,\n                        statusCode: 500,\n                        message,\n                        data: {}\n                    }\n                }\n\n                return {\n                    success,\n                    statusCode,\n                    message,\n                    data\n                }\n            }).catch(err => {\n                return {\n                    success: false,\n                    statusCode: 500,\n                    message: err.message,\n                    data: {}\n                }\n            })\n\n    return result\n}\n\nexport const post = async (endpoint, body) => {\n    var success = true\n    const result = await fetch(`https://iejnoswtqj.execute-api.us-east-1.amazonaws.com/${ENV}${endpoint}`, {\n            method: 'POST',\n            headers: {\n                Accept: 'application/json',\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify(body)\n        })\n            .then(res => res.json())\n            .then(resJson => {\n                const { statusCode, message, data } = resJson\n                if (statusCode > 200) {\n                    success = false\n                } else if (statusCode === undefined) {\n                    return {\n                        success: false,\n                        statusCode: 500,\n                        message,\n                        data: {}\n                    }\n                }\n\n                return {\n                    success,\n                    statusCode,\n                    message,\n                    data\n                }\n            }).catch(err => {\n                return {\n                    success: false,\n                    statusCode: 500,\n                    message: err.message,\n                    data: {}\n                }\n            })\n\n    return result\n}\n\nexport const put = async (endpoint, body) => {\n    var success = true\n    const result = await fetch(`https://iejnoswtqj.execute-api.us-east-1.amazonaws.com/${ENV}${endpoint}`, {\n            method: 'PUT',\n            headers: {\n                Accept: 'application/json',\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify(body)\n        })\n            .then(res => res.json())\n            .then(resJson => {\n                const { statusCode, message, data } = resJson\n                if (statusCode > 200) {\n                    success = false\n                } else if (statusCode === undefined) {\n                    return {\n                        success: false,\n                        statusCode: 500,\n                        message,\n                        data: {}\n                    }\n                }\n\n                return {\n                    success,\n                    statusCode,\n                    message,\n                    data\n                }\n            }).catch(err => {\n                return {\n                    success: false,\n                    statusCode: 500,\n                    message: err.message,\n                    data: {}\n                }\n            })\n\n    return result\n}\n\nexport const delete_by_id = async (endpoint) => {\n    var success = true\n    const result = await fetch(`https://iejnoswtqj.execute-api.us-east-1.amazonaws.com/${ENV}${endpoint}`, {\n            method: 'DELETE',\n            headers: {\n                Accept: 'application/json',\n                'Content-Type': 'application/json'\n            }\n        })\n            .then(res => res.json())\n            .then(resJson => {\n                const { statusCode, message, data } = resJson\n                if (statusCode > 200) {\n                    success = false\n                } else if (statusCode === undefined) {\n                    return {\n                        success: false,\n                        statusCode: 500,\n                        message,\n                        data: {}\n                    }\n                }\n\n                return {\n                    success,\n                    statusCode,\n                    message,\n                    data\n                }\n            }).catch(err => {\n                return {\n                    success: false,\n                    statusCode: 500,\n                    message: err.message,\n                    data: {}\n                }\n            })\n\n    return result\n}\n\nexport const fetchData = async (type, child_id, start_date, end_date) => {\n    // const date = formatDate(new Date());\n    const query = `https://iejnoswtqj.execute-api.us-east-1.amazonaws.com/${ENV}/${type}/${child_id}?start_date=${start_date}&end_date=${end_date}`\n\n    const fetchedData = await fetch(query, {\n        method: 'GET',\n        headers: {\n            Accept: 'application/json',\n            'Content-Type': 'application/json'\n        }\n    })\n        .then(res => res.json())\n        .then(resJson => {\n            return resJson\n        })\n        .catch(err => {\n            console.log(err)\n        })\n    // console.log(`${type} util/fetchData/fetchedData: `, fetchedData)\n    return fetchedData\n}\n\nexport const fetchClassData = async (type, class_id, start_date, end_date) => {\n    const query = `https://iejnoswtqj.execute-api.us-east-1.amazonaws.com/${ENV}/${type}/class/${class_id}?start_date=${start_date}&end_date=${end_date}`\n    const fetchedData = await fetch(query, {\n        method: 'GET',\n        headers: {\n            Accept: 'application/json',\n            'Content-Type': 'application/json'\n        }\n    })\n        .then(res => res.json())\n        .then(resJson => {\n            // console.log('fetchClassData/resJson: /', resJson)\n            return resJson\n        })\n        .catch(err => {\n            console.log(err)\n        })\n    return fetchedData\n}\n\nexport const fetchMessagesByConversationId = async (conversation_id, sender_id, recipient_id) => {\n    console.log('fetchMessageByConvId/recipient_id', recipient_id)\n    const query = `https://iejnoswtqj.execute-api.us-east-1.amazonaws.com/${ENV}/message?conversation_id=${conversation_id}&sender_id=${sender_id}`\n    const messageData = await fetch(query, {\n        method: 'GET',\n        headers: {\n            Accept: 'application/json',\n            'Content-Type': 'application/json'\n        }\n    })\n        .then(res => res.json())\n        .then(resJson => {\n            console.log('fetchMessagesByConversationId/resJson: ', resJson)\n            const { messages, most_recently_read_message_id } = resJson.data\n            if (resJson.statusCode === 200) {\n                markRead(messages, sender_id, recipient_id)\n                return {\n                    success: true,\n                    data: resJson.data\n                }\n            } else {\n                return {\n                    sucess: false,\n                    data: resJson\n                }\n            }\n        })\n        .catch(err => {\n            console.log('err: ', err)\n            return {\n                success: false,\n                data: err\n            }\n        })\n    return messageData\n}\n\nconst markRead = (message_array, sender_id, recipient_id) => {\n    // console.log('message_array: ', message_array)\n    // const { sender_id, recipient_id } = this.state\n    const query = `https://iejnoswtqj.execute-api.us-east-1.amazonaws.com/${ENV}/message`\n\n    const most_recent_message = message_array[0] ? message_array[0] : null\n    if (most_recent_message === null || most_recent_message.sender_id === sender_id || most_recent_message.read_at !== null) {\n        return\n    }\n\n    fetch(query, {\n        method: 'PUT',\n        headers: {\n            Accept: 'application/json',\n            'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n            most_recent_message_id: most_recent_message.message_id,\n            recipient_id\n        })\n    })\n        .then(res => res.json())\n        .then(resJson => {\n            console.log('markRead/resJson: ', resJson)\n        })\n        .catch(err => console.log('err: ', err))\n}\n\nexport const fetchReadReceipt = async (conversation_id,  sender_id) => {\n    // const { conversation_id } = this.state.messageData\n    // const sender_id = this.props.child_id\n    const query = `https://iejnoswtqj.execute-api.us-east-1.amazonaws.com/${ENV}/message/read-receipt?conversation_id=${conversation_id}&sender_id=${sender_id}`\n    const success = true\n    const message_id = await fetch(query, {\n        method: 'GET',\n        headers: {\n            Accept: 'application/json',\n            'Content-Type': 'application/json'\n        }\n    })\n        .then(res => res.json())\n        .then(resJson => {\n            console.log('parent/inboxcard/fetchReadReceipt/resJson: ', resJson)\n            return resJson.data\n        })\n        .catch(err => {\n            console.log('err: ', err)\n            success = false\n            return `err: ${err}`\n        })\n    return {\n        success,\n        data: message_id\n    }\n}\n\nexport const sendWellnessData = async (wellness_data, class_id, date) => {\n    const { record_id_for_update} = wellness_data\n    var data_objs = []\n\n    if (record_id_for_update.size === 0) {\n        return {\n            success: true,\n            data: []\n        }\n    }\n\n    record_id_for_update.forEach((record_id) => {\n        data_objs.push({\n            record_id,\n            ...wellness_data.records[record_id]\n        })\n    })\n    normalize(data_objs)\n\n    var request_body = {\n        date,\n        class_id,\n        data_objs\n    }\n\n    const query = `https://iejnoswtqj.execute-api.us-east-1.amazonaws.com/${ENV}/wellness/`\n    \n    const fetchResult = await fetch(query, {\n        method: 'POST',\n        headers: {\n            Accept: 'application/json',\n            'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(request_body)\n    })\n        .then((res) => res.json())\n        .then((resJson) => {\n            const { statusCode, message, data } = resJson\n            if (statusCode > 200 || statusCode === undefined) {\n                return {\n                    success: false,\n                    statusCode,\n                    message\n                }\n            }\n            return {\n                success: true,\n                statusCode,\n                message,\n                data\n            }\n        })\n        .catch(err => {\n            return {\n                success: false,\n                message: err\n            }\n        })\n    return fetchResult\n}\n\nfunction normalize(data_objs) {\n    for (var i = 0; i < data_objs.length; i++) {\n        data_objs[i].time = formatTime(data_objs[i].time)\n    }\n}"]},"metadata":{},"sourceType":"module"}