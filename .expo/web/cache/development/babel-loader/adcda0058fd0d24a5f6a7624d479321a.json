{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nvar initial_state = {\n  message_by_student_id: {},\n  student_id_for_update: new Set()\n};\nexport default function message() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initial_state;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case 'INITIALIZE_CLASS':\n      {\n        var message_by_student_id = {};\n        action.students.forEach(function (student) {\n          var id = student.id;\n          message_by_student_id[id] = {\n            text: '',\n            things_to_bring: [0, 0, 0, 0, 0],\n            other_item: '其它',\n            activities: [0, 0, 0, 0, 0, 0, 0, 0, 0],\n            other_activity: '其它',\n            teacher_id: ''\n          };\n        });\n        return _objectSpread(_objectSpread({}, state), {}, {\n          message_by_student_id: message_by_student_id\n        });\n      }\n\n    case 'FETCH_CLASS_MESSAGE_DATA':\n      {\n        var message_data = action.message_data;\n        return _objectSpread(_objectSpread({}, state), {}, {\n          message_by_student_id: _objectSpread(_objectSpread({}, state.message_by_student_id), message_data)\n        });\n      }\n\n    case 'WRITE_TO_ALL':\n      {\n        var text = action.text,\n            teacher_id = action.teacher_id;\n\n        var _message_by_student_id = _objectSpread({}, state.message_by_student_id);\n\n        Object.keys(_message_by_student_id).forEach(function (student_id) {\n          _message_by_student_id[student_id].text = text;\n          _message_by_student_id[student_id].teacher_id = teacher_id;\n        });\n        return _objectSpread(_objectSpread(_objectSpread({}, state), _message_by_student_id), {}, {\n          student_id_for_update: new Set(Object.keys(_message_by_student_id))\n        });\n      }\n\n    case 'WRITE_TO_ONE':\n      {\n        var _text = action.text,\n            student_id = action.student_id,\n            _teacher_id = action.teacher_id;\n        var student_id_for_update = new Set([].concat(_toConsumableArray(state.student_id_for_update), [student_id]));\n        return _objectSpread(_objectSpread({}, state), {}, {\n          message_by_student_id: _objectSpread(_objectSpread({}, state.message_by_student_id), {}, _defineProperty({}, student_id, _objectSpread(_objectSpread({}, state.message_by_student_id[student_id]), {}, {\n            text: _text,\n            teacher_id: _teacher_id\n          }))),\n          student_id_for_update: student_id_for_update\n        });\n      }\n\n    case 'REMIND_ITEMS_TO_BRING_TO_ALL':\n      {\n        var items_to_bring_bool = action.items_to_bring_bool,\n            _teacher_id2 = action.teacher_id;\n\n        var _message_by_student_id2 = _objectSpread({}, state.message_by_student_id);\n\n        Object.keys(_message_by_student_id2).forEach(function (student_id) {\n          _message_by_student_id2[student_id].things_to_bring = items_to_bring_bool;\n          _message_by_student_id2[student_id].teacher_id = _teacher_id2;\n        });\n        return _objectSpread(_objectSpread({}, state), {}, {\n          message_by_student_id: _message_by_student_id2,\n          student_id_for_update: new Set(Object.keys(_message_by_student_id2))\n        });\n      }\n\n    case 'REMIND_ITEMS_TO_BRING_TO_ONE':\n      {\n        var _student_id = action.student_id,\n            things_to_bring = action.things_to_bring,\n            _teacher_id3 = action.teacher_id;\n\n        var _message_by_student_id3 = _objectSpread({}, state.message_by_student_id);\n\n        _message_by_student_id3[_student_id].things_to_bring = things_to_bring;\n        _message_by_student_id3[_student_id].teacher_id = _teacher_id3;\n        return _objectSpread(_objectSpread({}, state), {}, {\n          message_by_student_id: _message_by_student_id3,\n          student_id_for_update: new Set([].concat(_toConsumableArray(state.student_id_for_update), [_student_id]))\n        });\n      }\n\n    case 'WRITE_ITEM_TO_BRING_TO_ALL':\n      {\n        var item_to_bring = action.item_to_bring,\n            _teacher_id4 = action.teacher_id;\n\n        var _message_by_student_id4 = _objectSpread({}, state.message_by_student_id);\n\n        Object.keys(_message_by_student_id4).forEach(function (student_id) {\n          _message_by_student_id4[student_id].other_item = item_to_bring === '' ? '其它' : item_to_bring;\n          _message_by_student_id4[student_id].teacher_id = _teacher_id4;\n        });\n        return _objectSpread(_objectSpread({}, state), {}, {\n          message_by_student_id: _message_by_student_id4,\n          student_id_for_update: new Set(Object.keys(_message_by_student_id4))\n        });\n      }\n\n    case 'WRITE_ITEM_TO_BRING_TO_ONE':\n      {\n        var _student_id2 = action.student_id,\n            _item_to_bring = action.item_to_bring,\n            _teacher_id5 = action.teacher_id;\n        return _objectSpread(_objectSpread({}, state), {}, {\n          message_by_student_id: _objectSpread(_objectSpread({}, state.message_by_student_id), {}, _defineProperty({}, _student_id2, _objectSpread(_objectSpread({}, state.message_by_student_id[_student_id2]), {}, {\n            other_item: _item_to_bring,\n            teacher_id: _teacher_id5\n          }))),\n          student_id_for_update: new Set([].concat(_toConsumableArray(state.student_id_for_update), [_student_id2]))\n        });\n      }\n\n    case 'RECORD_ACTIVITIES_FOR_ALL':\n      {\n        var new_acitivities_bool = action.new_acitivities_bool,\n            _teacher_id6 = action.teacher_id;\n\n        var _message_by_student_id5 = _objectSpread({}, state.message_by_student_id);\n\n        Object.keys(_message_by_student_id5).forEach(function (student_id) {\n          _message_by_student_id5[student_id].activities = new_acitivities_bool;\n          _message_by_student_id5[student_id].teacher_id = _teacher_id6;\n        });\n        return _objectSpread(_objectSpread({}, state), {}, {\n          message_by_student_id: _message_by_student_id5,\n          student_id_for_update: new Set(Object.keys(_message_by_student_id5))\n        });\n      }\n\n    case 'RECORD_ACTIVITIES_FOR_ONE':\n      {\n        var _student_id3 = action.student_id,\n            activities = action.activities,\n            _teacher_id7 = action.teacher_id;\n\n        var _message_by_student_id6 = _objectSpread({}, state.message_by_student_id);\n\n        _message_by_student_id6[_student_id3].activities = activities;\n        _message_by_student_id6[_student_id3].teacher_id = _teacher_id7;\n        return _objectSpread(_objectSpread({}, state), {}, {\n          message_by_student_id: _message_by_student_id6,\n          student_id_for_update: new Set([].concat(_toConsumableArray(state.student_id_for_update), [_student_id3]))\n        });\n      }\n\n    case 'WRITE_ACTIVITY_FOR_ALL':\n      {\n        var activity = action.activity,\n            _teacher_id8 = action.teacher_id;\n\n        var _message_by_student_id7 = _objectSpread({}, state.message_by_student_id);\n\n        Object.keys(_message_by_student_id7).forEach(function (student_id) {\n          _message_by_student_id7[student_id].other_activity = activity === '' ? '其它' : activity;\n          _message_by_student_id7[student_id].teacher_id = _teacher_id8;\n        });\n        return _objectSpread(_objectSpread({}, state), {}, {\n          message_by_student_id: _message_by_student_id7,\n          student_id_for_update: new Set(Object.keys(_message_by_student_id7))\n        });\n      }\n\n    case 'WRITE_ACTIVITY_FOR_ONE':\n      {\n        var _student_id4 = action.student_id,\n            _activity = action.activity,\n            _teacher_id9 = action.teacher_id;\n        return _objectSpread(_objectSpread({}, state), {}, {\n          message_by_student_id: _objectSpread(_objectSpread({}, state.message_by_student_id), {}, _defineProperty({}, _student_id4, _objectSpread(_objectSpread({}, state.message_by_student_id[_student_id4]), {}, {\n            other_activity: _activity,\n            teacher_id: _teacher_id9\n          }))),\n          student_id_for_update: new Set([].concat(_toConsumableArray(state.student_id_for_update), [_student_id4]))\n        });\n      }\n\n    case 'SEND_MESSAGE_ON_SUCCESS':\n      {\n        return _objectSpread(_objectSpread({}, state), {}, {\n          student_id_for_update: new Set()\n        });\n      }\n\n    case 'CLEAR_STATE':\n      {\n        return {\n          message_by_student_id: {},\n          student_id_for_update: new Set()\n        };\n      }\n\n    default:\n      return state;\n  }\n}","map":{"version":3,"sources":["/home/caleb_lee/gina_web_app/redux/school/reducers/message.js"],"names":["initial_state","message_by_student_id","student_id_for_update","Set","message","state","action","type","students","forEach","student","id","text","things_to_bring","other_item","activities","other_activity","teacher_id","message_data","Object","keys","student_id","items_to_bring_bool","item_to_bring","new_acitivities_bool","activity"],"mappings":"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","sourcesContent":["const initial_state = {\n  // TODO: parents can only write one response per message\n  // TODO: how do we incorporate reminders for things to bring\n  message_by_student_id: {\n    // { student_id }: {\n    //   text: '',\n    //   things_to_bring: [0,0,1,1,0,0,0],\n    //   other_item: ''\n    //   activities: [1,1,0,0,0,0,1],\n    //   other_activity: '',\n    //   teacher_id: ''\n    // }\n  },\n  student_id_for_update: new Set()\n}\n\nexport default function message(state = initial_state, action) {\n  switch (action.type) {\n    case 'INITIALIZE_CLASS': {\n      const message_by_student_id = {}\n      action.students.forEach(student => {\n        const { id } = student\n        message_by_student_id[id] = {\n          text: '',\n          things_to_bring: [0, 0, 0, 0, 0],\n          other_item: '其它',\n          activities: [0, 0, 0, 0, 0, 0, 0, 0, 0],\n          other_activity: '其它',\n          teacher_id: ''\n        }\n      })\n      return {\n        ...state,\n        message_by_student_id\n      }\n    }\n      \n    case 'FETCH_CLASS_MESSAGE_DATA': {\n      const { message_data } = action\n      return {\n        ...state,\n        message_by_student_id: {\n          ...state.message_by_student_id,\n          ...message_data\n        }\n      }\n    }\n\n    case 'WRITE_TO_ALL': {\n      const { text, teacher_id } = action\n      const message_by_student_id = { ...state.message_by_student_id }\n      Object.keys(message_by_student_id).forEach(student_id => {\n        message_by_student_id[student_id].text = text\n        message_by_student_id[student_id].teacher_id = teacher_id\n      })\n\n      return {\n        ...state,\n        ...message_by_student_id,\n        student_id_for_update: new Set(Object.keys(message_by_student_id))\n      }\n    }\n\n    case 'WRITE_TO_ONE': {\n      const { text, student_id, teacher_id } = action\n      const student_id_for_update = new Set([...state.student_id_for_update, student_id])\n      return {\n        ...state,\n        message_by_student_id: {\n          ...state.message_by_student_id,\n          [student_id]: {\n            ...state.message_by_student_id[student_id],\n            text,\n            teacher_id\n          }\n        },\n        student_id_for_update\n      }\n    }\n\n    case 'REMIND_ITEMS_TO_BRING_TO_ALL': {\n      const { items_to_bring_bool, teacher_id } = action\n      const message_by_student_id = { ...state.message_by_student_id }\n      Object.keys(message_by_student_id).forEach(student_id => {\n        message_by_student_id[student_id].things_to_bring = items_to_bring_bool\n        message_by_student_id[student_id].teacher_id = teacher_id\n      })\n      return {\n        ...state,\n        message_by_student_id,\n        student_id_for_update: new Set(Object.keys(message_by_student_id))\n      }\n    }\n\n    case 'REMIND_ITEMS_TO_BRING_TO_ONE': {\n      const { student_id, things_to_bring, teacher_id } = action\n      const message_by_student_id = { ...state.message_by_student_id }\n      message_by_student_id[student_id].things_to_bring = things_to_bring\n      message_by_student_id[student_id].teacher_id = teacher_id\n      return {\n        ...state,\n        message_by_student_id,\n        student_id_for_update: new Set([...state.student_id_for_update, student_id])\n      }\n    }\n      \n    case 'WRITE_ITEM_TO_BRING_TO_ALL': {\n      const { item_to_bring, teacher_id } = action\n      const message_by_student_id = { ...state.message_by_student_id }\n      Object.keys(message_by_student_id).forEach(student_id => {\n        message_by_student_id[student_id].other_item = item_to_bring === '' ? '其它' : item_to_bring\n        message_by_student_id[student_id].teacher_id = teacher_id\n      })\n      return {\n        ...state,\n        message_by_student_id,\n        student_id_for_update: new Set(Object.keys(message_by_student_id))\n      }\n    }\n      \n    case 'WRITE_ITEM_TO_BRING_TO_ONE': {\n      const { student_id, item_to_bring, teacher_id } = action\n      return {\n        ...state,\n        message_by_student_id: {\n          ...state.message_by_student_id,\n          [student_id]: {\n            ...state.message_by_student_id[student_id],\n            other_item: item_to_bring,\n            teacher_id\n          }\n        },\n        student_id_for_update: new Set([...state.student_id_for_update, student_id])\n      }\n    }\n\n    case 'RECORD_ACTIVITIES_FOR_ALL': {\n      const { new_acitivities_bool, teacher_id } = action\n      const message_by_student_id = { ...state.message_by_student_id }\n      Object.keys(message_by_student_id).forEach(student_id => {\n        message_by_student_id[student_id].activities = new_acitivities_bool\n        message_by_student_id[student_id].teacher_id = teacher_id\n      })\n      return {\n        ...state,\n        message_by_student_id,\n        student_id_for_update: new Set(Object.keys(message_by_student_id))\n      }\n    }\n\n    case 'RECORD_ACTIVITIES_FOR_ONE': {\n      const { student_id, activities, teacher_id } = action\n      const message_by_student_id = { ...state.message_by_student_id }\n      message_by_student_id[student_id].activities = activities\n      message_by_student_id[student_id].teacher_id = teacher_id\n      return {\n        ...state,\n        message_by_student_id,\n        student_id_for_update: new Set([...state.student_id_for_update, student_id])\n      }\n    }\n\n    case 'WRITE_ACTIVITY_FOR_ALL': {\n      const { activity, teacher_id } = action\n      const message_by_student_id = { ...state.message_by_student_id }\n      Object.keys(message_by_student_id).forEach(student_id => {\n        message_by_student_id[student_id].other_activity = activity === '' ? '其它' : activity\n        message_by_student_id[student_id].teacher_id = teacher_id\n      })\n      return {\n        ...state,\n        message_by_student_id,\n        student_id_for_update: new Set(Object.keys(message_by_student_id))\n      }\n    }\n\n    case 'WRITE_ACTIVITY_FOR_ONE': {\n      const { student_id, activity, teacher_id } = action\n      return {\n        ...state,\n        message_by_student_id: {\n          ...state.message_by_student_id,\n          [student_id]: {\n            ...state.message_by_student_id[student_id],\n            other_activity: activity,\n            teacher_id\n          }\n        },\n        student_id_for_update: new Set([...state.student_id_for_update, student_id])\n      }\n    }\n\n    case 'SEND_MESSAGE_ON_SUCCESS': {\n      return {\n        ...state,\n        student_id_for_update: new Set()\n      }\n    }\n\n    case 'CLEAR_STATE': {\n      return {\n        message_by_student_id: {},\n        student_id_for_update: new Set()\n      }\n    }\n\n    default:\n      return state\n  }\n}"]},"metadata":{},"sourceType":"module"}