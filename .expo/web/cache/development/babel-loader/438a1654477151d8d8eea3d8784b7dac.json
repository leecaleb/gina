{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nvar _jsxFileName = \"/home/caleb_lee/gina_web_app/components/parent/sleepcard.js\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function () { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport { Card } from 'native-base';\nimport { formatDate, fetchData as _fetchData } from \"../util\";\nimport Reloading from \"../reloading\";\n\nvar SleepCard = function (_React$Component) {\n  _inherits(SleepCard, _React$Component);\n\n  var _super = _createSuper(SleepCard);\n\n  function SleepCard(props) {\n    var _this;\n\n    _classCallCheck(this, SleepCard);\n\n    _this = _super.call(this, props);\n    _this.state = {\n      isLoading: true\n    };\n    _this.fetchData = _this.fetchData.bind(_assertThisInitialized(_this));\n    return _this;\n  }\n\n  _createClass(SleepCard, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var date = this.props.date;\n      this.fetchData(this.props.child_id, new Date(date.getTime()));\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps) {\n      if (this.props.date !== prevProps.date) {\n        this.setState({\n          isLoading: true\n        });\n        this.fetchData(this.props.child_id, new Date(this.props.date.getTime()));\n      } else if (this.props.child_id !== prevProps.child_id) {\n        this.setState({\n          isLoading: true\n        });\n        this.fetchData(this.props.child_id, new Date(this.props.date.getTime()));\n      }\n    }\n  }, {\n    key: \"fetchData\",\n    value: function fetchData(child_id, date) {\n      var start_date, end_date, sleepData;\n      return _regeneratorRuntime.async(function fetchData$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              if (!(date.getHours() < 17)) {\n                _context.next = 3;\n                break;\n              }\n\n              this.setState({\n                isLoading: false\n              });\n              return _context.abrupt(\"return\");\n\n            case 3:\n              start_date = formatDate(date);\n              date.setDate(date.getDate() + 1);\n              end_date = formatDate(date);\n              _context.next = 8;\n              return _regeneratorRuntime.awrap(_fetchData('sleep', child_id, start_date, end_date));\n\n            case 8:\n              sleepData = _context.sent;\n              this.setState({\n                sleepData: sleepData,\n                isLoading: false\n              });\n\n            case 10:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, this, null, Promise);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$state = this.state,\n          sleepData = _this$state.sleepData,\n          isLoading = _this$state.isLoading;\n      var today = formatDate(this.props.date);\n      return React.createElement(Card, {\n        style: {\n          width: '93%'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 52,\n          columnNumber: 7\n        }\n      }, React.createElement(View, {\n        style: {\n          flex: 1,\n          flexDirection: 'row'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 53,\n          columnNumber: 9\n        }\n      }, React.createElement(View, {\n        style: {\n          width: 56,\n          height: 56,\n          justifyContent: 'center',\n          alignItems: 'center'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 54,\n          columnNumber: 11\n        }\n      }, React.createElement(Image, {\n        source: require(\"../../assets/icon-sleep.png\"),\n        style: {\n          width: 48,\n          height: 48\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 55,\n          columnNumber: 13\n        }\n      })), React.createElement(View, {\n        style: {\n          flex: 1\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 63,\n          columnNumber: 11\n        }\n      }, React.createElement(View, {\n        style: {\n          paddingTop: 8\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 64,\n          columnNumber: 13\n        }\n      }, React.createElement(Text, {\n        style: {\n          fontSize: 20\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 65,\n          columnNumber: 15\n        }\n      }, \"\\u7761\\u7720\")), isLoading ? React.createElement(Reloading, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 68,\n          columnNumber: 15\n        }\n      }) : sleepData && sleepData[today] ? React.createElement(View, {\n        style: {\n          flex: 1,\n          paddingVertical: 8\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 70,\n          columnNumber: 17\n        }\n      }, React.createElement(View, {\n        style: {\n          flexDirection: 'row',\n          paddingBottom: 5\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 71,\n          columnNumber: 19\n        }\n      }, React.createElement(View, {\n        style: {\n          flex: 1,\n          justifyContent: 'center'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 74,\n          columnNumber: 21\n        }\n      }, React.createElement(Text, {\n        style: {\n          fontSize: 15,\n          textAlign: 'center',\n          color: '#606060'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 75,\n          columnNumber: 23\n        }\n      }, \"\\u5F9E\")), React.createElement(View, {\n        style: {\n          flex: 1\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 77,\n          columnNumber: 21\n        }\n      }), React.createElement(View, {\n        style: {\n          flex: 1,\n          justifyContent: 'center'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 79,\n          columnNumber: 21\n        }\n      }, React.createElement(Text, {\n        style: {\n          fontSize: 15,\n          textAlign: 'center',\n          color: '#606060'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 80,\n          columnNumber: 23\n        }\n      }, \"\\u5230\"))), sleepData[today].map(function (record, index) {\n        var sleep_time = record.sleep_time,\n            wake_time = record.wake_time,\n            hours = record.hours,\n            minutes = record.minutes;\n        return React.createElement(View, {\n          key: index,\n          style: {\n            flexDirection: 'row'\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 86,\n            columnNumber: 23\n          }\n        }, React.createElement(View, {\n          style: {\n            flex: 1,\n            justifyContent: 'center'\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 90,\n            columnNumber: 25\n          }\n        }, React.createElement(Text, {\n          style: {\n            fontSize: 25,\n            textAlign: 'center',\n            color: '#404040'\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 91,\n            columnNumber: 27\n          }\n        }, sleep_time)), React.createElement(View, {\n          style: {\n            flex: 1,\n            justifyContent: 'center'\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 93,\n            columnNumber: 25\n          }\n        }, React.createElement(Text, {\n          style: {\n            fontSize: 15,\n            textAlign: 'center',\n            color: '#404040'\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 94,\n            columnNumber: 27\n          }\n        }, hours, \"H \", minutes, \"M\")), React.createElement(View, {\n          style: {\n            flex: 1,\n            justifyContent: 'center'\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 96,\n            columnNumber: 25\n          }\n        }, React.createElement(Text, {\n          style: {\n            fontSize: 25,\n            textAlign: 'center',\n            color: '#404040'\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 97,\n            columnNumber: 27\n          }\n        }, wake_time)));\n      })) : React.createElement(View, {\n        style: {\n          flex: 1,\n          paddingVertical: 8\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 103,\n          columnNumber: 19\n        }\n      }, React.createElement(Text, {\n        style: {\n          fontSize: 17\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 104,\n          columnNumber: 19\n        }\n      }, \"\\u6C92\\u6709\\u65B0\\u7D00\\u9304\")))));\n    }\n  }]);\n\n  return SleepCard;\n}(React.Component);\n\nexport { SleepCard as default };","map":{"version":3,"sources":["/home/caleb_lee/gina_web_app/components/parent/sleepcard.js"],"names":["React","Card","formatDate","fetchData","Reloading","SleepCard","props","state","isLoading","bind","date","child_id","Date","getTime","prevProps","setState","getHours","start_date","setDate","getDate","end_date","sleepData","today","width","flex","flexDirection","height","justifyContent","alignItems","require","paddingTop","fontSize","paddingVertical","paddingBottom","textAlign","color","map","record","index","sleep_time","wake_time","hours","minutes","Component"],"mappings":"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","sourcesContent":["import React from 'react'\nimport { View, Text, Image } from 'react-native'\nimport { Card } from 'native-base'\nimport { formatDate, fetchData } from '../util';\nimport Reloading from '../reloading'\n\nexport default class SleepCard extends React.Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      isLoading: true\n    }\n    this.fetchData = this.fetchData.bind(this)\n  }\n\n  componentDidMount() {\n    const { date } = this.props\n    this.fetchData(this.props.child_id, new Date(date.getTime()))\n  }\n\n  componentDidUpdate(prevProps) {\n    if (this.props.date !== prevProps.date) {\n      this.setState({ isLoading: true })\n      this.fetchData(this.props.child_id, new Date(this.props.date.getTime()));\n    } else if (this.props.child_id !== prevProps.child_id) {\n      this.setState({ isLoading: true })\n      this.fetchData(this.props.child_id, new Date(this.props.date.getTime()));\n    }\n  }\n\n  async fetchData(child_id, date) {\n    if (date.getHours() < 17) {\n      this.setState({\n        isLoading: false\n      })\n      return\n    }\n    const start_date = formatDate(date)\n    date.setDate(date.getDate() + 1)\n    const end_date = formatDate(date)\n    const sleepData = await fetchData('sleep', child_id, start_date, end_date)\n    this.setState({\n      sleepData,\n      isLoading: false\n    })\n  }\n\n  render() {\n    const { sleepData, isLoading } = this.state\n    const today = formatDate(this.props.date)\n    return (\n      <Card style={{ width: '93%' }}>\n        <View style={{ flex: 1, flexDirection: 'row' }}>\n          <View style={{ width: 56, height: 56, justifyContent: 'center', alignItems: 'center'}}>\n            <Image\n              source={require('../../assets/icon-sleep.png')}\n              style={{\n                  width: 48,\n                  height: 48\n              }}\n            />\n          </View>\n          <View style={{ flex: 1 }}>\n            <View style={{ paddingTop: 8 }}>\n              <Text style={{ fontSize: 20 }}>睡眠</Text>\n            </View>\n            {isLoading ? \n              <Reloading />\n              : sleepData && sleepData[today] ?\n                <View style={{ flex: 1, paddingVertical: 8 }}>\n                  <View\n                    style={{ flexDirection: 'row', paddingBottom: 5 }}\n                  >\n                    <View style={{ flex: 1, justifyContent: 'center' }}>\n                      <Text style={{ fontSize: 15, textAlign: 'center', color: '#606060' }}>從</Text>\n                    </View>\n                    <View style={{ flex: 1}}>\n                    </View>\n                    <View style={{ flex: 1, justifyContent: 'center' }}>\n                      <Text style={{ fontSize: 15, textAlign: 'center', color: '#606060' }}>到</Text>\n                    </View>\n                  </View>\n                  {sleepData[today].map((record, index) => {\n                    const { sleep_time, wake_time, hours, minutes } = record\n                    return (\n                      <View\n                        key={index}\n                        style={{ flexDirection: 'row' }}\n                      >\n                        <View style={{ flex: 1, justifyContent: 'center' }}>\n                          <Text style={{ fontSize: 25, textAlign: 'center', color: '#404040' }}>{sleep_time}</Text>\n                        </View>\n                        <View style={{ flex: 1, justifyContent: 'center'}}>\n                          <Text style={{ fontSize: 15, textAlign: 'center', color: '#404040' }}>{hours}H {minutes}M</Text>\n                        </View>\n                        <View style={{ flex: 1, justifyContent: 'center' }}>\n                          <Text style={{ fontSize: 25, textAlign: 'center', color: '#404040' }}>{wake_time}</Text>\n                        </View>\n                      </View>\n                    )\n                  })}\n                </View>\n                : <View style={{ flex: 1, paddingVertical: 8 }}>\n                  <Text style={{ fontSize: 17 }}>沒有新紀錄</Text>\n                </View>\n            }\n          </View>\n        </View>\n      </Card>\n    );\n  }\n}"]},"metadata":{},"sourceType":"module"}