{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nvar _jsxFileName = \"/home/caleb_lee/gina_web_app/components/teacher/inboxcard.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function () { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport TouchableHighlight from \"react-native-web/dist/exports/TouchableHighlight\";\nimport ScrollView from \"react-native-web/dist/exports/ScrollView\";\nimport Alert from \"react-native-web/dist/exports/Alert\";\nimport { Card, CardItem, Button } from 'native-base';\nimport { connect } from 'react-redux';\nimport { bindActionCreators } from 'redux';\nimport { formatHourMinute, get, formatDate } from \"../util\";\n\nvar InboxCard = function (_React$Component) {\n  _inherits(InboxCard, _React$Component);\n\n  var _super = _createSuper(InboxCard);\n\n  function InboxCard(props) {\n    var _this;\n\n    _classCallCheck(this, InboxCard);\n\n    _this = _super.call(this, props);\n    _this.state = {\n      messages: []\n    };\n    return _this;\n  }\n\n  _createClass(InboxCard, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.fetchData();\n    }\n  }, {\n    key: \"fetchData\",\n    value: function fetchData() {\n      var class_id, date, response, success, statusCode, message, data;\n      return _regeneratorRuntime.async(function fetchData$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              class_id = this.props.class_id;\n              date = new Date();\n              _context.next = 4;\n              return _regeneratorRuntime.awrap(get(\"/message/class/\" + class_id + \"/unread?date=\" + formatDate(date)));\n\n            case 4:\n              response = _context.sent;\n              success = response.success, statusCode = response.statusCode, message = response.message, data = response.data;\n\n              if (success) {\n                _context.next = 9;\n                break;\n              }\n\n              alert(\"Sorry \\u53D6\\u5F97\\u5BB6\\u9577\\u8A0A\\u606F\\u6642\\u96FB\\u8166\\u51FA\\u72C0\\u6CC1\\u4E86\\uFF01\\u8ACB\\u622A\\u5716\\u548C\\u8207\\u5DE5\\u7A0B\\u5E2B\\u806F\\u7E6B\\n\\n\" + message);\n              return _context.abrupt(\"return\");\n\n            case 9:\n              this.setState({\n                messages: data\n              });\n\n            case 10:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, this, null, Promise);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var students = this.props.students;\n      var messages = this.state.messages;\n      return React.createElement(Card, {\n        style: {\n          flex: 1,\n          width: '90%'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 42,\n          columnNumber: 13\n        }\n      }, React.createElement(View, {\n        style: {\n          height: 80,\n          justifyContent: 'center',\n          marginTop: 5\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 43,\n          columnNumber: 17\n        }\n      }, React.createElement(Text, {\n        style: {\n          fontSize: 30,\n          alignSelf: 'center',\n          position: 'absolute'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 44,\n          columnNumber: 21\n        }\n      }, \"\\u8A0A\\u606F\")), React.createElement(View, {\n        style: {},\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 62,\n          columnNumber: 17\n        }\n      }, React.createElement(ScrollView, {\n        horizontal: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 63,\n          columnNumber: 21\n        }\n      }, messages.map(function (message, index) {\n        var activities = message.activities,\n            items_to_bring = message.items_to_bring,\n            message_for_teacher = message.message_for_teacher,\n            other_activity = message.other_activity,\n            other_item = message.other_item,\n            student_id = message.student_id,\n            teacher_id = message.teacher_id,\n            text = message.text;\n        return React.createElement(TouchableHighlight, {\n          key: index,\n          style: {\n            flex: 1,\n            margin: 3\n          },\n          onPress: function onPress() {\n            _this2.props.navigation.push('Inbox', {\n              messages: messages,\n              students: students\n            });\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 68,\n            columnNumber: 33\n          }\n        }, React.createElement(Card, {\n          style: {\n            flex: 1,\n            alignItems: 'center',\n            padding: 15\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 78,\n            columnNumber: 37\n          }\n        }, React.createElement(View, {\n          style: {\n            justifyContent: 'center'\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 82,\n            columnNumber: 41\n          }\n        }, React.createElement(Image, {\n          source: students[student_id].profile_picture === '' ? require(\"../../assets/icon-thumbnail.png\") : {\n            uri: students[student_id].profile_picture\n          },\n          style: styles.thumbnailImage,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 83,\n            columnNumber: 45\n          }\n        })), React.createElement(View, {\n          style: {\n            justifyContent: 'center'\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 91,\n            columnNumber: 41\n          }\n        }, React.createElement(Text, {\n          style: {\n            fontSize: 25\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 94,\n            columnNumber: 45\n          }\n        }, students[student_id].name))));\n      }))));\n    }\n  }]);\n\n  return InboxCard;\n}(React.Component);\n\nvar styles = StyleSheet.create({\n  card: {\n    width: '90%',\n    flex: 1\n  },\n  button: {\n    width: '30%',\n    backgroundColor: \"#b5e9e9\"\n  },\n  button_text: {\n    width: '100%',\n    textAlign: 'center',\n    color: 'gray',\n    fontSize: 30\n  },\n  thumbnailImage: {\n    height: 150,\n    width: 150,\n    borderRadius: 75\n  }\n});\n\nvar mapDispatchToProps = function mapDispatchToProps(dispatch) {\n  return _objectSpread({}, bindActionCreators({}, dispatch));\n};\n\nexport default connect(null, mapDispatchToProps, null, {\n  forwardRef: true\n})(InboxCard);","map":{"version":3,"sources":["/home/caleb_lee/gina_web_app/components/teacher/inboxcard.js"],"names":["React","Card","CardItem","Button","connect","bindActionCreators","formatHourMinute","get","formatDate","InboxCard","props","state","messages","fetchData","class_id","date","Date","response","success","statusCode","message","data","alert","setState","students","flex","width","height","justifyContent","marginTop","fontSize","alignSelf","position","map","index","activities","items_to_bring","message_for_teacher","other_activity","other_item","student_id","teacher_id","text","margin","navigation","push","alignItems","padding","profile_picture","require","uri","styles","thumbnailImage","name","Component","StyleSheet","create","card","button","backgroundColor","button_text","textAlign","color","borderRadius","mapDispatchToProps","dispatch","forwardRef"],"mappings":"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","sourcesContent":["import React from 'react'\nimport { View, Text, StyleSheet, Image, TouchableHighlight, ScrollView, Alert } from 'react-native'\nimport { Card, CardItem, Button } from 'native-base'\nimport { connect } from 'react-redux'\nimport { bindActionCreators } from 'redux'\n// import { initializeRequests } from '../../redux/school/actions/index'\nimport { formatHourMinute, get, formatDate } from '../util'\n\nclass InboxCard extends React.Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            messages: []\n        }\n    }\n\n    componentDidMount() {\n        this.fetchData()\n    }\n\n    async fetchData() {\n        const { class_id } = this.props\n        // let yesterday = new Date()\n        // yesterday.setDate(yesterday.getDate() - 1)\n        const date = new Date()\n        const response = await get(`/message/class/${class_id}/unread?date=${formatDate(date)}`)\n        const { success, statusCode, message, data } = response\n        if (!success) {\n            alert(`Sorry 取得家長訊息時電腦出狀況了！請截圖和與工程師聯繫\\n\\n` + message)\n              return \n        }\n        // this.props.getUnreadMessageSuccess(data)\n        // console.log('data: ', data)\n        this.setState({ messages: data })\n    }\n\n    render() {\n        const { students } = this.props\n        const { messages } = this.state\n        // const { requests, unfinished } = this.props.medication_requests\n        return (\n            <Card style={{ flex: 1, width: '90%'}}>\n                <View style={{ height: 80, justifyContent: 'center', marginTop: 5 }}>\n                    <Text style={{ fontSize: 30, alignSelf: 'center', position: 'absolute' }}>訊息</Text>\n                    {/* <TouchableHighlight\n                        style={{\n                            width: '25%',\n                            alignSelf: 'flex-end',\n                            position: 'absolute',\n                            padding: 5,\n                            backgroundColor: '#b5e9e9'\n                        }}\n                        onPress={() => {\n                            this.props.navigation.push('TeacherMedicineLog', {\n                                request_id: null\n                            })\n                        }}\n                    >\n                        <Text style={styles.button_text}>查看</Text>\n                    </TouchableHighlight> */}\n                </View>\n                <View style={{ }}>\n                    <ScrollView horizontal={true}>\n                        {messages.map((message, index) => {\n                            const { activities, items_to_bring, message_for_teacher, other_activity, other_item, student_id, teacher_id, text } = message\n                            // const time = formatHourMinute(new Date(timestamp))\n                            return (\n                                <TouchableHighlight\n                                    key={index}\n                                    style={{ flex: 1, margin: 3 }}\n                                    onPress={() => {\n                                        this.props.navigation.push('Inbox', {\n                                            messages,\n                                            students\n                                        })\n                                    }}\n                                >\n                                    <Card style={{ flex:1, alignItems: 'center', padding: 15 }}>\n                                        {/* <View style={{ justifyContent: 'center' }}>\n                                            <Text style={{ fontSize: 35 }}>{time}</Text>\n                                        </View> */}\n                                        <View style={{ justifyContent: 'center' }}>\n                                            <Image\n                                                source={\n                                                    students[student_id].profile_picture === '' ?\n                                                        require('../../assets/icon-thumbnail.png')\n                                                        : {uri: students[student_id].profile_picture} \n                                                }\n                                                style={styles.thumbnailImage}/>\n                                        </View>\n                                        <View\n                                            style={{ justifyContent: 'center' }}\n                                        >\n                                            <Text style={{ fontSize: 25 }}>{students[student_id].name}</Text>\n                                        </View>\n                                    </Card>\n                                </TouchableHighlight>\n                            )\n                        })}\n                    </ScrollView>\n                </View>\n            </Card>\n        )\n    }\n}\n\nconst styles = StyleSheet.create({\n    card: {\n        width: '90%',\n        flex: 1\n    },\n    button: {\n        width: '30%',\n        backgroundColor:\"#b5e9e9\"\n    },\n    button_text: {\n        width: '100%',\n        textAlign: 'center',\n        color: 'gray',\n        fontSize: 30,\n    },\n    thumbnailImage: {\n        height: 150,\n        width: 150,\n        borderRadius: 75\n    }\n})\n\n// const mapStateToProps = (state) => {\n//     return {\n//         medication_requests: state.medicationrequests\n//     }\n// }\n\nconst mapDispatchToProps = (dispatch) => {\n    return {\n        ...bindActionCreators({ }, dispatch)\n    }\n}\n\nexport default connect(null, mapDispatchToProps, null, { forwardRef: true }) (InboxCard)"]},"metadata":{},"sourceType":"module"}