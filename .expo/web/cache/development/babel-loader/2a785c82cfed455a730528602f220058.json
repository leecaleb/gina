{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nvar initial_state = {\n  by_student_id: {},\n  records: {},\n  record_id_for_update: new Set(),\n  errMessage: '',\n  records_with_error: new Set()\n};\nexport default function healthstatus() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initial_state;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case 'INITIALIZE_STUDENT_WELLNESS':\n      {\n        var by_student_id = {};\n        var records = {};\n        var len = 0;\n        action.students.forEach(function (student_id) {\n          by_student_id[student_id] = [len, len + 1];\n          records[len] = {\n            temperature: '',\n            status: '健康寶寶',\n            time: null,\n            teacher_id: ''\n          };\n          records[len + 1] = {\n            temperature: '',\n            status: '健康寶寶',\n            time: null,\n            teacher_id: ''\n          };\n          len += 2;\n        });\n        return _objectSpread(_objectSpread({}, state), {}, {\n          by_student_id: by_student_id,\n          records: records\n        });\n      }\n\n    case 'FETCH_CLASS_WELLNESS_DATA':\n      {\n        var _action$wellnessData = action.wellnessData,\n            _by_student_id = _action$wellnessData.by_student_id,\n            _records = _action$wellnessData.records;\n        var student_id_list = Object.keys(_by_student_id);\n\n        for (var i = 0; i < student_id_list.length; i++) {\n          var student_id = student_id_list[i];\n          var record_id_list = _by_student_id[student_id];\n\n          if (record_id_list.length === 1) {\n            record_id_list.push(state.by_student_id[student_id][1]);\n            _by_student_id[student_id] = record_id_list;\n          }\n        }\n\n        return _objectSpread(_objectSpread({}, state), {}, {\n          by_student_id: _objectSpread(_objectSpread({}, state.by_student_id), _by_student_id),\n          records: _objectSpread(_objectSpread({}, state.records), _records)\n        });\n      }\n\n    case 'ADD_RECORD':\n      {\n        var _by_student_id2 = state.by_student_id,\n            _records2 = state.records;\n        var _student_id = action.student_id;\n        var new_id = Object.keys(state.records).length;\n        return _objectSpread(_objectSpread({}, state), {}, {\n          by_student_id: _objectSpread(_objectSpread({}, _by_student_id2), {}, _defineProperty({}, _student_id, [].concat(_toConsumableArray(_by_student_id2[_student_id]), [new_id]))),\n          records: _objectSpread(_objectSpread({}, _records2), {}, _defineProperty({}, new_id, {\n            temperature: '',\n            status: '健康寶寶',\n            time: null,\n            teacher_id: ''\n          }))\n        });\n      }\n\n    case 'ADD_HEALTH_STATUS':\n      {\n        var _student_id2 = action.student_id,\n            record_id = action.record_id,\n            status = action.status,\n            teacher_id = action.teacher_id;\n        var record_id_for_update = new Set([].concat(_toConsumableArray(state.record_id_for_update), [record_id]));\n\n        var _records3 = _objectSpread(_objectSpread({}, state.records), {}, _defineProperty({}, record_id, _objectSpread(_objectSpread({}, state.records[record_id]), {}, {\n          student_id: _student_id2,\n          status: status,\n          time: new Date(),\n          teacher_id: teacher_id\n        })));\n\n        return _objectSpread(_objectSpread({}, state), {}, {\n          records: _records3,\n          record_id_for_update: record_id_for_update\n        });\n      }\n\n    case 'ADD_TEMPERATURE':\n      {\n        var _student_id3 = action.student_id,\n            _record_id = action.record_id,\n            temperature = action.temperature,\n            _teacher_id = action.teacher_id;\n\n        var _record_id_for_update = new Set([].concat(_toConsumableArray(state.record_id_for_update), [_record_id]));\n\n        var _records4 = _objectSpread(_objectSpread({}, state.records), {}, _defineProperty({}, _record_id, _objectSpread(_objectSpread({}, state.records[_record_id]), {}, {\n          student_id: _student_id3,\n          temperature: temperature,\n          time: new Date(),\n          teacher_id: _teacher_id\n        })));\n\n        return _objectSpread(_objectSpread({}, state), {}, {\n          records: _records4,\n          record_id_for_update: _record_id_for_update\n        });\n      }\n\n    case 'INVALIDATE_WELLNESS_DATA':\n      {\n        var _record_id2 = action.record_id,\n            errMessage = action.errMessage;\n        return _objectSpread(_objectSpread({}, state), {}, {\n          records_with_error: new Set([].concat(_toConsumableArray(state.records_with_error), [_record_id2]))\n        });\n      }\n\n    case 'SEND_WELLNESS_DATA_SUCCESS':\n      {\n        return _objectSpread(_objectSpread({}, state), {}, {\n          record_id_for_update: new Set()\n        });\n      }\n\n    case 'SEND_DATA_FAIL':\n      {\n        return _objectSpread(_objectSpread({}, state), {}, {\n          errMessage: action.errMessage\n        });\n      }\n\n    case 'CLEAR_STATE':\n      {\n        return {\n          by_student_id: {},\n          records: {},\n          record_id_for_update: new Set(),\n          errMessage: '',\n          records_with_error: new Set()\n        };\n      }\n\n    default:\n      return state;\n  }\n}","map":{"version":3,"sources":["/home/caleb_lee/gina_web_app/redux/school/reducers/healthstatus.js"],"names":["initial_state","by_student_id","records","record_id_for_update","Set","errMessage","records_with_error","healthstatus","state","action","type","len","students","forEach","student_id","temperature","status","time","teacher_id","wellnessData","student_id_list","Object","keys","i","length","record_id_list","push","new_id","record_id","Date"],"mappings":"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","sourcesContent":["var initial_state = {\n    // loaded: false,\n    by_student_id: {\n        /*\n        {student_id}: [{record_id}, {record_id}...]\n        */\n    },\n    records: {\n        // { record_id }: {\n        //     student_id\n        //     temperature: {INT_TYPE},\n        //     status: '',\n        //     time: '',\n        //     teacher_id: ''\n        // }, {...}\n    },\n    record_id_for_update: new Set(),\n    // record_id_for_edit: new Set()\n    errMessage: '',\n    records_with_error: new Set()\n}\n\nexport default function healthstatus(state = initial_state, action) {\n    switch (action.type) {\n        case 'INITIALIZE_STUDENT_WELLNESS': {\n            var by_student_id = {}\n            var records = {}\n            var len = 0\n            action.students.forEach(student_id => {\n                // const { id } = student\n                by_student_id[student_id] = [len, len+1]\n\n                records[len] = {\n                    temperature: '',\n                    status: '健康寶寶',\n                    time: null,\n                    teacher_id: ''\n                }\n\n                records[len+1] = {\n                    temperature: '',\n                    status: '健康寶寶',\n                    time: null,\n                    teacher_id: ''\n                }\n\n                len+=2\n            })\n\n            return {\n                ...state,\n                by_student_id,\n                records\n            }\n        }\n\n        case 'FETCH_CLASS_WELLNESS_DATA': {\n            const { by_student_id, records } = action.wellnessData\n            const student_id_list = Object.keys(by_student_id)\n            for (var i = 0; i < student_id_list.length; i++){\n                const student_id = student_id_list[i]\n                let record_id_list = by_student_id[student_id]\n                if (record_id_list.length === 1) {\n                    record_id_list.push(state.by_student_id[student_id][1])\n                    by_student_id[student_id] = record_id_list\n                }\n            }\n            return {\n                ...state,\n                by_student_id: {\n                    ...state.by_student_id,\n                    ...by_student_id\n                },\n                records: {\n                    ...state.records,\n                    ...records\n                },\n                // record_id_for_update: new Set()\n            }\n        }\n\n        case 'ADD_RECORD': {\n            const {by_student_id, records} = state\n            const { student_id } = action\n            const new_id = Object.keys(state.records).length\n            return {\n                ...state,\n                by_student_id: {\n                    ...by_student_id,\n                    [student_id]: [...by_student_id[student_id], new_id]\n                },\n                records: {\n                    ...records,\n                    [new_id]: {\n                        temperature: '',\n                        status: '健康寶寶',\n                        time: null,\n                        teacher_id: ''\n                    }\n                }\n            }\n        }\n\n        case 'ADD_HEALTH_STATUS': {\n            const { student_id, record_id, status, teacher_id } = action\n            const record_id_for_update = new Set([...state.record_id_for_update, record_id])\n            const records = {\n                ...state.records,\n                [record_id]: {\n                    ...state.records[record_id],\n                    student_id,\n                    status,\n                    time: new Date(),\n                    teacher_id\n                }\n            }\n            return {\n                ...state,\n                records,\n                record_id_for_update\n            }\n        }\n        case 'ADD_TEMPERATURE': {\n            const { student_id, record_id, temperature, teacher_id } = action\n            const record_id_for_update = new Set([...state.record_id_for_update, record_id])\n            const records = {\n                ...state.records,\n                [record_id]: {\n                    ...state.records[record_id],\n                    student_id,\n                    temperature,\n                    time: new Date(),\n                    teacher_id\n                }\n            }\n            return {\n                ...state,\n                records,\n                record_id_for_update\n            }\n        }\n            \n        case 'INVALIDATE_WELLNESS_DATA': {\n            const { record_id, errMessage } = action\n            return {\n                ...state,\n                //TODO how do we efficiently match each errmessage to the wellness_form that contains the error\n                records_with_error: new Set([...state.records_with_error, record_id])\n            }\n        }\n            \n        case 'SEND_WELLNESS_DATA_SUCCESS': {\n            return {\n                ...state,\n                record_id_for_update: new Set()\n            }\n        }\n            \n        case 'SEND_DATA_FAIL': {\n            return {\n                ...state,\n                errMessage: action.errMessage\n            }\n        }\n\n        case 'CLEAR_STATE': {\n            return {\n                by_student_id: {},\n                records: {},\n                record_id_for_update: new Set(),\n                errMessage: '',\n                records_with_error: new Set()\n            }\n        }\n        \n        default:\n            return state\n    }\n}"]},"metadata":{},"sourceType":"module"}