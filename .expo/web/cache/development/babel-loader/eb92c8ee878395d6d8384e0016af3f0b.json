{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nexport default function parent() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {\n    isConnected: true,\n    child_of_id: {},\n    med_requests: []\n  };\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case 'SET_CONNECT_STATE':\n      {\n        var isConnected = action.isConnected;\n        return _objectSpread(_objectSpread({}, state), {}, {\n          isConnected: isConnected\n        });\n      }\n\n    case 'INITIALIZE_CHILDREN':\n      var data = action.data;\n      data.forEach(function (child) {\n        var id = child.id,\n            name = child.name,\n            class_id = child.class_id,\n            profile_picture = child.profile_picture,\n            school_id = child.school_id;\n        state.child_of_id[id] = {\n          name: name,\n          class_id: class_id,\n          profile_picture: profile_picture,\n          school_id: school_id\n        };\n      });\n      return _objectSpread({}, state);\n\n    case 'MARK_PRESENT':\n      var student_id = action.student_id;\n      state.child_of_id[student_id].present = true;\n      return _objectSpread({}, state);\n\n    case 'GET_MED_REQUEST_SUCCESS':\n      var med_requests = action.med_requests;\n      return _objectSpread(_objectSpread({}, state), {}, {\n        med_requests: med_requests\n      });\n\n    case 'CLEAR_STATE':\n      {\n        return {\n          isConnected: true,\n          child_of_id: {},\n          med_requests: []\n        };\n      }\n\n    default:\n      return state;\n  }\n}","map":{"version":3,"sources":["/home/caleb_lee/gina_web_app/redux/parent/reducers/parent.js"],"names":["parent","state","isConnected","child_of_id","med_requests","action","type","data","forEach","child","id","name","class_id","profile_picture","school_id","student_id","present"],"mappings":";;;;;;AAAA,eAAe,SAASA,MAAT,GA0BJ;AAAA,MA1BoBC,KA0BpB,uEA1B4B;AAInCC,IAAAA,WAAW,EAAE,IAJsB;AAKnCC,IAAAA,WAAW,EAAE,EALsB;AAsBnCC,IAAAA,YAAY,EAAE;AAtBqB,GA0B5B;AAAA,MAARC,MAAQ;;AACP,UAAQA,MAAM,CAACC,IAAf;AACI,SAAK,mBAAL;AAA0B;AAAA,YACdJ,WADc,GACEG,MADF,CACdH,WADc;AAEtB,+CACOD,KADP;AAEIC,UAAAA,WAAW,EAAXA;AAFJ;AAIH;;AACD,SAAK,qBAAL;AAAA,UACYK,IADZ,GACqBF,MADrB,CACYE,IADZ;AAEIA,MAAAA,IAAI,CAACC,OAAL,CAAa,UAACC,KAAD,EAAW;AAAA,YACZC,EADY,GACuCD,KADvC,CACZC,EADY;AAAA,YACRC,IADQ,GACuCF,KADvC,CACRE,IADQ;AAAA,YACFC,QADE,GACuCH,KADvC,CACFG,QADE;AAAA,YACQC,eADR,GACuCJ,KADvC,CACQI,eADR;AAAA,YACyBC,SADzB,GACuCL,KADvC,CACyBK,SADzB;AAEpBb,QAAAA,KAAK,CAACE,WAAN,CAAkBO,EAAlB,IAAwB;AACpBC,UAAAA,IAAI,EAAJA,IADoB;AAEpBC,UAAAA,QAAQ,EAARA,QAFoB;AAGpBC,UAAAA,eAAe,EAAfA,eAHoB;AAIpBC,UAAAA,SAAS,EAATA;AAJoB,SAAxB;AAMH,OARD;AASA,+BACOb,KADP;;AAIJ,SAAK,cAAL;AAAA,UACYc,UADZ,GAC2BV,MAD3B,CACYU,UADZ;AAEId,MAAAA,KAAK,CAACE,WAAN,CAAkBY,UAAlB,EAA8BC,OAA9B,GAAwC,IAAxC;AACA,+BACOf,KADP;;AAIJ,SAAK,yBAAL;AAAA,UACYG,YADZ,GAC6BC,MAD7B,CACYD,YADZ;AAEI,6CACOH,KADP;AAEIG,QAAAA,YAAY,EAAZA;AAFJ;;AAKJ,SAAK,aAAL;AAAoB;AAChB,eAAO;AACHF,UAAAA,WAAW,EAAE,IADV;AAEHC,UAAAA,WAAW,EAAE,EAFV;AAGHC,UAAAA,YAAY,EAAE;AAHX,SAAP;AAKH;;AAED;AACI,aAAOH,KAAP;AA9CR;AAgDH","sourcesContent":["export default function parent(state = {\n    // first_name: '',\n    // last_name: '',\n    // id: '',\n    isConnected: true,\n    child_of_id: {\n        /*\n        {child_A_id}: {\n            first_name: \"\",\n            last_name: \"\",\n            class_id: SOME_ID,\n            profile_pic: \"\",\n            // teacher_ids: []\n        },\n        {child_B_id}: {\n            first_name: \"\",\n            last_name: \"\",\n            class_id: SOME_ID,\n            profile_pic: \"\"\n        }\n        */\n    },\n    med_requests: []\n    // teachers: {\n\n    // }\n}, action) {\n    switch (action.type) {\n        case 'SET_CONNECT_STATE': {\n            const { isConnected } = action\n            return {\n                ...state,\n                isConnected\n            }\n        }\n        case 'INITIALIZE_CHILDREN':\n            const { data } = action\n            data.forEach((child) => {\n                const { id, name, class_id, profile_picture, school_id } = child\n                state.child_of_id[id] = {\n                    name,\n                    class_id,\n                    profile_picture,\n                    school_id\n                }\n            })\n            return {\n                ...state\n            }\n\n        case 'MARK_PRESENT':\n            const { student_id } = action\n            state.child_of_id[student_id].present = true\n            return {\n                ...state\n            }\n\n        case 'GET_MED_REQUEST_SUCCESS': \n            const { med_requests } = action\n            return {\n                ...state,\n                med_requests\n            }\n    \n        case 'CLEAR_STATE': {\n            return {\n                isConnected: true,\n                child_of_id: {},\n                med_requests: []\n            }\n        }\n\n        default:\n            return state\n    }\n}"]},"metadata":{},"sourceType":"module"}