{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nvar initial_state = {\n  class_id: '',\n  passcodeTeacherId: {},\n  teachers: {},\n  students: {},\n  isConnected: false,\n  errMessage: ''\n};\nexport default function classInfo() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initial_state;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  var newState = _objectSpread({}, state);\n\n  switch (action.type) {\n    case 'SET_CONNECT_STATE':\n      {\n        var isConnected = action.isConnected;\n        return _objectSpread(_objectSpread({}, state), {}, {\n          isConnected: isConnected\n        });\n      }\n\n    case 'INITIALIZE_CLASS':\n      var teachers = {},\n          students = {};\n      action.teacher_objs.forEach(function (teacher) {\n        teachers[teacher[0]] = {\n          name: teacher[1],\n          passcode: teacher[2],\n          logged_in: false,\n          in_time: '',\n          out_time: ''\n        };\n        state.passcodeTeacherId[teacher[2]] = teacher[0];\n      });\n      action.students.forEach(function (student) {\n        var id = student.id,\n            name = student.name,\n            profile_picture = student.profile_picture,\n            blood_type = student.blood_type,\n            address = student.address,\n            home_phone = student.home_phone,\n            father_phone = student.father_phone,\n            mother_phone = student.mother_phone,\n            conversation_id = student.conversation_id;\n        students[id] = {\n          name: name,\n          profile_picture: profile_picture,\n          blood_type: blood_type,\n          address: address,\n          home_phone: home_phone,\n          father_phone: father_phone,\n          mother_phone: mother_phone,\n          conversation_id: conversation_id\n        };\n      });\n      return _objectSpread(_objectSpread({}, state), {}, {\n        passcodeTeacherId: state.passcodeTeacherId,\n        teachers: teachers,\n        students: students\n      });\n\n    case 'SET_CLASS_ID':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        class_id: action.class_id\n      });\n\n    case 'FETCH_ATTENDANCE_SUCCESS':\n      {\n        var data = action.data;\n        data.forEach(function (attendance_obj) {\n          var attendance_id = attendance_obj.attendance_id,\n              teacher_id = attendance_obj.teacher_id,\n              in_time = attendance_obj.in_time;\n          newState.teachers[teacher_id] = _objectSpread(_objectSpread({}, state.teachers[teacher_id]), {}, {\n            logged_in: true,\n            attendance_id: attendance_id,\n            in_time: in_time\n          });\n        });\n        return newState;\n      }\n\n    case 'MARK_TEACHER_LOGGED_IN':\n      {\n        var teacher_id = action.teacher_id,\n            time = action.time,\n            attendance_id = action.attendance_id;\n        newState.teachers[teacher_id] = _objectSpread(_objectSpread({}, state.teachers[teacher_id]), {}, {\n          logged_in: true,\n          in_time: time,\n          attendance_id: attendance_id\n        });\n        return newState;\n      }\n\n    case 'MARK_TEACHER_LOGGED_OUT':\n      {\n        var _teacher_id = action.teacher_id,\n            _time = action.time;\n        newState.teachers[_teacher_id] = _objectSpread(_objectSpread({}, state.teachers[_teacher_id]), {}, {\n          logged_in: false,\n          out_time: _time,\n          attendance_id: ''\n        });\n        return newState;\n      }\n\n    case 'MARK_STAFF_ATTENDANCE_FAIL':\n      var errMessage = action.errMessage;\n      return {\n        errMessage: errMessage\n      };\n\n    case 'CLEAR_STATE':\n      return {\n        class_id: '',\n        passcodeTeacherId: {},\n        teachers: {},\n        students: {},\n        isConnected: false,\n        errMessage: ''\n      };\n\n    default:\n      return state;\n  }\n}","map":{"version":3,"sources":["/home/caleb_lee/gina_web_app/redux/school/reducers/classInfo.js"],"names":["initial_state","class_id","passcodeTeacherId","teachers","students","isConnected","errMessage","classInfo","state","action","newState","type","teacher_objs","forEach","teacher","name","passcode","logged_in","in_time","out_time","student","id","profile_picture","blood_type","address","home_phone","father_phone","mother_phone","conversation_id","data","attendance_obj","attendance_id","teacher_id","time"],"mappings":"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","sourcesContent":["const initial_state = {\n    class_id: '',\n    passcodeTeacherId: {},\n    teachers: {\n        /*\n        {teacher_id}: {\n            name: \"teacher_name\",\n            passcode: 33,\n            logged_in: false,\n            attendance_id: '',\n            in_time: '',\n            out_time: ''\n        }, {...}\n        */\n    },\n    students: {\n        /*\n        {student_id}: {\n            name: \"\",\n            profile_picture: \"\",\n            conversation_id; \"\",\n            blood_type: \"\",\n            address: \"\",\n            home_phone: \"\",\n            father_phone: \"\",\n            mother_phone: \"\"\n        }, {...}\n        */\n    },\n    isConnected: false,\n    errMessage: ''\n}\n\nexport default function classInfo(state = initial_state, action) {\n    const newState = { ...state }\n    switch (action.type) {\n        case 'SET_CONNECT_STATE': {\n            const { isConnected } = action\n            return {\n                ...state,\n                isConnected\n            }\n        }\n        case 'INITIALIZE_CLASS':\n            var teachers = {}, students = {}\n            action.teacher_objs.forEach(teacher => {\n                teachers[teacher[0]] = {\n                    name: teacher[1],\n                    passcode: teacher[2],\n                    logged_in: false,\n                    in_time: '',\n                    out_time: ''\n                }\n                state.passcodeTeacherId[teacher[2]] = teacher[0]\n            })\n            action.students.forEach(student => {\n                const { \n                    id,\n                    name,\n                    profile_picture,\n                    blood_type,\n                    address,\n                    home_phone,\n                    father_phone, \n                    mother_phone, \n                    conversation_id } = student\n                students[id] = {\n                    name,\n                    profile_picture,\n                    blood_type,\n                    address,\n                    home_phone,\n                    father_phone,\n                    mother_phone,\n                    conversation_id\n                }\n            })\n            \n            return {\n                ...state,\n                passcodeTeacherId: state.passcodeTeacherId,\n                teachers: teachers,\n                students: students\n            }\n        \n        case 'SET_CLASS_ID':\n            return {\n                ...state,\n                class_id: action.class_id\n            }\n    \n        case 'FETCH_ATTENDANCE_SUCCESS': {\n            const { data } = action\n            data.forEach(attendance_obj => {\n                const { attendance_id, teacher_id, in_time } = attendance_obj\n                newState.teachers[teacher_id] = {\n                    ...state.teachers[teacher_id],\n                    logged_in: true,\n                    attendance_id,\n                    in_time\n                }\n            })\n\n            return newState\n        }\n        \n        case 'MARK_TEACHER_LOGGED_IN':{\n            const { teacher_id, time, attendance_id } = action\n            newState.teachers[teacher_id] = {\n                ...state.teachers[teacher_id],\n                logged_in: true,\n                in_time: time,\n                attendance_id\n            }\n            return newState\n        }\n        \n        case 'MARK_TEACHER_LOGGED_OUT':{\n            const { teacher_id, time } = action\n            newState.teachers[teacher_id] = {\n                ...state.teachers[teacher_id],\n                logged_in: false,\n                out_time: time,\n                attendance_id: ''\n            }\n            return newState\n        }\n\n        case 'MARK_STAFF_ATTENDANCE_FAIL':\n            const {errMessage} = action\n            return {\n                errMessage\n            }\n        \n        case 'CLEAR_STATE':\n            return {\n                class_id: '',\n                passcodeTeacherId: {},\n                teachers: {},\n                students: {},\n                isConnected: false,\n                errMessage: ''\n            }\n        \n        default:\n            return state\n    }\n\n}"]},"metadata":{},"sourceType":"module"}