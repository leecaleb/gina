{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nvar initialState = {\n  loaded: false,\n  fruit_name: '水果',\n  ratings: {},\n  updatedStudents: new Set(),\n  err_message: ''\n};\nexport default function appetite() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case 'INITIALIZE_CLASS':\n      {\n        var ratings = {};\n        action.students.forEach(function (student) {\n          var id = student.id;\n          ratings[id] = {\n            Breakfast: '0',\n            Fruit: '0',\n            Lunch: '0',\n            Snack: '0',\n            teacher_id: ''\n          };\n        });\n        return _objectSpread(_objectSpread({}, state), {}, {\n          ratings: ratings\n        });\n      }\n\n    case 'FETCH_CLASS_APPETITE_DATA':\n      {\n        var fruit_name = action.fruit_name,\n            _ratings = action.ratings;\n        return _objectSpread(_objectSpread({}, state), {}, {\n          fruit_name: fruit_name,\n          ratings: _objectSpread(_objectSpread({}, state.ratings), _ratings)\n        });\n      }\n\n    case 'EDIT_FRUIT_NAME':\n      {\n        var _fruit_name = action.fruit_name;\n        return _objectSpread(_objectSpread({}, state), {}, {\n          fruit_name: _fruit_name\n        });\n      }\n\n    case 'RATE_APPETITE':\n      {\n        var _objectSpread2;\n\n        var student_id = action.student_id,\n            mealType = action.mealType,\n            rating = action.rating,\n            teacher_id = action.teacher_id;\n        var updatedStudents = state.updatedStudents;\n        var water_drank = state.ratings[student_id][mealType].slice(-1);\n\n        if (rating !== '') {\n          updatedStudents = new Set([].concat(_toConsumableArray(state.updatedStudents), [student_id]));\n        }\n\n        return _objectSpread(_objectSpread({}, state), {}, {\n          ratings: _objectSpread(_objectSpread({}, state.ratings), {}, _defineProperty({}, student_id, _objectSpread(_objectSpread({}, state.ratings[student_id]), {}, (_objectSpread2 = {}, _defineProperty(_objectSpread2, mealType, rating + water_drank), _defineProperty(_objectSpread2, \"teacher_id\", teacher_id), _objectSpread2)))),\n          updatedStudents: updatedStudents\n        });\n      }\n\n    case 'CLEAR_RATINGS':\n      {\n        var meal_type = action.meal_type;\n\n        var newState = _objectSpread({}, state);\n\n        var _student_id_array = Object.keys(state.ratings);\n\n        var _updatedStudents = new Set();\n\n        for (var i = 0; i < _student_id_array.length; i++) {\n          var _student_id = _student_id_array[i];\n\n          if (state.ratings[_student_id][meal_type] !== '0') {\n            _updatedStudents.add(_student_id);\n          }\n\n          newState.ratings[_student_id] = _objectSpread(_objectSpread({}, state.ratings[_student_id]), {}, _defineProperty({}, meal_type, '0'));\n        }\n\n        newState.updatedStudents = _updatedStudents;\n        return newState;\n      }\n\n    case 'SET_ALL_RATINGS_TO_GREAT':\n      {\n        var newRatingObj = {};\n        var student_id_array = [];\n        Object.keys(state.ratings).map(function (student_id) {\n          var _objectSpread5;\n\n          student_id_array.push(student_id);\n          var water_drank = state.ratings[student_id][action.mealType].slice(-1) === '1';\n          newRatingObj[student_id] = _objectSpread(_objectSpread({}, state.ratings[student_id]), {}, (_objectSpread5 = {}, _defineProperty(_objectSpread5, action.mealType, water_drank ? 'Awesome1' : 'Awesome0'), _defineProperty(_objectSpread5, \"teacher_id\", action.teacher_id), _objectSpread5));\n        });\n        return _objectSpread(_objectSpread({}, state), {}, {\n          ratings: newRatingObj,\n          updatedStudents: new Set(student_id_array)\n        });\n      }\n\n    case 'MARK_WATER_DRANK':\n      {\n        var _objectSpread6;\n\n        var _student_id2 = action.student_id,\n            _meal_type = action.meal_type,\n            _teacher_id = action.teacher_id;\n\n        var _updatedStudents2 = new Set([].concat(_toConsumableArray(state.updatedStudents), [_student_id2]));\n\n        var _rating = state.ratings[_student_id2][_meal_type];\n\n        var _water_drank = _rating.slice(-1) === '1';\n\n        return _objectSpread(_objectSpread({}, state), {}, {\n          ratings: _objectSpread(_objectSpread({}, state.ratings), {}, _defineProperty({}, _student_id2, _objectSpread(_objectSpread({}, state.ratings[_student_id2]), {}, (_objectSpread6 = {}, _defineProperty(_objectSpread6, _meal_type, _water_drank ? _rating.slice(0, -1) + '0' : _rating.slice(0, -1) + '1'), _defineProperty(_objectSpread6, \"teacher_id\", _teacher_id), _objectSpread6)))),\n          updatedStudents: _updatedStudents2\n        });\n      }\n\n    case 'CLEAR_UPDATED_STUDENTS':\n      {\n        return _objectSpread(_objectSpread({}, state), {}, {\n          updatedStudents: new Set()\n        });\n      }\n\n    case 'ON_SEND_APPETITE_SUCCESS':\n      {\n        return _objectSpread(_objectSpread({}, state), {}, {\n          updatedStudents: new Set()\n        });\n      }\n\n    case 'ALERT_ERR_MESSAGE':\n      {\n        var err_message = action.err_message;\n        return _objectSpread(_objectSpread({}, state), {}, {\n          err_message: err_message\n        });\n      }\n\n    case 'CLEAR_ERR_MESSAGE':\n      {\n        return _objectSpread(_objectSpread({}, state), {}, {\n          err_message: ''\n        });\n      }\n\n    case 'ADD_STUDENT_ID_FOR_UPDATE':\n      {\n        var _student_id_array2 = action.student_id_array;\n        return _objectSpread(_objectSpread({}, state), {}, {\n          updatedStudents: new Set([].concat(_toConsumableArray(state.updatedStudents), _toConsumableArray(_student_id_array2)))\n        });\n      }\n\n    case 'CLEAR_STATE':\n      {\n        return {\n          loaded: false,\n          fruit_name: '水果',\n          ratings: {},\n          updatedStudents: new Set(),\n          err_message: ''\n        };\n      }\n\n    default:\n      return state;\n  }\n}","map":{"version":3,"sources":["/home/caleb_lee/gina_web_app/redux/school/reducers/appetite.js"],"names":["initialState","loaded","fruit_name","ratings","updatedStudents","Set","err_message","appetite","state","action","type","students","forEach","student","id","Breakfast","Fruit","Lunch","Snack","teacher_id","student_id","mealType","rating","water_drank","slice","meal_type","newState","student_id_array","Object","keys","i","length","add","newRatingObj","map","push"],"mappings":"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","sourcesContent":["var initialState = {\n    loaded: false,\n    fruit_name: '水果',\n    ratings: {\n        /*\n        {student_id}: { \n            Breakfast: 'Awesome0'\n            Fruit: '0'\n            Lunch: 'Good1',\n            Snack: 'Ok1',\n            teacher_id: ''\n        }, {...}\n        */\n    },\n    updatedStudents: new Set(),\n    err_message: ''\n}\n\nexport default function appetite(state = initialState, action) {\n    switch (action.type) {\n        case 'INITIALIZE_CLASS': {\n            var ratings = {}\n            action.students.forEach(student => {\n                const { id } = student\n                ratings[id] = {\n                    Breakfast: '0',\n                    Fruit: '0',\n                    Lunch: '0',\n                    Snack: '0',\n                    teacher_id: ''\n                }\n            })\n\n            return {\n                ...state,\n                ratings\n            }\n        }\n        case 'FETCH_CLASS_APPETITE_DATA': {\n            const { fruit_name, ratings } = action\n            return {\n                ...state,\n                fruit_name,\n                ratings: {\n                    ...state.ratings,\n                    ...ratings\n                }\n            }\n        }\n\n        case 'EDIT_FRUIT_NAME': {\n            const { fruit_name } = action\n            return {\n                ...state,\n                fruit_name,\n                // loaded: false\n            }\n        }\n\n        case 'RATE_APPETITE':{\n            const { student_id, mealType, rating, teacher_id } = action\n            var { updatedStudents } = state\n            const water_drank = state.ratings[student_id][mealType].slice(-1)\n            if (rating !== '') {\n                updatedStudents = new Set([...state.updatedStudents, student_id])\n            }\n            return {\n                ...state,\n                ratings: {\n                    ...state.ratings,\n                    [student_id]: {\n                        ...state.ratings[student_id],\n                        [mealType]: rating + water_drank,\n                        teacher_id\n                    }\n                },\n                updatedStudents\n            }\n        }\n        \n        case 'CLEAR_RATINGS': {\n            const { meal_type } = action\n            const newState = { ...state }\n            const student_id_array = Object.keys(state.ratings)\n            const updatedStudents = new Set()\n            for (var i = 0; i < student_id_array.length; i++) {\n                const student_id = student_id_array[i]\n                if (state.ratings[student_id][meal_type] !== '0') {\n                    updatedStudents.add(student_id)\n                }\n                newState.ratings[student_id] = {\n                    ...state.ratings[student_id],\n                    [meal_type]: '0'\n                }\n            }\n            newState.updatedStudents = updatedStudents\n\n            return newState\n        }\n        case 'SET_ALL_RATINGS_TO_GREAT':{\n            var newRatingObj = {}\n            var student_id_array = []\n            Object.keys(state.ratings).map((student_id) => {\n                student_id_array.push(student_id)\n                const water_drank = state.ratings[student_id][action.mealType].slice(-1) === '1'\n                newRatingObj[student_id] = {\n                    ...state.ratings[student_id],\n                    [action.mealType]: water_drank ? 'Awesome1' : 'Awesome0',\n                    teacher_id: action.teacher_id\n                }\n            })\n            return {\n                ...state,\n                ratings: newRatingObj,\n                updatedStudents: new Set(student_id_array)\n            }\n        }\n        \n        case 'MARK_WATER_DRANK': {\n            const { student_id, meal_type, teacher_id } = action\n            const updatedStudents = new Set([...state.updatedStudents, student_id])\n            const rating = state.ratings[student_id][meal_type]\n            const water_drank = rating.slice(-1) === '1'\n            return {\n                ...state,\n                ratings: {\n                    ...state.ratings,\n                    [student_id]: {\n                        ...state.ratings[student_id],\n                        [meal_type]: water_drank ? rating.slice(0, -1) + '0' : rating.slice(0, -1) + '1',\n                        teacher_id\n                    }\n                },\n                updatedStudents\n            }\n        }\n        case 'CLEAR_UPDATED_STUDENTS':{\n            return {\n                ...state,\n                updatedStudents: new Set()\n            }\n        }\n        case 'ON_SEND_APPETITE_SUCCESS':{\n            return {\n                ...state,\n                updatedStudents: new Set()\n            }\n        }    \n        case 'ALERT_ERR_MESSAGE': {\n            const { err_message } = action\n            return {\n                ...state,\n                err_message\n            }\n        }\n            \n        case 'CLEAR_ERR_MESSAGE': {\n            return {\n                ...state,\n                err_message: ''\n            }\n        }\n            \n        case 'ADD_STUDENT_ID_FOR_UPDATE': {\n            const { student_id_array } = action\n            return {\n                ...state,\n                updatedStudents: new Set([...state.updatedStudents, ...student_id_array])\n            }\n        }\n        \n        case 'CLEAR_STATE': {\n            return {\n                loaded: false,\n                fruit_name: '水果',\n                ratings: {},\n                updatedStudents: new Set(),\n                err_message: ''\n            }\n        }\n        default:\n            return state\n    }\n}"]},"metadata":{},"sourceType":"module"}