{"ast":null,"code":"import _toConsumableArray from\"@babel/runtime/helpers/toConsumableArray\";import _defineProperty from\"@babel/runtime/helpers/defineProperty\";function ownKeys(object,enumerableOnly){var keys=Object.keys(object);if(Object.getOwnPropertySymbols){var symbols=Object.getOwnPropertySymbols(object);if(enumerableOnly)symbols=symbols.filter(function(sym){return Object.getOwnPropertyDescriptor(object,sym).enumerable;});keys.push.apply(keys,symbols);}return keys;}function _objectSpread(target){for(var i=1;i<arguments.length;i++){var source=arguments[i]!=null?arguments[i]:{};if(i%2){ownKeys(Object(source),true).forEach(function(key){_defineProperty(target,key,source[key]);});}else if(Object.getOwnPropertyDescriptors){Object.defineProperties(target,Object.getOwnPropertyDescriptors(source));}else{ownKeys(Object(source)).forEach(function(key){Object.defineProperty(target,key,Object.getOwnPropertyDescriptor(source,key));});}}return target;}var initial_state={isConnected:true,classes:{},pick_up_request:[],admin_passcode:'',viewing_status:'',passcodeAdminId:{},passcodeTeacherId:{},teacherOnDuty:'',teachers:{},students:{},attendance:{},student_present:new Set(),student_absent:new Set(),student_unmarked:new Set(),teacher_present:new Set(),teacher_absent:new Set(),teacher_unmarked:new Set()};export default function school(){var state=arguments.length>0&&arguments[0]!==undefined?arguments[0]:initial_state;var action=arguments.length>1?arguments[1]:undefined;switch(action.type){case'SET_CONNECT_STATE':{var isConnected=action.isConnected;return _objectSpread(_objectSpread({},state),{},{isConnected:isConnected});}case'FETCH_CLASSES_SUCCESS':var classes=action.classes,admin_passcode=action.admin_passcode;return _objectSpread(_objectSpread({},state),{},{classes:classes,admin_passcode:admin_passcode});case'FETCH_TEACHERS_SUCCESS':{var admins=action.admins,teachers=action.teachers,_classes=action.classes;var updated_classes=_objectSpread({},state.classes);var passcodeAdminId=state.passcodeAdminId,passcodeTeacherId=state.passcodeTeacherId;Object.keys(_classes).forEach(function(class_id){updated_classes[class_id].teachers=_classes[class_id].teachers;});Object.keys(admins).forEach(function(admin_id){passcodeAdminId[admins[admin_id].passcode]=admin_id;});Object.keys(teachers).forEach(function(teacher_id){passcodeTeacherId[teachers[teacher_id].passcode]=teacher_id;});return _objectSpread(_objectSpread({},state),{},{passcodeAdminId:passcodeAdminId,passcodeTeacherId:passcodeTeacherId,teachers:_objectSpread(_objectSpread({},teachers),admins),classes:updated_classes,teacher_unmarked:new Set(Object.keys(teachers))});}case'FETCH_STUDENTS_SUCCESS':{var students=action.students,_classes2=action.classes;var _updated_classes=_objectSpread({},state.classes);Object.keys(_classes2).forEach(function(class_id){_updated_classes[class_id].students=_classes2[class_id].students;});return _objectSpread(_objectSpread({},state),{},{students:students,classes:_updated_classes,student_unmarked:new Set(Object.keys(students))});}case'FETCH_TEACHER_ATTENDANCE_SUCCESS':{var attendance=action.attendance,_teachers=action.teachers;var updated_teachers=_objectSpread({},state.teachers);var teacher_unmarked=new Set(Object.keys(state.teachers));var teacher_present=new Set();var teacher_absent=new Set();Object.keys(_teachers).forEach(function(teacher_id){updated_teachers[teacher_id].attendance=_teachers[teacher_id].attendance_array;updated_teachers[teacher_id].present=_teachers[teacher_id].present;updated_teachers[teacher_id].total_minutes=_teachers[teacher_id].total_minutes;if(_teachers[teacher_id].present){teacher_present.add(teacher_id);}else{teacher_absent.add(teacher_id);}teacher_unmarked.delete(teacher_id);});return _objectSpread(_objectSpread({},state),{},{teachers:updated_teachers,attendance:_objectSpread(_objectSpread({},state.attendance),attendance),teacher_present:teacher_present,teacher_absent:teacher_absent,teacher_unmarked:teacher_unmarked});}case'FETCH_STUDENT_ATTENDANCE_SUCCESS':{var _attendance=action.attendance,_students=action.students,present=action.present,absent=action.absent;var updated_students=_objectSpread({},state.students);var student_unmarked=new Set(Object.keys(state.students));Object.keys(_students).forEach(function(student_id){updated_students[student_id].attendance_id=_students[student_id];if(present.includes(student_id)||absent.includes(student_id)){student_unmarked.delete(student_id);}});return _objectSpread(_objectSpread({},state),{},{students:updated_students,attendance:_objectSpread(_objectSpread({},state.attendance),_attendance),student_present:new Set(_toConsumableArray(present)),student_absent:new Set(_toConsumableArray(absent)),student_unmarked:student_unmarked});}case'EDIT_TEACHER_ON_DUTY':{var teacher_id=action.teacher_id;return _objectSpread(_objectSpread({},state),{},{teacherOnDuty:teacher_id});}case'ADD_PICKUP_REQUEST':{var requests=action.requests;return _objectSpread(_objectSpread({},state),{},{pick_up_request:requests});}case'UPDATE_VIEWING_STATUS':{var status=action.status;return _objectSpread(_objectSpread({},state),{},{viewing_status:status});}case'UPDATE_PROFILE_PICTURE':{var student_id=action.student_id,uri=action.uri;var _students2=_objectSpread({},state.students);_students2[student_id].profile_picture=uri;return _objectSpread(_objectSpread({},state),{},{students:_students2});}case'EDIT_STUDENT_SUCCESS':{var _student_id=action.student_id,name=action.name,old_class_id=action.old_class_id,new_class_id=action.new_class_id;var _students3=_objectSpread({},state.students);var _classes3=_objectSpread({},state.classes);_students3[_student_id].name=name;_students3[_student_id].class_id=new_class_id;var student_id_array=_classes3[old_class_id].students;var new_student_id_array=[];for(var i=0;i<student_id_array.length;i++){if(student_id_array[i]!==_student_id){new_student_id_array.push(_student_id);}}_classes3[old_class_id].students=new_student_id_array;student_id_array=_classes3[new_class_id].students;student_id_array.push(_student_id);_classes3[new_class_id].students=student_id_array;return _objectSpread(_objectSpread({},state),{},{students:_students3,classes:_classes3});}case'UPDATE_TEACHER_PROFILE_PICTURE':{var _teacher_id=action.teacher_id,image_url=action.image_url;var _teachers2=_objectSpread({},state.teachers);_teachers2[_teacher_id].profile_picture=image_url;return _objectSpread(_objectSpread({},state),{},{teachers:_teachers2});}case'CLEAR_STATE':{return _objectSpread(_objectSpread({},state),{},{viewing_status:''});}case'CLEAR_SCHOOL_STATE':{return{isConnected:false,classes:{},pick_up_request:[],passcodeAdminId:{},passcodeTeacherId:{},teacherOnDuty:'',teachers:{},students:{},attendance:{},student_present:new Set(),student_absent:new Set(),student_unmarked:new Set(),teacher_present:new Set(),teacher_absent:new Set(),teacher_unmarked:new Set()};}default:return state;}}","map":{"version":3,"sources":["/home/caleb_lee/gina_web_app/redux/school/reducers/school.js"],"names":["initial_state","isConnected","classes","pick_up_request","admin_passcode","viewing_status","passcodeAdminId","passcodeTeacherId","teacherOnDuty","teachers","students","attendance","student_present","Set","student_absent","student_unmarked","teacher_present","teacher_absent","teacher_unmarked","school","state","action","type","admins","updated_classes","Object","keys","forEach","class_id","admin_id","passcode","teacher_id","updated_teachers","attendance_array","present","total_minutes","add","delete","absent","updated_students","student_id","attendance_id","includes","requests","status","uri","profile_picture","name","old_class_id","new_class_id","student_id_array","new_student_id_array","i","length","push","image_url"],"mappings":"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","sourcesContent":["const initial_state = {\n  isConnected: true,\n  classes: {\n    /*\n    [id]: {\n      teachers: [],\n      students: [],\n      name: ''\n    }\n    */\n  },\n  pick_up_request: [],\n  admin_passcode: '',\n  viewing_status: '',\n  passcodeAdminId: {},\n  passcodeTeacherId: {},\n  teacherOnDuty: '',\n  teachers: {\n      /*\n      [id]: {\n          name: '',\n          profile_picture: '',\n          passcode: 33,\n          present: false,\n          attendance: [attendance_id, ...]\n      }, {...}\n      */\n  },\n  students: {\n      /*\n      [id]: {\n          name: '',\n          profile_picture: '',\n          present: true,\n          wellness_id: '',\n          address: '',\n          father_phone: '',\n          mother_phone: '',\n          attendance_id: ''\n      }, {...}\n      */\n  },\n  attendance: {\n    /*\n    [id]: {\n      in_time: '',\n      out_time: '',\n      excuse_type: ''\n    }\n    */\n  },\n  student_present: new Set(),\n  student_absent: new Set(),\n  student_unmarked: new Set(),\n  teacher_present: new Set(),\n  teacher_absent: new Set(),\n  teacher_unmarked: new Set()\n}\n\nexport default function school(state = initial_state, action) {\n  switch (action.type) {\n    case 'SET_CONNECT_STATE': {\n      const { isConnected } = action\n      return {\n          ...state,\n          isConnected\n      }\n    }\n    case 'FETCH_CLASSES_SUCCESS':\n      const { classes, admin_passcode } = action\n      return {\n        ...state,\n        classes,\n        admin_passcode\n      }\n    \n    case 'FETCH_TEACHERS_SUCCESS': {\n      const { admins, teachers, classes } = action\n      const updated_classes = {...state.classes}\n      const {passcodeAdminId, passcodeTeacherId} = state\n\n      Object.keys(classes).forEach(class_id => {\n        updated_classes[class_id].teachers = classes[class_id].teachers\n      })\n\n      Object.keys(admins).forEach(admin_id => {\n        passcodeAdminId[admins[admin_id].passcode] = admin_id\n      })\n\n      Object.keys(teachers).forEach(teacher_id => {\n        passcodeTeacherId[teachers[teacher_id].passcode] = teacher_id\n      })\n\n      return {\n        ...state,\n        passcodeAdminId,\n        passcodeTeacherId,\n        // admins,\n        teachers: {\n          ...teachers,\n          ...admins\n        },\n        classes: updated_classes,\n        teacher_unmarked: new Set(Object.keys(teachers))\n      }\n    }\n\n    case 'FETCH_STUDENTS_SUCCESS': {\n      const { students, classes } = action\n      const updated_classes = {...state.classes}\n\n      Object.keys(classes).forEach(class_id => {\n        updated_classes[class_id].students = classes[class_id].students\n      })\n      \n      return {\n        ...state,\n        students,\n        classes: updated_classes,\n        student_unmarked: new Set(Object.keys(students))\n      }\n    }\n\n    case 'FETCH_TEACHER_ATTENDANCE_SUCCESS': {\n      const { attendance, teachers } = action\n      const updated_teachers = {...state.teachers}\n      const teacher_unmarked = new Set(Object.keys(state.teachers))\n      const teacher_present = new Set()\n      const teacher_absent = new Set()\n      Object.keys(teachers).forEach(teacher_id => {\n        updated_teachers[teacher_id].attendance = teachers[teacher_id].attendance_array\n        updated_teachers[teacher_id].present = teachers[teacher_id].present\n        updated_teachers[teacher_id].total_minutes = teachers[teacher_id].total_minutes\n        if (teachers[teacher_id].present) {\n          teacher_present.add(teacher_id)\n        } else {\n          teacher_absent.add(teacher_id)\n        }\n        teacher_unmarked.delete(teacher_id)\n      })\n      return {\n        ...state,\n        teachers: updated_teachers,\n        attendance: {\n          ...state.attendance,\n          ...attendance\n        },\n        teacher_present,\n        teacher_absent,\n        teacher_unmarked\n      }\n    }\n\n    case 'FETCH_STUDENT_ATTENDANCE_SUCCESS': {\n      const { attendance, students, present, absent } = action\n      const updated_students = {...state.students}\n      const student_unmarked = new Set(Object.keys(state.students))\n      Object.keys(students).forEach(student_id => {\n        updated_students[student_id].attendance_id = students[student_id]\n\n        if (present.includes(student_id) || absent.includes(student_id)) {\n          student_unmarked.delete(student_id)\n        }\n      })\n      return {\n        ...state,\n        students: updated_students,\n        attendance: {\n          ...state.attendance,\n          ...attendance\n        },\n        student_present: new Set([...present]),\n        student_absent: new Set([...absent]),\n        student_unmarked\n      }\n    }\n\n    case 'EDIT_TEACHER_ON_DUTY': {\n      const {teacher_id} = action\n      return {\n        ...state,\n        teacherOnDuty: teacher_id\n      }\n    }\n    \n    case 'ADD_PICKUP_REQUEST': {\n      const { requests } = action\n      return {\n        ...state,\n        pick_up_request: requests\n      }\n    }\n\n    case 'UPDATE_VIEWING_STATUS': {\n      const { status } = action\n      return {\n        ...state,\n        viewing_status: status\n      }\n    }\n\n    case 'UPDATE_PROFILE_PICTURE': {\n      const { student_id, uri } = action\n      const students = {...state.students}\n      students[student_id].profile_picture = uri\n      return {\n        ...state,\n        students\n      }\n    }\n\n    case 'EDIT_STUDENT_SUCCESS': {\n      const { student_id, name, old_class_id, new_class_id } = action\n      const students = {...state.students}\n      const classes = {...state.classes}\n      students[student_id].name = name\n      students[student_id].class_id = new_class_id\n\n      // remove student id from old class[id].students\n      let student_id_array = classes[old_class_id].students\n      let new_student_id_array = []\n      for(var i = 0; i < student_id_array.length; i++) {\n        if (student_id_array[i] !== student_id) {\n          new_student_id_array.push(student_id)\n        }\n      }\n      classes[old_class_id].students = new_student_id_array\n\n      // add student id to new class[id].students\n      student_id_array = classes[new_class_id].students\n      student_id_array.push(student_id)\n      classes[new_class_id].students = student_id_array\n\n      return {\n        ...state,\n        students,\n        classes\n      }\n    }\n\n    case 'UPDATE_TEACHER_PROFILE_PICTURE': {\n      const { teacher_id, image_url } = action\n      const teachers = {...state.teachers}\n      teachers[teacher_id].profile_picture = image_url\n      return {\n        ...state,\n        teachers\n      }\n    }\n\n    case 'CLEAR_STATE': {\n      return {\n        ...state,\n        viewing_status: ''\n      }\n    }\n  \n    case 'CLEAR_SCHOOL_STATE': {\n      return {\n        isConnected: false,\n        classes: {},\n        pick_up_request: [],\n        passcodeAdminId: {},\n        passcodeTeacherId: {},\n        teacherOnDuty: '',\n        teachers: {},\n        students: {},\n        attendance: {},\n        student_present: new Set(),\n        student_absent: new Set(),\n        student_unmarked: new Set(),\n        teacher_present: new Set(),\n        teacher_absent: new Set(),\n        teacher_unmarked: new Set()\n      }\n    }\n    \n    default:\n        return state\n  }\n\n}"]},"metadata":{},"sourceType":"module"}