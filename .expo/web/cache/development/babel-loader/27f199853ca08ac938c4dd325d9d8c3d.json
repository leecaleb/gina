{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nexport default function medicationrequests() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {\n    requests: {},\n    unfinished: [],\n    finished: []\n  };\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case 'INITIALIZE_REQUESTS':\n      {\n        var requests = action.requests,\n            finished = action.finished,\n            unfinished = action.unfinished;\n        return _objectSpread(_objectSpread({}, state), {}, {\n          requests: requests,\n          finished: finished,\n          unfinished: unfinished\n        });\n      }\n\n    case 'FILL_MED_REQUEST':\n      {\n        var newState = _objectSpread({}, state);\n\n        var _unfinished = state.unfinished;\n        var new_unfinished = [];\n        newState.requests[action.request_id].administered = true;\n        newState.finished = [].concat(_toConsumableArray(state.finished), [action.request_id]);\n\n        for (var i = 0; i < _unfinished.length; i++) {\n          if (_unfinished[i] !== action.request_id) {\n            new_unfinished.push(_unfinished[i]);\n          }\n        }\n\n        newState.unfinished = new_unfinished;\n        return newState;\n      }\n\n    case 'CLEAR_STATE':\n      {\n        return {\n          requests: {},\n          unfinished: [],\n          finished: []\n        };\n      }\n\n    default:\n      return state;\n  }\n}","map":{"version":3,"sources":["/home/caleb_lee/gina_web_app/redux/school/reducers/medicationrequests.js"],"names":["medicationrequests","state","requests","unfinished","finished","action","type","newState","new_unfinished","request_id","administered","i","length","push"],"mappings":";;;;;;;AAAA,eAAe,SAASA,kBAAT,GAkBJ;AAAA,MAlBgCC,KAkBhC,uEAlBwC;AAC/CC,IAAAA,QAAQ,EAAE,EADqC;AAgB/CC,IAAAA,UAAU,EAAE,EAhBmC;AAiB/CC,IAAAA,QAAQ,EAAE;AAjBqC,GAkBxC;AAAA,MAARC,MAAQ;;AACP,UAAQA,MAAM,CAACC,IAAf;AACI,SAAK,qBAAL;AAA2B;AAAA,YACfJ,QADe,GACmBG,MADnB,CACfH,QADe;AAAA,YACLE,QADK,GACmBC,MADnB,CACLD,QADK;AAAA,YACKD,UADL,GACmBE,MADnB,CACKF,UADL;AAEvB,+CACOF,KADP;AAEIC,UAAAA,QAAQ,EAARA,QAFJ;AAGIE,UAAAA,QAAQ,EAARA,QAHJ;AAIID,UAAAA,UAAU,EAAVA;AAJJ;AAMH;;AAED,SAAK,kBAAL;AAAwB;AACpB,YAAMI,QAAQ,qBAAQN,KAAR,CAAd;;AADoB,YAEZE,WAFY,GAEGF,KAFH,CAEZE,UAFY;AAGpB,YAAIK,cAAc,GAAG,EAArB;AACAD,QAAAA,QAAQ,CAACL,QAAT,CAAkBG,MAAM,CAACI,UAAzB,EAAqCC,YAArC,GAAoD,IAApD;AACAH,QAAAA,QAAQ,CAACH,QAAT,gCAAwBH,KAAK,CAACG,QAA9B,IAAwCC,MAAM,CAACI,UAA/C;;AAEA,aAAK,IAAIE,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGR,WAAU,CAACS,MAA/B,EAAuCD,CAAC,EAAxC,EAA4C;AACxC,cAAIR,WAAU,CAACQ,CAAD,CAAV,KAAkBN,MAAM,CAACI,UAA7B,EAAyC;AACrCD,YAAAA,cAAc,CAACK,IAAf,CAAoBV,WAAU,CAACQ,CAAD,CAA9B;AACH;AACJ;;AACDJ,QAAAA,QAAQ,CAACJ,UAAT,GAAsBK,cAAtB;AACA,eAAOD,QAAP;AACH;;AAED,SAAK,aAAL;AAAoB;AAChB,eAAO;AACHL,UAAAA,QAAQ,EAAE,EADP;AAEHC,UAAAA,UAAU,EAAE,EAFT;AAGHC,UAAAA,QAAQ,EAAE;AAHP,SAAP;AAKH;;AAED;AACI,aAAOH,KAAP;AApCR;AAsCH","sourcesContent":["export default function medicationrequests(state = {\n    requests: {\n        // [request_id]: {\n        //     'student_id': student_id,\n        //     'timestamp': timestamp.strftime('%B %d, %Y %H:%M:%S'),\n        //     'medication': {\n        //         '藥粉': None if 藥粉 == 'None' else 藥粉,\n        //         'need_refrigeration': need_refrigeration == 'True',\n        //         '藥水': None if 藥水 == 'None' else 藥水,\n        //         '藥膏': None if 藥膏 == 'None' else 藥膏\n        //     },\n        //     'note': note,\n        //     'administered': administered,\n        //     'teacher_id': teacher_id\n        // }, {...}\n    },\n    unfinished: [],\n    finished: []\n}, action) {\n    switch (action.type) {\n        case 'INITIALIZE_REQUESTS':{\n            const { requests, finished, unfinished} = action\n            return {\n                ...state,\n                requests,\n                finished,\n                unfinished\n            }\n        }\n        \n        case 'FILL_MED_REQUEST':{\n            const newState = { ...state }\n            const { unfinished } = state\n            var new_unfinished = []\n            newState.requests[action.request_id].administered = true\n            newState.finished = [...state.finished, action.request_id]\n\n            for (var i = 0; i < unfinished.length; i++) {\n                if (unfinished[i] !== action.request_id) {\n                    new_unfinished.push(unfinished[i])\n                }\n            }\n            newState.unfinished = new_unfinished\n            return newState\n        }\n        \n        case 'CLEAR_STATE': {\n            return {\n                requests: {},\n                unfinished: [],\n                finished: []\n            }\n        }\n\n        default:\n            return state\n    }\n}"]},"metadata":{},"sourceType":"module"}