{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nvar _jsxFileName = \"/home/caleb_lee/gina_web_app/components/parent/timemodal.js\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function () { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport TouchableHighlight from \"react-native-web/dist/exports/TouchableHighlight\";\nimport Dimensions from \"react-native-web/dist/exports/Dimensions\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport DatePicker from 'react-datepicker';\nimport \"react-datepicker/dist/react-datepicker.css\";\n\nvar _Dimensions$get = Dimensions.get('window'),\n    width = _Dimensions$get.width;\n\nvar TimeModal = function (_React$Component) {\n  _inherits(TimeModal, _React$Component);\n\n  var _super = _createSuper(TimeModal);\n\n  function TimeModal(props) {\n    var _this;\n\n    _classCallCheck(this, TimeModal);\n\n    _this = _super.call(this, props);\n\n    _this.onChange = function (date) {\n      console.log(date);\n    };\n\n    _this.isWeekday = function (date) {\n      var special_date = new Date('June 20, 2020');\n      var day = date.getDay();\n      return day !== 0 && day !== 6 || date.toDateString() === special_date.toDateString();\n    };\n\n    _this.state = {\n      datetime: new Date(),\n      isLoading: true\n    };\n    return _this;\n  }\n\n  _createClass(TimeModal, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var start_date = this.props.start_date;\n      this.setState({\n        datetime: start_date,\n        isLoading: false\n      });\n    }\n  }, {\n    key: \"isIOS\",\n    value: function isIOS() {\n      if (Platform.OS === 'ios') {\n        return true;\n      } else return false;\n    }\n  }, {\n    key: \"setDate\",\n    value: function setDate(datetime) {\n      if (this.isIOS()) {\n        this.iosSetDate(datetime);\n      } else {\n        this.androidSetDate(datetime);\n      }\n    }\n  }, {\n    key: \"iosSetDate\",\n    value: function iosSetDate(datetime) {\n      this.setState({\n        datetime: datetime\n      });\n    }\n  }, {\n    key: \"androidSetDate\",\n    value: function androidSetDate(datetime) {\n      if (datetime !== undefined) {\n        this.props.selectDatetimeConfirm(datetime);\n      } else {\n        this.props.hideModal();\n      }\n    }\n  }, {\n    key: \"selectDatetimeConfirm\",\n    value: function selectDatetimeConfirm(date) {\n      this.props.selectDatetimeConfirm(date);\n      this.props.hideModal();\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var _this$props = this.props,\n          datetime_type = _this$props.datetime_type,\n          minDatetime = _this$props.minDatetime,\n          maxDatetime = _this$props.maxDatetime,\n          minTime = _this$props.minTime,\n          maxTime = _this$props.maxTime,\n          paddingVertical = _this$props.paddingVertical;\n      var _this$state = this.state,\n          datetime = _this$state.datetime,\n          isLoading = _this$state.isLoading;\n\n      if (isLoading) {\n        return null;\n      }\n\n      return React.createElement(TouchableHighlight, {\n        style: {\n          width: '100%',\n          height: '100%',\n          zIndex: 2,\n          position: 'absolute',\n          paddingVertical: paddingVertical,\n          alignItems: 'center',\n          backgroundColor: 'rgba(0,0,0,0.7)'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 87,\n          columnNumber: 13\n        }\n      }, React.createElement(View, {\n        style: {},\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 100,\n          columnNumber: 17\n        }\n      }, datetime_type === 'date' && React.createElement(DatePicker, {\n        onChange: function onChange(date) {\n          return _this2.selectDatetimeConfirm(date);\n        },\n        inline: true,\n        selected: datetime,\n        minDate: new Date(minDatetime),\n        maxDate: new Date(maxDatetime),\n        onClickOutside: function onClickOutside() {\n          return _this2.props.hideModal();\n        },\n        filterDate: this.isWeekday,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 102,\n          columnNumber: 25\n        }\n      }), datetime_type === 'time' && React.createElement(DatePicker, {\n        onChange: function onChange(time) {\n          return _this2.selectDatetimeConfirm(time);\n        },\n        showTimeSelect: true,\n        showTimeSelectOnly: true,\n        timeIntervals: 30,\n        timeCaption: \"Time\",\n        dateFormat: \"h:mm aa\",\n        selected: datetime,\n        minTime: minTime,\n        maxTime: maxTime,\n        onClickOutside: function onClickOutside() {\n          return _this2.props.hideModal();\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 114,\n          columnNumber: 25\n        }\n      })));\n    }\n  }]);\n\n  return TimeModal;\n}(React.Component);\n\nexport { TimeModal as default };","map":{"version":3,"sources":["/home/caleb_lee/gina_web_app/components/parent/timemodal.js"],"names":["React","DatePicker","Dimensions","get","width","TimeModal","props","onChange","date","console","log","isWeekday","special_date","Date","day","getDay","toDateString","state","datetime","isLoading","start_date","setState","Platform","OS","isIOS","iosSetDate","androidSetDate","undefined","selectDatetimeConfirm","hideModal","datetime_type","minDatetime","maxDatetime","minTime","maxTime","paddingVertical","height","zIndex","position","alignItems","backgroundColor","time","Component"],"mappings":";;;;;;;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;;;;;;AAOA,OAAOC,UAAP,MAAuB,kBAAvB;AACA,OAAO,4CAAP;;sBAEkBC,UAAU,CAACC,GAAX,CAAe,QAAf,C;IAAVC,K,mBAAAA,K;;IAEaC,S;;;;;AACjB,qBAAYC,KAAZ,EAAmB;AAAA;;AAAA;;AACf,8BAAMA,KAAN;;AADe,UAwDnBC,QAxDmB,GAwDR,UAAAC,IAAI,EAAI;AACfC,MAAAA,OAAO,CAACC,GAAR,CAAYF,IAAZ;AACH,KA1DkB;;AAAA,UA4DnBG,SA5DmB,GA4DP,UAAAH,IAAI,EAAI;AAChB,UAAMI,YAAY,GAAG,IAAIC,IAAJ,CAAS,eAAT,CAArB;AACA,UAAMC,GAAG,GAAGN,IAAI,CAACO,MAAL,EAAZ;AACA,aAAQD,GAAG,KAAK,CAAR,IAAaA,GAAG,KAAK,CAAtB,IAA4BN,IAAI,CAACQ,YAAL,OAAwBJ,YAAY,CAACI,YAAb,EAA3D;AACH,KAhEkB;;AAEf,UAAKC,KAAL,GAAa;AACTC,MAAAA,QAAQ,EAAE,IAAIL,IAAJ,EADD;AAETM,MAAAA,SAAS,EAAE;AAFF,KAAb;AAFe;AAOlB;;;;wCAEmB;AAAA,UACRC,UADQ,GACO,KAAKd,KADZ,CACRc,UADQ;AAEhB,WAAKC,QAAL,CAAc;AACVH,QAAAA,QAAQ,EAAEE,UADA;AAEVD,QAAAA,SAAS,EAAE;AAFD,OAAd;AAIH;;;4BAEO;AACJ,UAAIG,QAAQ,CAACC,EAAT,KAAgB,KAApB,EAA2B;AACzB,eAAO,IAAP;AACD,OAFD,MAEO,OAAO,KAAP;AACR;;;4BAEKL,Q,EAAU;AACd,UAAI,KAAKM,KAAL,EAAJ,EAAkB;AACd,aAAKC,UAAL,CAAgBP,QAAhB;AACH,OAFD,MAEO;AACH,aAAKQ,cAAL,CAAoBR,QAApB;AACH;AAMJ;;;+BAEUA,Q,EAAU;AACjB,WAAKG,QAAL,CAAc;AAACH,QAAAA,QAAQ,EAARA;AAAD,OAAd;AACH;;;mCAEcA,Q,EAAU;AACrB,UAAIA,QAAQ,KAAKS,SAAjB,EAA4B;AACxB,aAAKrB,KAAL,CAAWsB,qBAAX,CAAiCV,QAAjC;AAEH,OAHD,MAGO;AACH,aAAKZ,KAAL,CAAWuB,SAAX;AACH;AAEJ;;;0CAEqBrB,I,EAAM;AAExB,WAAKF,KAAL,CAAWsB,qBAAX,CAAiCpB,IAAjC;AACA,WAAKF,KAAL,CAAWuB,SAAX;AACH;;;6BAYQ;AAAA;;AAAA,wBACkF,KAAKvB,KADvF;AAAA,UACGwB,aADH,eACGA,aADH;AAAA,UACkBC,WADlB,eACkBA,WADlB;AAAA,UAC+BC,WAD/B,eAC+BA,WAD/B;AAAA,UAC4CC,OAD5C,eAC4CA,OAD5C;AAAA,UACqDC,OADrD,eACqDA,OADrD;AAAA,UAC8DC,eAD9D,eAC8DA,eAD9D;AAAA,wBAE2B,KAAKlB,KAFhC;AAAA,UAEGC,QAFH,eAEGA,QAFH;AAAA,UAEaC,SAFb,eAEaA,SAFb;;AAGL,UAAIA,SAAJ,EAAe;AACX,eAAO,IAAP;AACH;;AACD,aACI,oBAAC,kBAAD;AACI,QAAA,KAAK,EAAE;AACHf,UAAAA,KAAK,EAAE,MADJ;AAEHgC,UAAAA,MAAM,EAAE,MAFL;AAGHC,UAAAA,MAAM,EAAE,CAHL;AAIHC,UAAAA,QAAQ,EAAE,UAJP;AAKHH,UAAAA,eAAe,EAAfA,eALG;AAOHI,UAAAA,UAAU,EAAE,QAPT;AAQHC,UAAAA,eAAe,EAAE;AARd,SADX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAaI,oBAAC,IAAD;AAAM,QAAA,KAAK,EAAE,EAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACKV,aAAa,KAAK,MAAlB,IACG,oBAAC,UAAD;AACI,QAAA,QAAQ,EAAE,kBAACtB,IAAD;AAAA,iBAAU,MAAI,CAACoB,qBAAL,CAA2BpB,IAA3B,CAAV;AAAA,SADd;AAEI,QAAA,MAAM,MAFV;AAGI,QAAA,QAAQ,EAAEU,QAHd;AAII,QAAA,OAAO,EAAE,IAAIL,IAAJ,CAASkB,WAAT,CAJb;AAKI,QAAA,OAAO,EAAE,IAAIlB,IAAJ,CAASmB,WAAT,CALb;AAMI,QAAA,cAAc,EAAE;AAAA,iBAAM,MAAI,CAAC1B,KAAL,CAAWuB,SAAX,EAAN;AAAA,SANpB;AAOI,QAAA,UAAU,EAAE,KAAKlB,SAPrB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAFR,EAaKmB,aAAa,KAAK,MAAlB,IACG,oBAAC,UAAD;AACI,QAAA,QAAQ,EAAE,kBAACW,IAAD;AAAA,iBAAU,MAAI,CAACb,qBAAL,CAA2Ba,IAA3B,CAAV;AAAA,SADd;AAEI,QAAA,cAAc,MAFlB;AAGI,QAAA,kBAAkB,MAHtB;AAII,QAAA,aAAa,EAAE,EAJnB;AAKI,QAAA,WAAW,EAAC,MALhB;AAMI,QAAA,UAAU,EAAC,SANf;AAOI,QAAA,QAAQ,EAAEvB,QAPd;AAQI,QAAA,OAAO,EAAEe,OARb;AASI,QAAA,OAAO,EAAEC,OATb;AAUI,QAAA,cAAc,EAAE;AAAA,iBAAM,MAAI,CAAC5B,KAAL,CAAWuB,SAAX,EAAN;AAAA,SAVpB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAdR,CAbJ,CADJ;AA4CH;;;;EArHkC7B,KAAK,CAAC0C,S;;SAAxBrC,S","sourcesContent":["import React from 'react'\nimport { \n    View, \n    Text,\n    TouchableHighlight,\n    Dimensions,\n    Platform } from 'react-native'\nimport DatePicker from 'react-datepicker'\nimport \"react-datepicker/dist/react-datepicker.css\"\n\nconst { width } = Dimensions.get('window')\n\nexport default class TimeModal extends React.Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            datetime: new Date(),\n            isLoading: true\n            // max_date: (new Date()).setDate((new Date()).getDate() + 7)\n        }\n    }\n\n    componentDidMount() {\n        const { start_date } = this.props\n        this.setState({\n            datetime: start_date,\n            isLoading: false\n        })\n    }\n\n    isIOS() {\n        if (Platform.OS === 'ios') {\n          return true\n        } else return false\n      }\n\n    setDate(datetime) {\n        if (this.isIOS()) {\n            this.iosSetDate(datetime)\n        } else {\n            this.androidSetDate(datetime)\n        }\n        // if (datetime !== undefined) {\n        //     this.setState({datetime})\n        // } else {\n        //     this.props.hideModal()\n        // }\n    }\n\n    iosSetDate(datetime) {\n        this.setState({datetime})\n    }\n\n    androidSetDate(datetime) {\n        if (datetime !== undefined) {\n            this.props.selectDatetimeConfirm(datetime)\n        //     this.props.hideModal()\n        } else {\n            this.props.hideModal()\n        }\n        // this.props.hideModal()\n    }\n\n    selectDatetimeConfirm(date) {\n        // const { datetime } = this.state\n        this.props.selectDatetimeConfirm(date)\n        this.props.hideModal()\n    }\n\n    onChange = date => {\n        console.log(date)\n    }\n    \n    isWeekday = date => {\n        const special_date = new Date('June 20, 2020')\n        const day = date.getDay()\n        return (day !== 0 && day !== 6) || date.toDateString() === special_date.toDateString();\n    };\n\n    render() {\n        const { datetime_type, minDatetime, maxDatetime, minTime, maxTime, paddingVertical } = this.props\n        const { datetime, isLoading } = this.state\n        if (isLoading) {\n            return null\n        }\n        return (\n            <TouchableHighlight\n                style={{ \n                    width: '100%',\n                    height: '100%', \n                    zIndex: 2,\n                    position: 'absolute',\n                    paddingVertical,\n                    // justifyContent: 'center', \n                    alignItems: 'center', \n                    backgroundColor: 'rgba(0,0,0,0.7)' \n                }}\n                // onPress={() => this.props.hideModal()}\n            >\n                <View style={{ }}>\n                    {datetime_type === 'date' &&\n                        <DatePicker\n                            onChange={(date) => this.selectDatetimeConfirm(date)}\n                            inline\n                            selected={datetime}\n                            minDate={new Date(minDatetime)}\n                            maxDate={new Date(maxDatetime)}\n                            onClickOutside={() => this.props.hideModal()}\n                            filterDate={this.isWeekday}\n                        />\n                    }\n\n                    {datetime_type === 'time' && \n                        <DatePicker\n                            onChange={(time) => this.selectDatetimeConfirm(time)}\n                            showTimeSelect\n                            showTimeSelectOnly\n                            timeIntervals={30}\n                            timeCaption=\"Time\"\n                            dateFormat=\"h:mm aa\"\n                            selected={datetime}\n                            minTime={minTime}\n                            maxTime={maxTime}\n                            onClickOutside={() => this.props.hideModal()}\n                        />\n                    }\n                </View>\n            </TouchableHighlight>\n        )\n    }\n}"]},"metadata":{},"sourceType":"module"}