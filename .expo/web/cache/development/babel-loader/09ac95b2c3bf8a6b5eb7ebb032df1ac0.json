{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nvar initial_state = {\n  loaded: false,\n  by_student_id: {},\n  records: {\n    by_id: {},\n    all_id: new Set()\n  },\n  newDataForCreate: new Set(),\n  oldDataForEdit: new Set(),\n  dataForRemoval: new Set(),\n  errMessage: ''\n};\nexport default function milk() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initial_state;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case 'INITIALIZE_CLASS':\n      {\n        var by_student_id = {};\n        action.students.forEach(function (student) {\n          var id = student.id;\n          by_student_id[id] = [];\n        });\n        return _objectSpread(_objectSpread({}, state), {}, {\n          by_student_id: by_student_id\n        });\n      }\n\n    case 'FETCH_CLASS_MILK_DATA':\n      {\n        var _action$milkData = action.milkData,\n            _by_student_id = _action$milkData.by_student_id,\n            records = _action$milkData.records;\n        return _objectSpread(_objectSpread({}, state), {}, {\n          by_student_id: _objectSpread(_objectSpread({}, state.by_student_id), _by_student_id),\n          records: {\n            by_id: _objectSpread(_objectSpread({}, state.records.by_id), records.by_id),\n            all_id: new Set([].concat(_toConsumableArray(state.records.all_id), _toConsumableArray(records.all_id)))\n          }\n        });\n      }\n\n    case 'FETCH_CLASS_MILK_DATA_SUCCESS':\n      {}\n\n    case 'ADD_MILK_RECORD':\n      {\n        var newState = _objectSpread({}, state);\n\n        var student_id = action.student_id;\n        var record_id = state.newDataForCreate.size;\n        newState.records.by_id[record_id] = {\n          student_id: student_id,\n          time: new Date(),\n          amount: '',\n          teacher_id: ''\n        };\n        newState.by_student_id[student_id].push(record_id);\n        newState.newDataForCreate.add(record_id);\n        return newState;\n      }\n\n    case 'EDIT_MILK_AMOUNT':\n      {\n        var _newState = _objectSpread({}, state);\n\n        var _record_id = action.record_id,\n            milk_amount = action.milk_amount,\n            teacher_id = action.teacher_id;\n        _newState.records.by_id[_record_id].amount = milk_amount;\n        _newState.records.by_id[_record_id].teacher_id = teacher_id;\n\n        if (!_newState.newDataForCreate.has(_record_id)) {\n          _newState.oldDataForEdit.add(_record_id);\n        }\n\n        return _newState;\n      }\n\n    case 'EDIT_MILK_TIME':\n      {\n        var _newState2 = _objectSpread({}, state);\n\n        var _record_id2 = action.record_id,\n            date_time = action.date_time,\n            _teacher_id = action.teacher_id;\n        _newState2.records.by_id[_record_id2].time = date_time;\n        _newState2.records.by_id[_record_id2].teacher_id = _teacher_id;\n\n        if (!_newState2.newDataForCreate.has(_record_id2)) {\n          _newState2.oldDataForEdit.add(_record_id2);\n        }\n\n        return _newState2;\n      }\n\n    case 'CREATE_DATA_SUCCESS':\n      {\n        return _objectSpread(_objectSpread({}, state), {}, {\n          newDataForCreate: new Set()\n        });\n      }\n\n    case 'CREATE_DATA_FAIL':\n      {\n        return _objectSpread(_objectSpread({}, state), {}, {\n          errMessage: action.errMessage\n        });\n      }\n\n    case 'EDIT_DATA_SUCCESS':\n      {\n        return _objectSpread(_objectSpread({}, state), {}, {\n          oldDataForEdit: new Set()\n        });\n      }\n\n    case 'EDIT_DATA_FAIL':\n      {\n        return _objectSpread(_objectSpread({}, state), {}, {\n          errMessage: action.errMessage\n        });\n      }\n\n    case 'REMOVE_RECORD':\n      {\n        var _student_id = action.student_id,\n            _record_id3 = action.record_id;\n\n        var _newState3 = _objectSpread({}, state);\n\n        var record_id_index = state.by_student_id[_student_id].indexOf(_record_id3);\n\n        if (record_id_index > -1) {\n          _newState3.by_student_id[_student_id].splice(record_id_index, 1);\n        }\n\n        if (_newState3.oldDataForEdit.has(_record_id3)) {\n          _newState3.oldDataForEdit.delete(_record_id3);\n        }\n\n        if (_newState3.newDataForCreate.has(_record_id3)) {\n          _newState3.newDataForCreate.delete(_record_id3);\n        } else {\n          _newState3.dataForRemoval.add(_record_id3);\n        }\n\n        return _newState3;\n      }\n\n    case 'REMOVE_MILK_RECORD_SUCCESS':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        dataForRemoval: new Set()\n      });\n\n    case 'REMOVE_MILK_RECORD_FAIL':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        errMessage: 'Error occured while removing milk record, please try again'\n      });\n\n    case 'CLEAR_STATE':\n      return {\n        loaded: false,\n        by_student_id: {},\n        records: {\n          by_id: {},\n          all_id: new Set()\n        },\n        newDataForCreate: new Set(),\n        oldDataForEdit: new Set(),\n        dataForRemoval: new Set(),\n        errMessage: ''\n      };\n\n    default:\n      return state;\n  }\n}","map":{"version":3,"sources":["/home/caleb_lee/gina_web_app/redux/school/reducers/milk.js"],"names":["initial_state","loaded","by_student_id","records","by_id","all_id","Set","newDataForCreate","oldDataForEdit","dataForRemoval","errMessage","milk","state","action","type","students","forEach","student","id","milkData","newState","student_id","record_id","size","time","Date","amount","teacher_id","push","add","milk_amount","has","date_time","record_id_index","indexOf","splice","delete"],"mappings":"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","sourcesContent":["var initial_state = {\n    /* TODO: flatten the structure like sleep record for better separation of post and put (?)\n            -why separate post and put instead of upsert in lambda?\n            -possible conflict: if using student_id/date/time as uniqueness delimeter,\n                                edited records with a new time set gets INSERTed into database\n            -solution: fetched data doesn't get added into newDataForCreate set\n            -problem#2: how do we treat initial rendering of page; will each student gets a placeholding, empty record\n    */\n    loaded: false,\n    by_student_id: {\n        // {student_id}: [{record_id}, {...}]\n    },\n    records: {\n        by_id: {\n            /*{ record_id }: {\n                student_id,\n                time,\n                amount,\n                teacher_id\n            }*/\n        },\n        all_id: new Set()\n    },\n    // pendingUpdates: new Set(),\n    newDataForCreate: new Set(),\n    oldDataForEdit: new Set(),\n    dataForRemoval: new Set(),\n    errMessage: ''\n}\n\nexport default function milk(state = initial_state, action) {\n    switch (action.type) {\n        case 'INITIALIZE_CLASS': {\n            var by_student_id = {}\n            action.students.forEach(student => {\n                const { id } = student\n                by_student_id[id] = []\n            })\n            // initial_state = {\n            //     ...state,\n            //     by_student_id\n            // }\n            return {\n                ...state,\n                by_student_id\n            }\n        }\n        \n        case 'FETCH_CLASS_MILK_DATA': {\n            const { by_student_id, records } = action.milkData\n            \n            return {\n                ...state,\n                by_student_id: {\n                    ...state.by_student_id,\n                    ...by_student_id\n                },\n                records: {\n                    by_id: {\n                        ...state.records.by_id,\n                        ...records.by_id\n                    },\n                    all_id: new Set([\n                        ...state.records.all_id,\n                        ...records.all_id\n                    ])\n                }\n            }\n        }\n\n        case 'FETCH_CLASS_MILK_DATA_SUCCESS': {\n\n        } \n\n        case 'ADD_MILK_RECORD': {\n            const newState = { ...state }\n            const { student_id } = action\n            const record_id = state.newDataForCreate.size\n            newState.records.by_id[record_id] = {\n                student_id,\n                time: new Date,\n                amount: '',\n                teacher_id: ''\n            }\n            newState.by_student_id[student_id].push(record_id)\n            newState.newDataForCreate.add(record_id)\n            return newState\n        }\n\n        case 'EDIT_MILK_AMOUNT': {\n            const newState = { ...state }\n            const { record_id, milk_amount, teacher_id } = action\n            newState.records.by_id[record_id].amount = milk_amount\n            newState.records.by_id[record_id].teacher_id = teacher_id\n            if (!newState.newDataForCreate.has(record_id)) {\n                newState.oldDataForEdit.add(record_id)\n            }\n            return newState\n        }\n\n        case 'EDIT_MILK_TIME': {\n            const newState = { ...state }\n            const { record_id, date_time, teacher_id } = action\n            newState.records.by_id[record_id].time = date_time\n            newState.records.by_id[record_id].teacher_id = teacher_id\n            if (!newState.newDataForCreate.has(record_id)) {\n                newState.oldDataForEdit.add(record_id)\n            }\n            return newState\n        }\n            \n        case 'CREATE_DATA_SUCCESS': {\n            return {\n                ...state,\n                newDataForCreate: new Set()\n            }\n        }\n            \n        case 'CREATE_DATA_FAIL': {\n            return {\n                ...state,\n                errMessage: action.errMessage\n            }\n        }\n            \n        case 'EDIT_DATA_SUCCESS': {\n            return {\n                ...state,\n                oldDataForEdit: new Set()\n            }\n        }\n            \n        case 'EDIT_DATA_FAIL': {\n            return {\n                ...state,\n                errMessage: action.errMessage\n            }\n        }\n\n        case 'REMOVE_RECORD': {\n            const { student_id, record_id } = action\n            const newState = { ...state }\n            let record_id_index = state.by_student_id[student_id].indexOf(record_id)\n            if (record_id_index > -1) {\n                newState.by_student_id[student_id].splice(record_id_index, 1)\n            }\n\n            if (newState.oldDataForEdit.has(record_id)) {\n                newState.oldDataForEdit.delete(record_id)\n            }\n\n            if (newState.newDataForCreate.has(record_id)) {\n                newState.newDataForCreate.delete(record_id)\n            } else {\n                newState.dataForRemoval.add(record_id)\n            }\n\n            return newState\n        }\n            \n        case 'REMOVE_MILK_RECORD_SUCCESS':\n            return {\n                ...state,\n                dataForRemoval: new Set()\n            }\n        \n        case 'REMOVE_MILK_RECORD_FAIL':\n            return {\n                ...state,\n                errMessage: 'Error occured while removing milk record, please try again'\n            }\n        \n        case 'CLEAR_STATE':\n            return {\n                loaded: false,\n                by_student_id: {},\n                records: {\n                    by_id: {},\n                    all_id: new Set()\n                },\n                newDataForCreate: new Set(),\n                oldDataForEdit: new Set(),\n                dataForRemoval: new Set(),\n                errMessage: ''\n            }\n\n        default:\n            return state\n    }\n}"]},"metadata":{},"sourceType":"module"}