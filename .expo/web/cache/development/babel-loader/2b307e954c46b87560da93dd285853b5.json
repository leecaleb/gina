{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nvar initial_state = {\n  initialized: false,\n  present: new Set(),\n  absent: new Set(),\n  unmarked: new Set(),\n  attendance: {}\n};\nexport default function attendance() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initial_state;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case 'MAKR_DISMISS':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        attendance: _objectSpread(_objectSpread({}, state.attendance), {}, _defineProperty({}, action.student_id, _objectSpread(_objectSpread({}, state.attendance[action.student_id]), {}, {\n          present: false,\n          out_time: action.out_time\n        })))\n      });\n\n    case 'MARK_ABSENT':\n      state.unmarked.delete(action.student_id);\n      return _objectSpread(_objectSpread({}, state), {}, {\n        absent: new Set([].concat(_toConsumableArray(state.absent), [action.student_id])),\n        unmarked: state.unmarked,\n        attendance: _objectSpread(_objectSpread({}, state.attendance), {}, _defineProperty({}, action.student_id, _objectSpread(_objectSpread({}, state.attendance[action.student_id]), {}, {\n          excuse_type: action.excuse_type\n        })))\n      });\n\n    case 'CLEAR_STATE':\n      return {\n        initialized: false,\n        present: new Set(),\n        absent: new Set(),\n        unmarked: new Set(),\n        attendance: {}\n      };\n\n    default:\n      return state;\n  }\n}","map":{"version":3,"sources":["/home/caleb_lee/gina_web_app/redux/school/reducers/attendance.js"],"names":["initial_state","initialized","present","Set","absent","unmarked","attendance","state","action","type","student_id","out_time","delete","excuse_type"],"mappings":";;;;;;;AAAA,IAAIA,aAAa,GAAG;AAChBC,EAAAA,WAAW,EAAE,KADG;AAEhBC,EAAAA,OAAO,EAAE,IAAIC,GAAJ,EAFO;AAGhBC,EAAAA,MAAM,EAAE,IAAID,GAAJ,EAHQ;AAIhBE,EAAAA,QAAQ,EAAE,IAAIF,GAAJ,EAJM;AAKhBG,EAAAA,UAAU,EAAE;AALI,CAApB;AAoBA,eAAe,SAASA,UAAT,GAAmD;AAAA,MAA/BC,KAA+B,uEAAvBP,aAAuB;AAAA,MAARQ,MAAQ;;AAC9D,UAAQA,MAAM,CAACC,IAAf;AAkCI,SAAK,cAAL;AACI,6CACOF,KADP;AAEID,QAAAA,UAAU,kCACHC,KAAK,CAACD,UADH,2BAELE,MAAM,CAACE,UAFF,kCAGCH,KAAK,CAACD,UAAN,CAAiBE,MAAM,CAACE,UAAxB,CAHD;AAIFR,UAAAA,OAAO,EAAE,KAJP;AAKFS,UAAAA,QAAQ,EAAEH,MAAM,CAACG;AALf;AAFd;;AAYJ,SAAK,aAAL;AAEIJ,MAAAA,KAAK,CAACF,QAAN,CAAeO,MAAf,CAAsBJ,MAAM,CAACE,UAA7B;AACA,6CACOH,KADP;AAEIH,QAAAA,MAAM,EAAE,IAAID,GAAJ,8BAAYI,KAAK,CAACH,MAAlB,IAA0BI,MAAM,CAACE,UAAjC,GAFZ;AAGIL,QAAAA,QAAQ,EAAEE,KAAK,CAACF,QAHpB;AAIIC,QAAAA,UAAU,kCACHC,KAAK,CAACD,UADH,2BAELE,MAAM,CAACE,UAFF,kCAGCH,KAAK,CAACD,UAAN,CAAiBE,MAAM,CAACE,UAAxB,CAHD;AAIFG,UAAAA,WAAW,EAAEL,MAAM,CAACK;AAJlB;AAJd;;AAaJ,SAAK,aAAL;AACI,aAAO;AACHZ,QAAAA,WAAW,EAAE,KADV;AAEHC,QAAAA,OAAO,EAAE,IAAIC,GAAJ,EAFN;AAGHC,QAAAA,MAAM,EAAE,IAAID,GAAJ,EAHL;AAIHE,QAAAA,QAAQ,EAAE,IAAIF,GAAJ,EAJP;AAKHG,QAAAA,UAAU,EAAE;AALT,OAAP;;AAOJ;AACI,aAAOC,KAAP;AAxER;AA0EH","sourcesContent":["var initial_state = {\n    initialized: false,\n    present: new Set(),// student_A_id\n    absent: new Set(), // student_B_id\n    unmarked: new Set(),\n    attendance: {\n        /*\n        {student_A_id}: {\n            present: true,\n            in_time: [Date],\n            out_time: [Date]\n        },\n        {student_B_id}: {\n            present: false,\n            excuse_type: \"fever\"\n        }\n        */\n    }\n}\n\nexport default function attendance(state = initial_state, action) {\n    switch (action.type) {\n        // case 'INITIALIZE_CLASS':\n        //     var attendance = {}\n        //     var unmarked = new Set()\n        //     action.students.forEach(student => {\n        //         const { id } = student\n        //         unmarked.add(id)\n        //         attendance[id] = {\n        //             present: false\n        //         }\n        //     })\n        //     return {\n        //         ...state,\n        //         initialized: true,\n        //         unmarked: unmarked,\n        //         attendance: attendance\n        //     }\n\n        // case 'MARK_PRESENT':\n        //     // student_id, in_time\n        //     state.unmarked.delete(action.student_id)\n        //     return {\n        //         ...state,\n        //         present: new Set([...state.present, action.student_id]),\n        //         unmarked: state.unmarked,\n        //         attendance: {\n        //             ...state.attendance,\n        //             [action.student_id]: {\n        //                 present: true,\n        //                 in_time: action.in_time\n        //             }\n        //         }\n        //     }\n        \n        case 'MAKR_DISMISS':\n            return {\n                ...state,\n                attendance: {\n                    ...state.attendance,\n                    [action.student_id]: {\n                        ...state.attendance[action.student_id],\n                        present: false,\n                        out_time: action.out_time\n                    }\n                }\n            }\n        \n        case 'MARK_ABSENT':\n            // student_id, excuse_type\n            state.unmarked.delete(action.student_id)\n            return {\n                ...state,\n                absent: new Set([...state.absent, action.student_id]),\n                unmarked: state.unmarked,\n                attendance: {\n                    ...state.attendance,\n                    [action.student_id]: {\n                        ...state.attendance[action.student_id],\n                        excuse_type: action.excuse_type\n                    }\n                }\n            }\n    \n        case 'CLEAR_STATE':\n            return {\n                initialized: false,\n                present: new Set(),\n                absent: new Set(),\n                unmarked: new Set(),\n                attendance: {}\n            }\n        default:\n            return state\n    }\n}"]},"metadata":{},"sourceType":"module"}