{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nvar _jsxFileName = \"/home/caleb_lee/gina_web_app/components/teacher/logs/wellnesslog.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function () { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport TouchableHighlight from \"react-native-web/dist/exports/TouchableHighlight\";\nimport KeyboardAvoidingView from \"react-native-web/dist/exports/KeyboardAvoidingView\";\nimport ScrollView from \"react-native-web/dist/exports/ScrollView\";\nimport Alert from \"react-native-web/dist/exports/Alert\";\nimport { Text, View, Button, Card, CardItem, Toast } from 'native-base';\nimport { connect } from 'react-redux';\nimport { bindActionCreators } from 'redux';\nimport { fetchClassWellnessData, markPresent, sendWellnessDataSuccess, sendWellnessDataFail, addWellnessRecord, invalidateWellnessData } from \"../../../redux/school/actions/index\";\nimport { formatDate, fetchClassData as _fetchClassData, sendWellnessData } from \"../../util\";\nimport WellnessForm from \"../wellnessform\";\n\nvar WellnessLog = function (_React$Component) {\n  _inherits(WellnessLog, _React$Component);\n\n  var _super = _createSuper(WellnessLog);\n\n  function WellnessLog(props) {\n    var _this;\n\n    _classCallCheck(this, WellnessLog);\n\n    _this = _super.call(this, props);\n    _this.state = {\n      isLoading: true,\n      date: new Date(),\n      show_record: false\n    };\n    _this.handleSend = _this.handleSend.bind(_assertThisInitialized(_this));\n    _this.addRecord = _this.addRecord.bind(_assertThisInitialized(_this));\n    return _this;\n  }\n\n  _createClass(WellnessLog, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var record_id_for_update = this.props.wellness.record_id_for_update;\n      var isConnected = this.props.class.isConnected;\n\n      if (record_id_for_update.size === 0 && isConnected) {\n        this.fetchClassData();\n      } else {\n        this.setState({\n          isLoading: false\n        });\n      }\n\n      if (!isConnected) {\n        Toast.show({\n          text: '拍謝 網路連不到! 等一下再試試看',\n          buttonText: 'Okay',\n          position: \"top\",\n          type: \"warning\",\n          duration: 2000\n        });\n      }\n    }\n  }, {\n    key: \"fetchClassData\",\n    value: function fetchClassData() {\n      var date, start_date, end_date, wellnessData;\n      return _regeneratorRuntime.async(function fetchClassData$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              date = new Date();\n              start_date = formatDate(date);\n              date.setDate(date.getDate() + 1);\n              end_date = formatDate(date);\n              _context.next = 6;\n              return _regeneratorRuntime.awrap(_fetchClassData('wellness', this.props.class.class_id, start_date, end_date));\n\n            case 6:\n              wellnessData = _context.sent;\n              this.denormalize(wellnessData);\n              this.props.fetchClassWellnessData(wellnessData.data);\n              this.setState({\n                isLoading: false\n              });\n\n            case 10:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, this, null, Promise);\n    }\n  }, {\n    key: \"denormalize\",\n    value: function denormalize(wellnessData) {\n      if (!Object.keys(wellnessData.data.records).length) {\n        return;\n      }\n\n      var records = wellnessData.data.records;\n\n      for (var record_id in records) {\n        wellnessData.data.records[record_id].time = new Date(records[record_id].time);\n      }\n    }\n  }, {\n    key: \"hasUnsentRecord\",\n    value: function hasUnsentRecord(record_id_list) {\n      var record_id_for_update = this.props.wellness.record_id_for_update;\n      var has_unsent_record = false;\n\n      for (var i = 0; i < record_id_list.length; i++) {\n        if (record_id_for_update.has(record_id_list[i])) {\n          has_unsent_record = true;\n          break;\n        }\n      }\n\n      return has_unsent_record;\n    }\n  }, {\n    key: \"addRecord\",\n    value: function addRecord(student_id) {\n      var record_amount = this.props.wellness.by_student_id[student_id].length;\n\n      if (record_amount === 2) {\n        Alert.alert('今天已經量了兩次體溫了', '', [{\n          text: 'OK'\n        }]);\n        return;\n      }\n\n      this.props.addWellnessRecord(student_id);\n    }\n  }, {\n    key: \"handleSend\",\n    value: function handleSend() {\n      var _this2 = this;\n\n      var wellness, isConnected, sendDataResult;\n      return _regeneratorRuntime.async(function handleSend$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              if (this.wellnessDataValidated()) {\n                _context2.next = 2;\n                break;\n              }\n\n              return _context2.abrupt(\"return\");\n\n            case 2:\n              wellness = this.props.wellness;\n              isConnected = this.props.class.isConnected;\n\n              if (isConnected) {\n                _context2.next = 7;\n                break;\n              }\n\n              Toast.show({\n                text: '拍謝 網路連不到! 等一下再試試看',\n                buttonText: 'Okay',\n                position: \"top\",\n                type: \"warning\",\n                duration: 2000\n              });\n              return _context2.abrupt(\"return\");\n\n            case 7:\n              _context2.next = 9;\n              return _regeneratorRuntime.awrap(sendWellnessData(wellness, this.props.class.class_id, formatDate(new Date())));\n\n            case 9:\n              sendDataResult = _context2.sent;\n\n              if (sendDataResult.success) {\n                sendDataResult.data.forEach(function (student_id) {\n                  _this2.props.markPresent(student_id, new Date());\n                });\n                this.props.sendWellnessDataSuccess();\n                this.props.navigation.goBack();\n              } else {\n                this.props.sendWellnessDataFail(sendDataResult.message);\n              }\n\n            case 11:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, null, this, null, Promise);\n    }\n  }, {\n    key: \"wellnessDataValidated\",\n    value: function wellnessDataValidated() {\n      var _this3 = this;\n\n      var _this$props$wellness = this.props.wellness,\n          records = _this$props$wellness.records,\n          record_id_for_update = _this$props$wellness.record_id_for_update;\n      var validated = true;\n      record_id_for_update.forEach(function (record_id) {\n        if (records[record_id].temperature === '') {\n          _this3.props.invalidateWellnessData(record_id, 'Temperature is not filled out');\n\n          validated = false;\n        } else if (records[record_id].status === '') {\n          _this3.props.invalidateWellnessData(record_id, 'Health status is not filled out');\n\n          validated = false;\n        }\n      });\n      return validated;\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this4 = this;\n\n      var _this$props$wellness2 = this.props.wellness,\n          by_student_id = _this$props$wellness2.by_student_id,\n          records = _this$props$wellness2.records;\n      var teacher_id = this.props.route.params.teacher_id;\n      var date = this.state.date;\n      console.log('wellness: ', this.props.wellness);\n      return React.createElement(KeyboardAvoidingView, {\n        style: {\n          flex: 1\n        },\n        enabled: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 150,\n          columnNumber: 13\n        }\n      }, React.createElement(View, {\n        style: {\n          flexDirection: 'row',\n          width: '90%',\n          justifyContent: 'space-between',\n          alignSelf: 'center',\n          alignItems: 'center'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 158,\n          columnNumber: 17\n        }\n      }, React.createElement(Text, {\n        style: {\n          fontSize: 40\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 159,\n          columnNumber: 21\n        }\n      }, formatDate(date)), React.createElement(TouchableHighlight, {\n        style: {\n          backgroundColor: '#dcf3d0',\n          padding: 10\n        },\n        onPress: this.handleSend,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 160,\n          columnNumber: 21\n        }\n      }, React.createElement(Text, {\n        style: {\n          fontSize: 40\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 163,\n          columnNumber: 25\n        }\n      }, \"\\u9001\\u51FA\"))), React.createElement(ScrollView, {\n        contentContainerStyle: {\n          alignItems: 'center',\n          marginBottom: 20\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 166,\n          columnNumber: 17\n        }\n      }, Object.keys(this.props.class.students).map(function (student_id) {\n        var record_id_list = by_student_id[student_id];\n        return React.createElement(View, {\n          key: student_id,\n          style: {\n            width: '98%'\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 170,\n            columnNumber: 29\n          }\n        }, React.createElement(Card, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 171,\n            columnNumber: 33\n          }\n        }, React.createElement(CardItem, {\n          style: {\n            flex: 1,\n            flexDirection: 'row'\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 172,\n            columnNumber: 37\n          }\n        }, React.createElement(TouchableHighlight, {\n          style: styles.childThumbnail,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 173,\n            columnNumber: 41\n          }\n        }, React.createElement(Image, {\n          source: _this4.props.class.students[student_id].profile_picture === '' ? require(\"../../../assets/icon-thumbnail.png\") : {\n            uri: _this4.props.class.students[student_id].profile_picture\n          },\n          style: styles.thumbnailImage,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 177,\n            columnNumber: 45\n          }\n        })), React.createElement(View, {\n          style: {\n            flex: 3\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 186,\n            columnNumber: 41\n          }\n        }, React.createElement(View, {\n          style: {\n            flex: 1,\n            flexDirection: 'row',\n            paddingVertical: 10\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 187,\n            columnNumber: 45\n          }\n        }, React.createElement(View, {\n          style: {\n            flex: 1\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 188,\n            columnNumber: 49\n          }\n        }, React.createElement(Text, {\n          style: {\n            fontSize: 25\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 189,\n            columnNumber: 53\n          }\n        }, _this4.props.class.students[student_id].name)), React.createElement(View, {\n          style: {\n            flex: 1,\n            alignItems: 'flex-end'\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 191,\n            columnNumber: 49\n          }\n        }, _this4.hasUnsentRecord(record_id_list) ? React.createElement(Text, {\n          style: {\n            color: 'red',\n            fontSize: 15\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 193,\n            columnNumber: 57\n          }\n        }, \"\\u672A\\u9001\\u51FA\") : null)), record_id_list.map(function (record_id, index) {\n          return React.createElement(View, {\n            style: {\n              flex: 1\n            },\n            key: record_id,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 199,\n              columnNumber: 53\n            }\n          }, index === 0 ? React.createElement(Text, {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 201,\n              columnNumber: 61\n            }\n          }, \"\\u65E9\\u4E0A\") : React.createElement(Text, {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 202,\n              columnNumber: 63\n            }\n          }, \"\\u4E0B\\u5348\"), React.createElement(WellnessForm, {\n            student_id: student_id,\n            record_id: record_id,\n            teacher_id: teacher_id,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 204,\n              columnNumber: 57\n            }\n          }));\n        })))));\n      })));\n    }\n  }]);\n\n  return WellnessLog;\n}(React.Component);\n\nvar styles = StyleSheet.create({\n  childThumbnail: {\n    flex: 1,\n    backgroundColor: 'white',\n    marginLeft: -7\n  },\n  thumbnailImage: {\n    width: 140,\n    height: 140,\n    borderRadius: 70\n  },\n  subHeading: {\n    width: 355,\n    height: 45,\n    marginTop: 10,\n    flexDirection: 'row',\n    alignItems: 'center',\n    justifyContent: 'space-between'\n  }\n});\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return {\n    class: state.classInfo,\n    wellness: state.healthstatus,\n    unmarked: state.attendance.unmarked\n  };\n};\n\nvar mapDispatchToProps = function mapDispatchToProps(dispatch) {\n  return _objectSpread({}, bindActionCreators({\n    fetchClassWellnessData: fetchClassWellnessData,\n    markPresent: markPresent,\n    sendWellnessDataSuccess: sendWellnessDataSuccess,\n    sendWellnessDataFail: sendWellnessDataFail,\n    addWellnessRecord: addWellnessRecord,\n    invalidateWellnessData: invalidateWellnessData\n  }, dispatch));\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(WellnessLog);","map":{"version":3,"sources":["/home/caleb_lee/gina_web_app/components/teacher/logs/wellnesslog.js"],"names":["React","Text","View","Button","Card","CardItem","Toast","connect","bindActionCreators","fetchClassWellnessData","markPresent","sendWellnessDataSuccess","sendWellnessDataFail","addWellnessRecord","invalidateWellnessData","formatDate","fetchClassData","sendWellnessData","WellnessForm","WellnessLog","props","state","isLoading","date","Date","show_record","handleSend","bind","addRecord","record_id_for_update","wellness","isConnected","class","size","setState","show","text","buttonText","position","type","duration","start_date","setDate","getDate","end_date","class_id","wellnessData","denormalize","data","Object","keys","records","length","record_id","time","record_id_list","has_unsent_record","i","has","student_id","record_amount","by_student_id","Alert","alert","wellnessDataValidated","sendDataResult","success","forEach","navigation","goBack","message","validated","temperature","status","teacher_id","route","params","console","log","flex","flexDirection","width","justifyContent","alignSelf","alignItems","fontSize","backgroundColor","padding","marginBottom","students","map","styles","childThumbnail","profile_picture","require","uri","thumbnailImage","paddingVertical","name","hasUnsentRecord","color","index","Component","StyleSheet","create","marginLeft","height","borderRadius","subHeading","marginTop","mapStateToProps","classInfo","healthstatus","unmarked","attendance","mapDispatchToProps","dispatch"],"mappings":"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","sourcesContent":["import React from 'react'\nimport { StyleSheet, Image, TouchableHighlight, KeyboardAvoidingView, ScrollView, Alert } from 'react-native'\nimport { Text, View, Button, Card, CardItem, Toast } from 'native-base'\nimport { connect } from 'react-redux'\nimport { bindActionCreators } from 'redux'\nimport {\n    fetchClassWellnessData,\n    markPresent,\n    sendWellnessDataSuccess,\n    sendWellnessDataFail,\n    addWellnessRecord,\n    invalidateWellnessData\n} from '../../../redux/school/actions/index'\nimport { formatDate, fetchClassData, sendWellnessData } from '../../util';\nimport WellnessForm from '../wellnessform'\n\nclass WellnessLog extends React.Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            isLoading: true,\n            date: new Date(),\n            show_record: false\n        }\n        this.handleSend = this.handleSend.bind(this)\n        this.addRecord = this.addRecord.bind(this)\n    }\n\n    componentDidMount() {\n        const { record_id_for_update } = this.props.wellness\n        const { isConnected } = this.props.class\n        if (record_id_for_update.size === 0 && isConnected) {\n            this.fetchClassData()\n        }\n        else {\n            this.setState({\n                isLoading: false\n            })\n        }\n\n        if (!isConnected) {\n            Toast.show({\n                text: '拍謝 網路連不到! 等一下再試試看',\n                buttonText: 'Okay',\n                position: \"top\",\n                type: \"warning\",\n                duration: 2000\n            })\n        }\n    }\n\n    async fetchClassData() {\n        const date = new Date()\n        const start_date = formatDate(date)\n        date.setDate(date.getDate() + 1)\n        const end_date = formatDate(date)\n        const wellnessData = await fetchClassData('wellness', this.props.class.class_id, start_date, end_date)\n        // console.log(wellnessData)\n        this.denormalize(wellnessData)\n        this.props.fetchClassWellnessData(wellnessData.data)\n        this.setState({\n            isLoading: false\n        })\n    }\n\n    denormalize(wellnessData) {\n        if (!Object.keys(wellnessData.data.records).length){\n            return\n        }\n        const { records } = wellnessData.data\n        for (var record_id in records) {\n            wellnessData.data.records[record_id].time = new Date(records[record_id].time)\n        }\n    }\n\n    hasUnsentRecord(record_id_list) {\n        const { record_id_for_update } = this.props.wellness\n        var has_unsent_record = false\n        for (var i = 0; i < record_id_list.length; i++) {\n            if (record_id_for_update.has(record_id_list[i])) {\n                has_unsent_record = true\n                break\n            }\n        }\n        return has_unsent_record\n    }\n\n    addRecord(student_id) {\n        const record_amount = this.props.wellness.by_student_id[student_id].length\n        if (record_amount === 2) {\n            Alert.alert(\n                '今天已經量了兩次體溫了',\n                '',\n                [{text: 'OK'}]\n            )\n            return\n        }\n        this.props.addWellnessRecord(student_id)\n    }\n\n    async handleSend() {\n        if (!this.wellnessDataValidated()) {\n            return\n        }\n        const { wellness } = this.props\n        const { isConnected } = this.props.class\n        if (!isConnected) {\n            Toast.show({\n                text: '拍謝 網路連不到! 等一下再試試看',\n                buttonText: 'Okay',\n                position: \"top\",\n                type: \"warning\",\n                duration: 2000\n            })\n            return\n        }\n        const sendDataResult = await sendWellnessData(wellness, this.props.class.class_id, formatDate(new Date))\n        if (sendDataResult.success) {\n            sendDataResult.data.forEach(student_id => {\n                this.props.markPresent(student_id, new Date)\n            })\n            this.props.sendWellnessDataSuccess()\n            this.props.navigation.goBack()\n        } else {\n            this.props.sendWellnessDataFail(sendDataResult.message)\n        }\n    }\n\n    wellnessDataValidated() {\n        const { records, record_id_for_update } = this.props.wellness\n        let validated = true\n        record_id_for_update.forEach(record_id => {\n            if (records[record_id].temperature === '') {\n                this.props.invalidateWellnessData(record_id, 'Temperature is not filled out')\n                validated = false\n            } else if (records[record_id].status === '') {\n                this.props.invalidateWellnessData(record_id, 'Health status is not filled out')\n                validated = false\n            }\n        })\n        return validated\n    }\n\n    render() {\n        const { by_student_id, records } = this.props.wellness\n        const { teacher_id } = this.props.route.params\n        const date = this.state.date\n        console.log('wellness: ', this.props.wellness)\n        return (\n            <KeyboardAvoidingView\n                style={{\n                    flex: 1\n                }}\n                // behavior='padding'\n                // keyboardVerticalOffset={100}\n                enabled\n            >\n                <View style={{ flexDirection: 'row', width: '90%', justifyContent: 'space-between', alignSelf: 'center', alignItems: 'center'}}>\n                    <Text style={{ fontSize: 40 }}>{formatDate(date)}</Text>\n                    <TouchableHighlight\n                        style={{ backgroundColor: '#dcf3d0', padding: 10  }}\n                        onPress={this.handleSend}>\n                        <Text style={{ fontSize: 40}}>送出</Text>\n                    </TouchableHighlight>\n                </View>\n                <ScrollView contentContainerStyle={{ alignItems: 'center', marginBottom: 20 }}>\n                    {Object.keys(this.props.class.students).map((student_id) => {\n                        const record_id_list = by_student_id[student_id]\n                        return(\n                            <View key={student_id} style={{ width: '98%' }}>\n                                <Card>\n                                    <CardItem style={{ flex: 1, flexDirection: 'row' }}>\n                                        <TouchableHighlight\n                                            style={styles.childThumbnail}\n                                            // onPress={() => this.addRecord(student_id)}\n                                        >\n                                            <Image\n                                                source={\n                                                    this.props.class.students[student_id].profile_picture === '' ?\n                                                        require('../../../assets/icon-thumbnail.png')\n                                                        : {uri: this.props.class.students[student_id].profile_picture}\n                                                }\n                                                style={styles.thumbnailImage}\n                                            />\n                                        </TouchableHighlight>\n                                        <View style={{ flex: 3 }}>\n                                            <View style={{ flex: 1, flexDirection: 'row', paddingVertical: 10 }}>\n                                                <View style={{ flex: 1 }}>\n                                                    <Text style={{ fontSize: 25}}>{this.props.class.students[student_id].name}</Text>\n                                                </View>\n                                                <View style={{ flex: 1, alignItems: 'flex-end' }}>\n                                                    {this.hasUnsentRecord(record_id_list) ? \n                                                        <Text style={{ color: 'red', fontSize: 15 }}>未送出</Text>\n                                                    : null}\n                                                </View>\n                                            </View>\n                                            {record_id_list.map((record_id, index) => {\n                                                return (\n                                                    <View style={{flex:1}} key={record_id}>\n                                                        { index === 0 ?\n                                                            <Text>早上</Text>\n                                                            : <Text>下午</Text>\n                                                        }\n                                                        <WellnessForm\n                                                            student_id={student_id}\n                                                            record_id={record_id}\n                                                            teacher_id={teacher_id}\n                                                        />\n                                                    </View>\n                                                )\n                                            })}\n                                        </View>\n                                    </CardItem>\n                                </Card>\n                            </View>\n                        )\n                    })}\n                </ScrollView>\n            </KeyboardAvoidingView>\n        )\n    }\n}\n\nconst styles = StyleSheet.create({\n    childThumbnail: {\n        flex: 1,\n        backgroundColor: 'white',\n        marginLeft: -7,\n    },\n    thumbnailImage: {\n        width: 140,\n        height: 140,\n        borderRadius: 70\n    },\n    subHeading: {\n        width: 355,\n        height: 45,\n        marginTop: 10,\n        flexDirection: 'row',\n        alignItems: 'center',\n        justifyContent: 'space-between',\n    }\n})\n\nconst mapStateToProps = (state) => {\n    return {\n        class: state.classInfo,\n        wellness: state.healthstatus,\n        unmarked: state.attendance.unmarked\n    }\n}\n\nconst mapDispatchToProps = (dispatch) => {\n    return {\n        ...bindActionCreators({\n            fetchClassWellnessData,\n            markPresent,\n            sendWellnessDataSuccess,\n            sendWellnessDataFail,\n            addWellnessRecord,\n            invalidateWellnessData\n        }, dispatch)\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps) (WellnessLog)"]},"metadata":{},"sourceType":"module"}