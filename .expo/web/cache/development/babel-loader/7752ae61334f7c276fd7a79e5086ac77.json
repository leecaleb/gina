{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nvar initial_state = {\n  isConnected: true,\n  classes: {},\n  pick_up_request: [],\n  admin_passcode: '',\n  viewing_status: '',\n  passcodeAdminId: {},\n  passcodeTeacherId: {},\n  teacherOnDuty: '',\n  teachers: {},\n  students: {},\n  attendance: {},\n  student_present: new Set(),\n  student_absent: new Set(),\n  student_unmarked: new Set(),\n  teacher_present: new Set(),\n  teacher_absent: new Set(),\n  teacher_unmarked: new Set()\n};\nexport default function school() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initial_state;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case 'SET_CONNECT_STATE':\n      {\n        var isConnected = action.isConnected;\n        return _objectSpread(_objectSpread({}, state), {}, {\n          isConnected: isConnected\n        });\n      }\n\n    case 'FETCH_CLASSES_SUCCESS':\n      var classes = action.classes,\n          admin_passcode = action.admin_passcode;\n      return _objectSpread(_objectSpread({}, state), {}, {\n        classes: classes,\n        admin_passcode: admin_passcode\n      });\n\n    case 'FETCH_TEACHERS_SUCCESS':\n      {\n        var admins = action.admins,\n            teachers = action.teachers,\n            _classes = action.classes;\n\n        var updated_classes = _objectSpread({}, state.classes);\n\n        var passcodeAdminId = state.passcodeAdminId,\n            passcodeTeacherId = state.passcodeTeacherId;\n        Object.keys(_classes).forEach(function (class_id) {\n          updated_classes[class_id].teachers = _classes[class_id].teachers;\n        });\n        Object.keys(admins).forEach(function (admin_id) {\n          passcodeAdminId[admins[admin_id].passcode] = admin_id;\n        });\n        Object.keys(teachers).forEach(function (teacher_id) {\n          passcodeTeacherId[teachers[teacher_id].passcode] = teacher_id;\n        });\n        return _objectSpread(_objectSpread({}, state), {}, {\n          passcodeAdminId: passcodeAdminId,\n          passcodeTeacherId: passcodeTeacherId,\n          teachers: _objectSpread(_objectSpread({}, teachers), admins),\n          classes: updated_classes,\n          teacher_unmarked: new Set(Object.keys(teachers))\n        });\n      }\n\n    case 'FETCH_STUDENTS_SUCCESS':\n      {\n        var students = action.students,\n            _classes2 = action.classes;\n\n        var _updated_classes = _objectSpread({}, state.classes);\n\n        Object.keys(_classes2).forEach(function (class_id) {\n          _updated_classes[class_id].students = _classes2[class_id].students;\n        });\n        return _objectSpread(_objectSpread({}, state), {}, {\n          students: students,\n          classes: _updated_classes,\n          student_unmarked: new Set(Object.keys(students))\n        });\n      }\n\n    case 'FETCH_TEACHER_ATTENDANCE_SUCCESS':\n      {\n        var attendance = action.attendance,\n            _teachers = action.teachers;\n\n        var updated_teachers = _objectSpread({}, state.teachers);\n\n        var teacher_unmarked = new Set(Object.keys(state.teachers));\n        var teacher_present = new Set();\n        var teacher_absent = new Set();\n        Object.keys(_teachers).forEach(function (teacher_id) {\n          updated_teachers[teacher_id].attendance = _teachers[teacher_id].attendance_array;\n          updated_teachers[teacher_id].present = _teachers[teacher_id].present;\n          updated_teachers[teacher_id].total_minutes = _teachers[teacher_id].total_minutes;\n\n          if (_teachers[teacher_id].present) {\n            teacher_present.add(teacher_id);\n          } else {\n            teacher_absent.add(teacher_id);\n          }\n\n          teacher_unmarked.delete(teacher_id);\n        });\n        return _objectSpread(_objectSpread({}, state), {}, {\n          teachers: updated_teachers,\n          attendance: _objectSpread(_objectSpread({}, state.attendance), attendance),\n          teacher_present: teacher_present,\n          teacher_absent: teacher_absent,\n          teacher_unmarked: teacher_unmarked\n        });\n      }\n\n    case 'FETCH_STUDENT_ATTENDANCE_SUCCESS':\n      {\n        var _attendance = action.attendance,\n            _students = action.students,\n            present = action.present,\n            absent = action.absent;\n\n        var updated_students = _objectSpread({}, state.students);\n\n        var student_unmarked = new Set(Object.keys(state.students));\n        Object.keys(_students).forEach(function (student_id) {\n          updated_students[student_id].attendance_id = _students[student_id];\n\n          if (present.includes(student_id) || absent.includes(student_id)) {\n            student_unmarked.delete(student_id);\n          }\n        });\n        return _objectSpread(_objectSpread({}, state), {}, {\n          students: updated_students,\n          attendance: _objectSpread(_objectSpread({}, state.attendance), _attendance),\n          student_present: new Set(_toConsumableArray(present)),\n          student_absent: new Set(_toConsumableArray(absent)),\n          student_unmarked: student_unmarked\n        });\n      }\n\n    case 'EDIT_TEACHER_ON_DUTY':\n      {\n        var teacher_id = action.teacher_id;\n        return _objectSpread(_objectSpread({}, state), {}, {\n          teacherOnDuty: teacher_id\n        });\n      }\n\n    case 'ADD_PICKUP_REQUEST':\n      {\n        var requests = action.requests;\n        return _objectSpread(_objectSpread({}, state), {}, {\n          pick_up_request: requests\n        });\n      }\n\n    case 'UPDATE_VIEWING_STATUS':\n      {\n        var status = action.status;\n        return _objectSpread(_objectSpread({}, state), {}, {\n          viewing_status: status\n        });\n      }\n\n    case 'UPDATE_PROFILE_PICTURE':\n      {\n        var student_id = action.student_id,\n            uri = action.uri;\n\n        var _students2 = _objectSpread({}, state.students);\n\n        _students2[student_id].profile_picture = uri;\n        return _objectSpread(_objectSpread({}, state), {}, {\n          students: _students2\n        });\n      }\n\n    case 'EDIT_STUDENT_SUCCESS':\n      {\n        var _student_id = action.student_id,\n            name = action.name,\n            old_class_id = action.old_class_id,\n            new_class_id = action.new_class_id;\n\n        var _students3 = _objectSpread({}, state.students);\n\n        var _classes3 = _objectSpread({}, state.classes);\n\n        _students3[_student_id].name = name;\n        _students3[_student_id].class_id = new_class_id;\n        var student_id_array = _classes3[old_class_id].students;\n        var new_student_id_array = [];\n\n        for (var i = 0; i < student_id_array.length; i++) {\n          if (student_id_array[i] !== _student_id) {\n            new_student_id_array.push(_student_id);\n          }\n        }\n\n        _classes3[old_class_id].students = new_student_id_array;\n        student_id_array = _classes3[new_class_id].students;\n        student_id_array.push(_student_id);\n        _classes3[new_class_id].students = student_id_array;\n        return _objectSpread(_objectSpread({}, state), {}, {\n          students: _students3,\n          classes: _classes3\n        });\n      }\n\n    case 'UPDATE_TEACHER_PROFILE_PICTURE':\n      {\n        var _teacher_id = action.teacher_id,\n            image_url = action.image_url;\n\n        var _teachers2 = _objectSpread({}, state.teachers);\n\n        _teachers2[_teacher_id].profile_picture = image_url;\n        return _objectSpread(_objectSpread({}, state), {}, {\n          teachers: _teachers2\n        });\n      }\n\n    case 'CLEAR_STATE':\n      {\n        return _objectSpread(_objectSpread({}, state), {}, {\n          viewing_status: ''\n        });\n      }\n\n    case 'CLEAR_SCHOOL_STATE':\n      {\n        return {\n          isConnected: false,\n          classes: {},\n          pick_up_request: [],\n          passcodeAdminId: {},\n          passcodeTeacherId: {},\n          teacherOnDuty: '',\n          teachers: {},\n          students: {},\n          attendance: {},\n          student_present: new Set(),\n          student_absent: new Set(),\n          student_unmarked: new Set(),\n          teacher_present: new Set(),\n          teacher_absent: new Set(),\n          teacher_unmarked: new Set()\n        };\n      }\n\n    default:\n      return state;\n  }\n}","map":{"version":3,"sources":["/home/caleb_lee/gina_web_app/redux/school/reducers/school.js"],"names":["initial_state","isConnected","classes","pick_up_request","admin_passcode","viewing_status","passcodeAdminId","passcodeTeacherId","teacherOnDuty","teachers","students","attendance","student_present","Set","student_absent","student_unmarked","teacher_present","teacher_absent","teacher_unmarked","school","state","action","type","admins","updated_classes","Object","keys","forEach","class_id","admin_id","passcode","teacher_id","updated_teachers","attendance_array","present","total_minutes","add","delete","absent","updated_students","student_id","attendance_id","includes","requests","status","uri","profile_picture","name","old_class_id","new_class_id","student_id_array","new_student_id_array","i","length","push","image_url"],"mappings":"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","sourcesContent":["const initial_state = {\n  isConnected: true,\n  classes: {\n    /*\n    [id]: {\n      teachers: [],\n      students: [],\n      name: ''\n    }\n    */\n  },\n  pick_up_request: [],\n  admin_passcode: '',\n  viewing_status: '',\n  passcodeAdminId: {},\n  passcodeTeacherId: {},\n  teacherOnDuty: '',\n  teachers: {\n      /*\n      [id]: {\n          name: '',\n          profile_picture: '',\n          passcode: 33,\n          present: false,\n          attendance: [attendance_id, ...]\n      }, {...}\n      */\n  },\n  students: {\n      /*\n      [id]: {\n          name: '',\n          profile_picture: '',\n          present: true,\n          wellness_id: '',\n          address: '',\n          father_phone: '',\n          mother_phone: '',\n          attendance_id: ''\n      }, {...}\n      */\n  },\n  attendance: {\n    /*\n    [id]: {\n      in_time: '',\n      out_time: '',\n      excuse_type: ''\n    }\n    */\n  },\n  student_present: new Set(),\n  student_absent: new Set(),\n  student_unmarked: new Set(),\n  teacher_present: new Set(),\n  teacher_absent: new Set(),\n  teacher_unmarked: new Set()\n}\n\nexport default function school(state = initial_state, action) {\n  switch (action.type) {\n    case 'SET_CONNECT_STATE': {\n      const { isConnected } = action\n      return {\n          ...state,\n          isConnected\n      }\n    }\n    case 'FETCH_CLASSES_SUCCESS':\n      const { classes, admin_passcode } = action\n      return {\n        ...state,\n        classes,\n        admin_passcode\n      }\n    \n    case 'FETCH_TEACHERS_SUCCESS': {\n      const { admins, teachers, classes } = action\n      const updated_classes = {...state.classes}\n      const {passcodeAdminId, passcodeTeacherId} = state\n\n      Object.keys(classes).forEach(class_id => {\n        updated_classes[class_id].teachers = classes[class_id].teachers\n      })\n\n      Object.keys(admins).forEach(admin_id => {\n        passcodeAdminId[admins[admin_id].passcode] = admin_id\n      })\n\n      Object.keys(teachers).forEach(teacher_id => {\n        passcodeTeacherId[teachers[teacher_id].passcode] = teacher_id\n      })\n\n      return {\n        ...state,\n        passcodeAdminId,\n        passcodeTeacherId,\n        // admins,\n        teachers: {\n          ...teachers,\n          ...admins\n        },\n        classes: updated_classes,\n        teacher_unmarked: new Set(Object.keys(teachers))\n      }\n    }\n\n    case 'FETCH_STUDENTS_SUCCESS': {\n      const { students, classes } = action\n      const updated_classes = {...state.classes}\n\n      Object.keys(classes).forEach(class_id => {\n        updated_classes[class_id].students = classes[class_id].students\n      })\n      \n      return {\n        ...state,\n        students,\n        classes: updated_classes,\n        student_unmarked: new Set(Object.keys(students))\n      }\n    }\n\n    case 'FETCH_TEACHER_ATTENDANCE_SUCCESS': {\n      const { attendance, teachers } = action\n      const updated_teachers = {...state.teachers}\n      const teacher_unmarked = new Set(Object.keys(state.teachers))\n      const teacher_present = new Set()\n      const teacher_absent = new Set()\n      Object.keys(teachers).forEach(teacher_id => {\n        updated_teachers[teacher_id].attendance = teachers[teacher_id].attendance_array\n        updated_teachers[teacher_id].present = teachers[teacher_id].present\n        updated_teachers[teacher_id].total_minutes = teachers[teacher_id].total_minutes\n        if (teachers[teacher_id].present) {\n          teacher_present.add(teacher_id)\n        } else {\n          teacher_absent.add(teacher_id)\n        }\n        teacher_unmarked.delete(teacher_id)\n      })\n      return {\n        ...state,\n        teachers: updated_teachers,\n        attendance: {\n          ...state.attendance,\n          ...attendance\n        },\n        teacher_present,\n        teacher_absent,\n        teacher_unmarked\n      }\n    }\n\n    case 'FETCH_STUDENT_ATTENDANCE_SUCCESS': {\n      const { attendance, students, present, absent } = action\n      const updated_students = {...state.students}\n      const student_unmarked = new Set(Object.keys(state.students))\n      Object.keys(students).forEach(student_id => {\n        updated_students[student_id].attendance_id = students[student_id]\n\n        if (present.includes(student_id) || absent.includes(student_id)) {\n          student_unmarked.delete(student_id)\n        }\n      })\n      return {\n        ...state,\n        students: updated_students,\n        attendance: {\n          ...state.attendance,\n          ...attendance\n        },\n        student_present: new Set([...present]),\n        student_absent: new Set([...absent]),\n        student_unmarked\n      }\n    }\n\n    case 'EDIT_TEACHER_ON_DUTY': {\n      const {teacher_id} = action\n      return {\n        ...state,\n        teacherOnDuty: teacher_id\n      }\n    }\n    \n    case 'ADD_PICKUP_REQUEST': {\n      const { requests } = action\n      return {\n        ...state,\n        pick_up_request: requests\n      }\n    }\n\n    case 'UPDATE_VIEWING_STATUS': {\n      const { status } = action\n      return {\n        ...state,\n        viewing_status: status\n      }\n    }\n\n    case 'UPDATE_PROFILE_PICTURE': {\n      const { student_id, uri } = action\n      const students = {...state.students}\n      students[student_id].profile_picture = uri\n      return {\n        ...state,\n        students\n      }\n    }\n\n    case 'EDIT_STUDENT_SUCCESS': {\n      const { student_id, name, old_class_id, new_class_id } = action\n      const students = {...state.students}\n      const classes = {...state.classes}\n      students[student_id].name = name\n      students[student_id].class_id = new_class_id\n\n      // remove student id from old class[id].students\n      let student_id_array = classes[old_class_id].students\n      let new_student_id_array = []\n      for(var i = 0; i < student_id_array.length; i++) {\n        if (student_id_array[i] !== student_id) {\n          new_student_id_array.push(student_id)\n        }\n      }\n      classes[old_class_id].students = new_student_id_array\n\n      // add student id to new class[id].students\n      student_id_array = classes[new_class_id].students\n      student_id_array.push(student_id)\n      classes[new_class_id].students = student_id_array\n\n      return {\n        ...state,\n        students,\n        classes\n      }\n    }\n\n    case 'UPDATE_TEACHER_PROFILE_PICTURE': {\n      const { teacher_id, image_url } = action\n      const teachers = {...state.teachers}\n      teachers[teacher_id].profile_picture = image_url\n      return {\n        ...state,\n        teachers\n      }\n    }\n\n    case 'CLEAR_STATE': {\n      return {\n        ...state,\n        viewing_status: ''\n      }\n    }\n  \n    case 'CLEAR_SCHOOL_STATE': {\n      return {\n        isConnected: false,\n        classes: {},\n        pick_up_request: [],\n        passcodeAdminId: {},\n        passcodeTeacherId: {},\n        teacherOnDuty: '',\n        teachers: {},\n        students: {},\n        attendance: {},\n        student_present: new Set(),\n        student_absent: new Set(),\n        student_unmarked: new Set(),\n        teacher_present: new Set(),\n        teacher_absent: new Set(),\n        teacher_unmarked: new Set()\n      }\n    }\n    \n    default:\n        return state\n  }\n\n}"]},"metadata":{},"sourceType":"module"}